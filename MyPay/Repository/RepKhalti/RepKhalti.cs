using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.Ajax.Utilities;
using Antlr.Runtime;
using DocumentFormat.OpenXml.Spreadsheet;
using Microsoft.Ajax.Utilities;
using MyPay.Models;
using MyPay.Models.Add;
using MyPay.Models.Common;
using MyPay.Models.Get;
using MyPay.Models.Get.KhanePani;
using MyPay.Models.Get.Nea;
using MyPay.Models.Get.PlasmaAirlines;
using MyPay.Models.Miscellaneous;
using MyPay.Models.Request.WebRequest;
using MyPay.Models.Response;
using MyPay.Models.Response.WebResponse;
using MyPay.Models.NepalPayQR;
using MyPay.Models.VendorAPI.Get.Antivirus.K7;
using MyPay.Models.VendorAPI.Get.Antivirus.Mcafee;
using MyPay.Models.VendorAPI.Get.BusSewaService;
using MyPay.Models.VendorAPI.Get.CableCar;
using MyPay.Models.VendorAPI.Get.Insurance.Arhant;
using MyPay.Models.VendorAPI.Get.Insurance.Citizen;
using MyPay.Models.VendorAPI.Get.Insurance.Himalayan;
using MyPay.Models.VendorAPI.Get.Insurance.IME;
using MyPay.Models.VendorAPI.Get.Insurance.IMEGeneral;
using MyPay.Models.VendorAPI.Get.Insurance.Jyoti;
using MyPay.Models.VendorAPI.Get.Insurance.Mahalaxmi;
using MyPay.Models.VendorAPI.Get.Insurance.National;
using MyPay.Models.VendorAPI.Get.Insurance.Neco;
using MyPay.Models.VendorAPI.Get.Insurance.Nepal;
using MyPay.Models.VendorAPI.Get.Insurance.Prabhu;
using MyPay.Models.VendorAPI.Get.Insurance.Prime;
using MyPay.Models.VendorAPI.Get.Insurance.Prudential;
using MyPay.Models.VendorAPI.Get.Insurance.Reliable;
using MyPay.Models.VendorAPI.Get.Insurance.Reliance;
using MyPay.Models.VendorAPI.Get.Insurance.Sagarmatha;
using MyPay.Models.VendorAPI.Get.Insurance.Sanima;
using MyPay.Models.VendorAPI.Get.Insurance.Shikhar;
using MyPay.Models.VendorAPI.Get.Insurance.Surya;
using MyPay.Models.VendorAPI.Get.Insurance.Union;
using MyPay.Models.VendorAPI.Get.Internet.SUBISU;
using MyPay.Models.VendorAPI.Get.Ride;
using MyPay.Models.VendorAPI.Get.WorldLink;
using MyPay.Models.VendorAPI.VendorRequest_CommonHelper;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Org.BouncyCastle.Asn1.Ocsp;
using Org.BouncyCastle.Asn1.X509;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Management.Instrumentation;
using System.Net;
using System.Runtime.Remoting;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Runtime.Remoting;
using System.Security.Cryptography.Xml;
using System.Web;
using System.Windows.Interop;
using System.Xml;
using System.Xml.Linq;
using static MyPay.Models.Add.AddUser;
using static MyPay.Models.Response.Plasma_Tech_Response_Model;
using static MyPay.Models.Response.WebResponse.WebRes_FlightSector;
using static MyPay.Repository.RepKhalti;
using static MyPay.Models.OrganizationModel;
using static MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper;
using System.Windows;
using System.Web.Mvc;
using static ClosedXML.Excel.XLPredefinedFormat;
using static IdentityModel.OidcConstants;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using OfficeOpenXml.Drawing.Slicer.Style;
using System.Web.Services.Description;
using System.Web.Http.Results;
using DateTime = System.DateTime;
using MyPay.Models.VendorAPI.Get.TouristBus;
using MyPay.Models.VendorAPI.Get.Insurance.ArhantLife;
using log4net;

namespace MyPay.Repository
{
    public static class RepKhalti
    {

        public static Int64 Id = 0;
        public static string UniqueTransactionId = string.Empty;
        public static string TransactionUniqueId = string.Empty;
        private static int InputNumber_Digits = 10;
        public static AddVendor_API_Requests resKhalti = new AddVendor_API_Requests();
        public static decimal WalletBalance = 0;

        #region Topup
        public static string RequestVendorTopup(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string Remarks, string MemberId,
            string authenticationToken, string UserInput, string DeviceCode, string PlatForm, AddUserLoginWithPin resGetRecord, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "khalti-topup/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_topup;
                if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                {
                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                }
                if (string.IsNullOrEmpty(msg))
                {
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                    string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, Remarks, VendorAPIType);
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput, DeviceCode,
                        PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        /// / <summary>
        /// /  ************ Movie**********
        /// / </summary> 
        public static string RequestServiceGroup_MOVIE(string Version, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_Movie objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "search/movie";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_MOVIE();
                objRes = VendorApi_CommonHelper.RequestMOVIE(JsonReq, KhaltiAPIURL);

                //msg = objRes.Message;
            }
            return msg;
        }
        #endregion

        #region RechargeCards
        public static string RequestNTC(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
          string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "ntc/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_ntc;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                if (Convert.ToDouble(Amount) < 10 || Convert.ToDouble(Amount) > 25000)
                {
                    msg = "Please enter amount between 10 to 25000.";
                    JsonReq = String.Empty;
                }
                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        msg = "Invalid MemberId";
                        JsonReq = String.Empty;
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                        DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }

                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        public static string RequestNCELL(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
        string authenticationToken, string UserInput, string DeviceCode, string PlatForm, AddUserLoginWithPin resGetRecord, ref AddVendor_API_Requests objVendor_API_Requests, AddCouponsScratched resCoupon = null)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "ncell/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_ncell;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                if (Convert.ToDouble(Amount) < 10 || Convert.ToDouble(Amount) > 25000)
                {
                    msg = "Please enter amount between 10 to 5000.";
                    JsonReq = String.Empty;
                }
                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        return "Invalid MemberId";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }

                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);

                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                        DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }

                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        public static string RequestSMARTCELL(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
       string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                #region SetApiVariables
                string KhaltiAPIURL = "smartcell/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_smartcell;
                decimal[] validation_array = VendorApi_CommonHelper.smartcellvalidation;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                #endregion


                if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                {
                    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    JsonReq = String.Empty;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        return "Invalid MemberId";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                        DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }

                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        public static string RequestDISHHOME_ERC(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
       string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                #region SetApiVariables
                string KhaltiAPIURL = "dishhome-erc/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_dishhome_erc;
                decimal[] validation_array = VendorApi_CommonHelper.dishhome_erc_validation;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                #endregion

                if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                {
                    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    JsonReq = String.Empty;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        return "Invalid MemberId";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                        DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }

                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        public static string RequestNTC_ERC(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
       string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                #region SetApiVariables
                string KhaltiAPIURL = "ntc-erc/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_ntc_erc;
                decimal[] validation_array = VendorApi_CommonHelper.ntc_erc_validation;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                #endregion

                if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                {
                    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    JsonReq = String.Empty;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        return "Invalid MemberId";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                        DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }

                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }


        public static string RequestUTL_ERC(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
       string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                #region SetApiVariables
                string KhaltiAPIURL = "utl-erc/";
                int VendorAPIType = 0;// (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_utl_erc;
                if (VendorAPIType == 0)
                {
                    return "Service discontinued";
                }
                decimal[] validation_array = VendorApi_CommonHelper.utl_erc_validation;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                #endregion

                if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                {
                    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    JsonReq = String.Empty;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        return "Invalid MemberId";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                        DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }

                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        public static string RequestSMART_ERC(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
       string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                #region SetApiVariables
                string KhaltiAPIURL = "smart-erc/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_smart_erc;
                decimal[] validation_array = VendorApi_CommonHelper.smart_erc_validation;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                #endregion

                if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                {
                    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    JsonReq = String.Empty;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);

                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        return "Invalid MemberId";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                    DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }

                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        public static string RequestBROAD_LINK_ERC(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
       string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                #region SetApiVariables
                string KhaltiAPIURL = "broadlink-erc/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_broadlink_erc;
                decimal[] validation_array = VendorApi_CommonHelper.broadlink_erc_validation;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                #endregion

                if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                {
                    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    JsonReq = String.Empty;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        return "Invalid MemberId";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                        DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }

                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        public static string RequestNETTV_ERC(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
       string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 10;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                #region SetApiVariables
                string KhaltiAPIURL = "nettv-erc/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_nettv_erc;
                decimal[] validation_array = VendorApi_CommonHelper.nettv_erc_validation;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                #endregion

                if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                {
                    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    JsonReq = String.Empty;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        return "Invalid MemberId";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                        DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }
                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }


        public static string RequestPSTN_LANDLINE(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
       string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            InputNumber_Digits = 8;
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                #region SetApiVariables
                string KhaltiAPIURL = "landline/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_pstn_landline;
                decimal[] validation_array = VendorApi_CommonHelper.pstn_landline_validation;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                #endregion

                //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                //{
                //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                //    JsonReq = String.Empty;
                //}
                if (Convert.ToDecimal(Amount) < 10 || Convert.ToDecimal(Amount) > 10000)
                {
                    msg = "Invalid Amount. Please enter amount between 10 and 10000";
                    JsonReq = String.Empty;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                if (string.IsNullOrEmpty(msg))
                {

                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        return "Invalid MemberId";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                    msg = VendorApi_CommonHelper.ProcessJsonRequestToVendor_And_SaveTransaction(KhaltiAPIURL, ref IsCouponUnlocked, ref TransactionID, resGetCouponsScratched, BankTransactionId, WalletType, CustomerId, Req_ReferenceNo, Amount, authenticationToken, UserInput,
                        DeviceCode, PlatForm, resGetRecord, JsonReq, VendorAPIType, msg, ref objVendor_API_Requests);
                }
                // **** Populate Values to be passed to Controller Action **** //
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                //WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        public static string RequestLOOKUP_TRANSACTION(string Req_ReferenceNo, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Req_ReferenceNo))
            {
                msg = "Please enter reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                objRes = VendorApi_CommonHelper.RequestLOOKUP_TRANSACTION(Req_ReferenceNo);
                msg = "success";
            }
            return msg;
        }

        #endregion

        #region Electricity
        public static string RequestServiceGroup_COUNTER_NEA(string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Nea_Counters objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "counters/nea/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COUNTERS_NEA();
                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COUNTERS_NEA(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_DETAILS_NEA(string sc_no, string consumer_id, string reference, string office_code, ref GetVendor_API_ServiceGroup_Nea_Details objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(sc_no))
            {
                msg = "Please enter Consumer_SC_No.";
            }
            else if (string.IsNullOrEmpty(consumer_id))
            {
                msg = "Please enter ConsumerId.";
            }
            else if (string.IsNullOrEmpty(reference))
            {
                msg = "Please enter ReferenceNo.";
            }
            else if (string.IsNullOrEmpty(office_code))
            {
                msg = "Please enter OfficeCode.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/nea/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_DETAILS_NEA(sc_no, consumer_id, reference, office_code);
                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_DETAILS_NEA(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }
        public static string RequestServiceGroup_SERVICE_CHARGE_NEA(string Amount, string SessnionId, ref GetVendor_API_ServiceGroup_Nea_ServiceCharge objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (string.IsNullOrEmpty(SessnionId))
            {
                msg = "Please enter SessnionId.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "servicecharge/nea/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_SERVICE_CHARGE_NEA(Amount, SessnionId);
                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_SERVICE_CHARGE_NEA(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_DATAPACK_NCELL(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string MemberId, string Amount, string UniqueCustomerID, string product_code, string number, string reference, string authenticationToken, string UserInput, string DeviceCode, string PlatForm, string PackageId, string ProductType, string VendorJsonLookup, ref GetVendor_API_DataPack_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(number))
            {
                msg = "Please enter Number.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (string.IsNullOrEmpty(reference))
            {
                msg = "Please enter ReferenceNo.";
            }
            else if (string.IsNullOrEmpty(product_code))
            {
                msg = "Please enter ProductCode.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "use/ncell-product/";
                int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_DataPack_NCell;
                if (ProductType.ToLower().Replace(" ", "") == "voicepack")
                {
                    VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_VoicePack_NCELL;
                }
                else if (ProductType.ToLower().Replace(" ", "") == "smspack")
                {
                    VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_SMSPack_NCELL;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        msg = "Please enter Valid MemberId.";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));

                    }
                    if (string.IsNullOrEmpty(msg))
                    {
                        WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                        AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                        {
                            msg = Common.InsufficientBalance_MPCoins;
                        }
                        else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                        {
                            msg = Common.InsufficientBalance;
                        }
                        else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                        {
                            msg = Common.InsufficientBalance;
                        }
                        else
                        {
                            string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_DATAPACK_COMMIT(Amount, number, reference, product_code, PackageId);
                            string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                            decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            if (resGetRecord == null || resGetRecord.Id == 0)
                            {
                                msg = "MemberId not found";
                                JsonReq = String.Empty;
                            }
                            else
                            {
                                if (resGetRecord.IsActive == false)
                                {
                                    msg = "Your account is not active.";
                                    JsonReq = String.Empty;
                                }
                            }
                            if (!string.IsNullOrEmpty(JsonReq))
                            {
                                string TransactionUniqueId = string.Empty;
                                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, VendorJsonLookup, out WalletBalance);
                                if (msg == "success")
                                {
                                    string VendorOutputResponse = string.Empty;
                                    objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_DATAPACK(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                    objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                    if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                    {
                                        //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                        msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                        if (msg.ToLower() == "success")
                                        {
                                            string Title = "Transaction successfull";
                                            string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                            Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                        }
                                    }
                                    else
                                    {
                                        msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                    }
                                }

                            }
                            // **** Populate Values to be passed to Controller Action **** //
                            //AddUser outobject = new AddUser();
                            //GetUser inobject = new GetUser();
                            //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                            //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                            //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();

                            objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                            //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                            Id = VendorApi_CommonHelper.Id;
                        }
                    }
                }
            }
            return msg;
        }


        public static string RequestServiceGroup_COMMIT_DATAPACK_NTC(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string MemberId, string Amount, string UniqueCustomerID, string product_code, string number, string reference, string authenticationToken, string UserInput, string DeviceCode, string PlatForm, string PackageId, string ProductType, string VendorJsonLookup, ref GetVendor_API_DataPack_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(number))
            {
                msg = "Please enter Number.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (string.IsNullOrEmpty(reference))
            {
                msg = "Please enter ReferenceNo.";
            }
            else if (string.IsNullOrEmpty(product_code))
            {
                msg = "Please enter ProductCode.";
            }
            else if (string.IsNullOrEmpty(PackageId))
            {
                msg = "Please enter PackageId.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "use/ntc-package/";
                int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_DataPack_NTC;
                if (ProductType.ToLower().Replace(" ", "") == "voicepack")
                {
                    VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_VoicePack_NTC;
                }
                else if (ProductType.ToLower().Replace(" ", "") == "smspack")
                {
                    VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_SMSPack_NTC;
                }
                //AddUser outobject = new AddUser();
                //GetUser inobject = new GetUser();
                //inobject.MemberId = Convert.ToInt64(MemberId);
                //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        msg = "Please enter Valid MemberId.";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));

                    }
                    if (string.IsNullOrEmpty(msg))
                    {
                        WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                        AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                        {
                            msg = Common.InsufficientBalance_MPCoins;
                        }
                        else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                        {
                            msg = Common.InsufficientBalance;
                        }
                        else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                        {
                            msg = Common.InsufficientBalance;
                        }
                        else
                        {
                            string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_DATAPACK_COMMIT(Amount, number, reference, product_code, PackageId);
                            string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                            decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            if (resGetRecord == null || resGetRecord.Id == 0)
                            {
                                msg = "MemberId not found";
                                JsonReq = String.Empty;
                            }
                            else
                            {
                                if (resGetRecord.IsActive == false)
                                {
                                    msg = "Your account is not active.";
                                    JsonReq = String.Empty;
                                }
                            }
                            if (!string.IsNullOrEmpty(JsonReq))
                            {
                                string TransactionUniqueId = string.Empty;
                                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, VendorJsonLookup, out WalletBalance);
                                if (msg == "success")
                                {
                                    string VendorOutputResponse = string.Empty;
                                    objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_DATAPACK(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                    objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                    if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                    {
                                        //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                        msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                        if (msg.ToLower() == "success")
                                        {
                                            string Title = "Transaction successfull";
                                            string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                            Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                        }
                                    }
                                    else
                                    {
                                        msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                    }
                                }
                            }
                            // **** Populate Values to be passed to Controller Action **** //
                            //AddUser outobject = new AddUser();
                            //GetUser inobject = new GetUser();
                            //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                            //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                            //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                            objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                            //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                            Id = VendorApi_CommonHelper.Id;
                        }
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_NEA(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Amount, string SessionId, string ReferenceNo, string UserInput, string MemberId,
            string authenticationToken, string DeviceCode, string PlatForm, string VendorJsonLookup, ref GetVendor_API_ServiceGroup_Nea_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {

            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }

                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/nea/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_nea;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt64(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));

                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_NEA(Amount, SessionId, ReferenceNo);
                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, VendorJsonLookup, out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_NEA(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }

        #endregion

        #region KhanePani

        public static string RequestServiceGroup_KHANEPANI_COUNTER(string Version, string DeviceCode, string PlatForm, ref GetVendor_API_KhanePani_Counters objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "counters/khanepani/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COUNTERS_KHANEPANI();
                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COUNTERS_KHANEPANI(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }


        public static string RequestServiceGroup_DETAILS_KHANEPANI(string month_id, string consumer_code, string counter, ref GetVendor_API_ServiceGroup_KhanePani_Details objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(month_id))
            {
                msg = "Please enter month_id.";
            }
            else if (string.IsNullOrEmpty(consumer_code))
            {
                msg = "Please enter consumer_code.";
            }
            else if (string.IsNullOrEmpty(counter))
            {
                msg = "Please enter Counter.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/khanepani/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_DETAILS_KHANEPANI(month_id, consumer_code, counter);
                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_DETAILS_KHANEPANI(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_SERVICE_CHARGE_KHANEPANI(string Amount, string Counter, ref GetVendor_API_ServiceGroup_KhaniPani_ServiceCharge objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            else if (string.IsNullOrEmpty(Counter))
            {
                msg = "Please enter Counter.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "servicecharge/khanepani/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_SERVICE_CHARGE_KHANEPANI(Amount, Counter);
                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_SERVICE_CHARGE_KHANEPANI(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_KHANEPANI(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Amount, string CustomerCode, string ReferenceNo, string Counter,
            string UserInput, string MemberId, string authenticationToken, string DeviceCode, string PlatForm, string VendorJsonLookup, ref GetVendor_API_ServiceGroup_KhanePani_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(CustomerCode))
                {
                    msg = "Please enter CustomerCode.";
                }
                else if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(Counter))
                {
                    msg = "Please enter Counter.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/khanepani/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_khanepani;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt64(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_KHANEPANI(Amount, CustomerCode, ReferenceNo, Counter);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, VendorJsonLookup, out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_KHANEPANI(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;

                            }
                        }
                    }
                }

            }
            return msg;
        }
        public static string SaveAPIResponse(Int64 Id, string response)
        {
            string msg = string.Empty;
            if (Id == 0)
            {
                msg = "Record Id not found";
            }
            else
            {
                resKhalti.Id = Id;
                resKhalti.Res_Output = response;
                RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resKhalti, "vendor_api_requests");
                msg = "success";
            }
            return msg;
        }

        #endregion

        #region TVRecharge-DishHome


        /// <summary>
        ///  ************* DISHOME  TV ***********
        /// </summary> 
        public static string RequestServiceGroup_DISHOME_LOOKUP(string CasId, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Dishome_Lookup objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CasId) || CasId == "0")
            {
                msg = "Please enter CasId.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "lookup/dishhome";
                objRes = VendorApi_CommonHelper.RequestDISHOME_LOOKUP(CasId, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_DISHOME_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string CasId, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput,
            ref GetVendor_API_Dishhome_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CasId) || CasId == "0")
            {
                msg = "Please enter CasId.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }

            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/dishhome/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_dishhome;
                    decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    {
                        msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    }
                    else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                        if (string.IsNullOrEmpty(msg))
                        {
                            if (resGetRecord == null || resGetRecord.Id == 0)
                            {
                                msg = "Please enter Valid MemberId.";
                            }
                            else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                            {
                                msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                            }

                            if (string.IsNullOrEmpty(msg))
                            {
                                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                                {
                                    msg = Common.InsufficientBalance_MPCoins;
                                }
                                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                                {
                                    msg = Common.InsufficientBalance;
                                }
                                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                                {
                                    msg = Common.InsufficientBalance;
                                }
                                else
                                {
                                    string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_DISHOME_PAYMENT(CasId, Amount, Reference);

                                    string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                    decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                    if (resGetRecord == null || resGetRecord.Id == 0)
                                    {
                                        msg = "MemberId not found";
                                        JsonReq = String.Empty;
                                    }
                                    else
                                    {
                                        if (resGetRecord.IsActive == false)
                                        {
                                            msg = "Your account is not active.";
                                            JsonReq = String.Empty;
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(JsonReq))
                                    {

                                        string TransactionUniqueId = string.Empty;
                                        string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                        objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                        TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                        if (msg == "success")
                                        {
                                            string VendorOutputResponse = string.Empty;
                                            objRes = VendorApi_CommonHelper.RequestDISHOME_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                            objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                            if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                            {
                                                //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                                msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                                if (msg.ToLower() == "success")
                                                {
                                                    string Title = "Transaction successfull";
                                                    string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                    Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                                }
                                            }
                                            else
                                            {
                                                msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                            }
                                        }
                                    }
                                    // **** Populate Values to be passed to Controller Action **** //
                                    //AddUser outobject = new AddUser();
                                    //GetUser inobject = new GetUser();
                                    //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                    //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                    //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                    objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                    //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                    Id = VendorApi_CommonHelper.Id;
                                }
                            }
                        }
                    }
                }
            }
            return msg;
        }

        #endregion

        #region TVRecharge-SimTv


        /// <summary>
        ///  ************* SIM  TV ***********
        /// </summary> 
        public static string RequestServiceGroup_SIMTV_LOOKUP(string customerid, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_SIMTV_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(customerid) || customerid == "0")
            {
                msg = "Please enter CustomerId.";
            }
            else if (!string.IsNullOrEmpty(customerid))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(customerid, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid CustomerId.";
                }
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "lookup/simtv";
                objRes = VendorApi_CommonHelper.RequestSIMTV_LOOKUP(customerid, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_SIMTV_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput,
            ref GetVendor_API_SIMTV_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerId))
            {
                msg = "Please enter CustomerId.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/simtv/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_simtv;
                    decimal[] validation_array = VendorApi_CommonHelper.tv_simtv_validation;
                    if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    {
                        msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    }
                    else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                        if (string.IsNullOrEmpty(msg))
                        {
                            if (resGetRecord == null || resGetRecord.Id == 0)
                            {
                                msg = "Please enter Valid MemberId.";
                            }
                            else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                            {
                                msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                            }
                            if (string.IsNullOrEmpty(msg))
                            {
                                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                                {
                                    msg = Common.InsufficientBalance_MPCoins;
                                }
                                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                                {
                                    msg = Common.InsufficientBalance;
                                }
                                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                                {
                                    msg = Common.InsufficientBalance;
                                }
                                else
                                {
                                    string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SIMTV_PAYMENT(CustomerId, Amount, Reference);

                                    string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                    decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                    if (resGetRecord == null || resGetRecord.Id == 0)
                                    {
                                        msg = "MemberId not found";
                                        JsonReq = String.Empty;
                                    }
                                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                    {
                                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                        if (!string.IsNullOrEmpty(msg))
                                        {
                                            JsonReq = String.Empty;
                                        }
                                    }
                                    if (string.IsNullOrEmpty(msg))
                                    {
                                        if (resGetRecord.IsActive == false)
                                        {
                                            msg = "Your account is not active.";
                                            JsonReq = String.Empty;
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(JsonReq))
                                    {

                                        string TransactionUniqueId = string.Empty;
                                        string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                        objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                        TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                        if (msg == "success")
                                        {
                                            string VendorOutputResponse = string.Empty;
                                            objRes = VendorApi_CommonHelper.RequestSIMTV_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                            objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                            if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                            {
                                                //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                                msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                                if (msg.ToLower() == "success")
                                                {
                                                    string Title = "Transaction successfull";
                                                    string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                    Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                                }
                                            }
                                            else
                                            {
                                                msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                            }
                                        }
                                    }
                                    // **** Populate Values to be passed to Controller Action **** //
                                    //AddUser outobject = new AddUser();
                                    //GetUser inobject = new GetUser();
                                    //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                    //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                    //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                    objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                    //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                    Id = VendorApi_CommonHelper.Id;
                                }
                            }
                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        ///  ************* MERO  TV ***********
        /// </summary> 
        public static string RequestServiceGroup_MEROTV_LOOKUP(string customerID, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_MEROTV_Lookup objRes, string serviceSlug)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(customerID) || customerID == "0")
            {
                msg = "Please enter customer ID.";
            }
            //else if (!string.IsNullOrEmpty(customerID))
            //{
            //    Int64 Num;
            //    bool isNum = Int64.TryParse(customerID, out Num);
            //    if (!isNum)
            //    {
            //        msg = "Please enter valid STB.";
            //    }
            //}
            if (string.IsNullOrEmpty(msg))
            {
                //if (customerID.ToString().Length > 20)
                //{
                //    msg = "Please enter valid STB. Maximum allowed length of STB is 20 digits.";
                //}
                //else 
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                //string KhaltiAPIURL = "details/merotv-v2/";
                string KhaltiAPIURL = "userlist/times/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_MEROTV_LOOKUP(customerID, Reference, serviceSlug);
                objRes = VendorApi_CommonHelper.RequestMEROTV_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_MEROTV_PACKAGES_LOOKUP(string sessionID, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_MEROTV_Packages_Lookup objRes, string slug, string stb)
        {
            string msg = string.Empty;

            //else if (!string.IsNullOrEmpty(customerID))
            //{
            //    Int64 Num;
            //    bool isNum = Int64.TryParse(customerID, out Num);
            //    if (!isNum)
            //    {
            //        msg = "Please enter valid STB.";
            //    }
            //}
            if (string.IsNullOrEmpty(msg))
            {
                //if (customerID.ToString().Length > 20)
                //{
                //    msg = "Please enter valid STB. Maximum allowed length of STB is 20 digits.";
                //}
                //else 
                //if (string.IsNullOrEmpty(Reference))
                //{
                //    msg = "Please enter Reference.";
                //}
                //else 
                if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                //string KhaltiAPIURL = "details/merotv-v2/";
                string KhaltiAPIURL = "details/times/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_MEROTV_PACKAGES_LOOKUP(sessionID, slug, stb);
                objRes = VendorApi_CommonHelper.RequestMEROTV_PACKAGES_LOOKUP(JsonReq, KhaltiAPIURL);
                //msg = objRes.status ? "success" : "failed";
                msg = objRes.Message;
            }
            return msg;
        }
        public static string RequestServiceGroup_MEROTV_USER_LOOKUP(string stb, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_MEROTV_User_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(stb) || stb == "0")
            {
                msg = "Please enter STB.";
            }
            else if (!string.IsNullOrEmpty(stb))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(stb, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid STB.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                if (stb.ToString().Length > 20)
                {
                    msg = "Please enter valid STB. Maximum allowed length of STB is 20 digits.";
                }
                else if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
            }
            return msg;
        }
        public static string RequestServiceGroup_MEROTV_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string SessionId, string Amount, string Reference, string PackageId, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput,
            ref GetVendor_API_MEROTV_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests, string slug = "")
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(SessionId))
            {
                msg = "Please enter SessionId.";
            }
            else if (string.IsNullOrEmpty(PackageId))
            {
                msg = "Please enter PackageId.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    //   string KhaltiAPIURL = "commit/merotv-v2/";
                    string KhaltiAPIURL = "commit/times/";

                    int VendorApiType = 0;


                    if (slug == "sky-tv")
                    {
                        VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_skytv;
                    }
                    else
                    {
                        VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_mero;
                    }

                    //int VendorApiType =  (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_mero;


                    //decimal[] validation_array;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_MEROTV_PAYMENT(SessionId, Amount, Reference, PackageId);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {

                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestMEROTV_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        ///  ************* MAX  TV ***********
        /// </summary> 
        public static string RequestServiceGroup_MAXTV_LOOKUP(string customerid, string reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_MAXTV_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(customerid) || customerid == "0")
            {
                msg = "Please enter CustomerId.";
            }
            else if (!string.IsNullOrEmpty(customerid))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(customerid, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid CustomerId.";
                }
            }
            else if (string.IsNullOrEmpty(reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/max-tv/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_MAXTV_LOOKUP(customerid, reference);
                objRes = VendorApi_CommonHelper.RequestMAXTV_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_MAXTV_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string SessionID, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput,
            ref GetVendor_API_MAXTV_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerId))
            {
                msg = "Please enter CustomerId.";
            }
            else if (string.IsNullOrEmpty(SessionID))
            {
                msg = "Please enter SessionID.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/max-tv/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_maxtv;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_MAXtv_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_MAXTV_PAYMENT(CustomerId, Amount, SessionID, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {

                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestMAXTV_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        ///  ************* CLEAR  TV ***********
        /// </summary> 
        public static string RequestServiceGroup_CLEARTV_LOOKUP(string customerid, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_CLEARTV_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(customerid) || customerid == "0")
            {
                msg = "Please enter CustomerId.";
            }
            else if (!string.IsNullOrEmpty(customerid))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(customerid, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid CustomerId.";
                }
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "lookup/CLEARtv";
                objRes = VendorApi_CommonHelper.RequestCLEARTV_LOOKUP(customerid, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_CLEARTV_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Number, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput,
            ref GetVendor_API_CLEARTV_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerId))
            {
                msg = "Please enter CustomerId.";
            }
            else if (string.IsNullOrEmpty(Number))
            {
                msg = "Please enter Number.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/cleartv/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_cleartv;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_CLEARtv_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_CLEARTV_PAYMENT(CustomerId, Number, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {

                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestCLEARTV_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        ///  ************* PRABHUT  TV ***********
        /// </summary> 
        public static string RequestServiceGroup_PRABHUTV_LOOKUP(string CAS_ID, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_PRABHUTV_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CAS_ID) || CAS_ID == "0")
            {
                msg = "Please enter CAS_ID.";
            }
            else if (!string.IsNullOrEmpty(CAS_ID))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(CAS_ID, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid CAS_ID.";
                }
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/prabhu-tv/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_PRABHUTV_LOOKUP(CAS_ID, Reference);
                objRes = VendorApi_CommonHelper.RequestPRABHUTV_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_PRABHUTV_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string CASID, string Amount, string SessionID, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput,
            ref GetVendor_API_PRABHUTV_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CASID))
            {
                msg = "Please enter CASID.";
            }
            else if (string.IsNullOrEmpty(SessionID))
            {
                msg = "Please enter SessionID.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/prabhu-tv/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_prabhutv;
                    decimal[] validation_array = VendorApi_CommonHelper.tv_prabhutv_validation;
                    if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    {
                        msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    }
                    else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_PRABHUTV_PAYMENT(CASID, Amount, SessionID, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {

                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestPRABHUTV_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        ///  ************* PNGNETWORK TV ***********
        /// </summary> 
        public static string RequestServiceGroup_PNGNETWORKTV_LOOKUP(string PackageType, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_PNGNETWORKTV_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PackageType) || PackageType == "0")
            {
                msg = "Please enter PackageType.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "getpackages/png-network/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_PNGNETWORKTV_LOOKUP(PackageType);
                objRes = VendorApi_CommonHelper.RequestPNGNETWORKTV_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_PNGNETWORKTV_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Package, string Amount, string UserName, string CustomerName, string ContactNumber, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, string PackageType,
            ref GetVendor_API_PNGNETWORKTV_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Package))
            {
                msg = "Please enter Package.";
            }
            else if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(CustomerName))
            {
                msg = "Please enter CustomerName.";
            }
            else if (string.IsNullOrEmpty(ContactNumber))
            {
                msg = "Please enter ContactNumber.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/png-network/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_png_network_tv;
                    if (PackageType.ToString().ToLower() == "internet")
                    {
                        VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_png_network;
                    }
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_PNGNETWORKtv_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_PNGNETWORKTV_PAYMENT(Package, Amount, UserName, CustomerName, ContactNumber, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {

                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestPNGNETWORKTV_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        ///  ************* JAGRITI TV ***********
        /// </summary> 
        public static string RequestServiceGroup_JAGRITITV_LOOKUP(string packagetype, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_JAGRITITV_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(packagetype) || packagetype == "0")
            {
                msg = "Please enter PackageType.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "getpackages/jagriti-national-cable-network/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_JAGRITITV_LOOKUP(packagetype);
                objRes = VendorApi_CommonHelper.RequestJAGRITITV_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_JAGRITITV_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string CustomerName, string Package, string STB_OR_CAS_ID, string Old_Ward_Number, string Mobile_Number_1, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, string PackageType,
            ref GetVendor_API_JAGRITITV_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerId))
            {
                msg = "Please enter CustomerId.";
            }
            else if (string.IsNullOrEmpty(CustomerName))
            {
                msg = "Please enter CustomerName.";
            }
            else if (string.IsNullOrEmpty(Package))
            {
                msg = "Please enter Package.";
            }
            else if (string.IsNullOrEmpty(STB_OR_CAS_ID))
            {
                msg = "Please enter STB_OR_CAS_ID.";
            }
            else if (string.IsNullOrEmpty(Old_Ward_Number))
            {
                msg = "Please enter Old_Ward_Number.";
            }
            else if (string.IsNullOrEmpty(Mobile_Number_1))
            {
                msg = "Please enter Mobile_Number_1.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/jagriti-national-cable-network/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_tv_jagrititv;
                    if (PackageType.ToString().ToLower() == "internet")
                    {
                        VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_jagriti;
                    }
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_JAGRITItv_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_JAGRITITV_PAYMENT(CustomerId, CustomerName, Package, STB_OR_CAS_ID, Old_Ward_Number, Mobile_Number_1, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {

                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestJAGRITITV_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //

                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        #endregion


        #region Internet


        public static string RequestServiceGroup_INTERNET_ADSL_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Number, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, string IsVolumeBased, ref GetVendor_API_ADSL_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Number))
            {
                msg = "Please enter Number.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
                else if (9 > Num || Num > 10000)
                {
                    msg = "Please enter valid Amount 10-10000.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/adsl-ul/";
                    if (IsVolumeBased == "true")
                    {
                        KhaltiAPIURL = "use/adsl-vb/";
                    }
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_adsl;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_ADSL(Number, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestADSL_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        ///  ************* ViaNet  ***********
        /// </summary> 
        public static string RequestServiceGroup_ViaNet_LOOKUP(string CustomerID, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_ViaNet_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerID))
            {
                msg = "Please enter CustomerID.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/vianet/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_ViaNet_LOOKUP(CustomerID, Reference);
                objRes = VendorApi_CommonHelper.RequestViaNet_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_INTERNET_ViaNet_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerID, string SessionID, string PaymentID, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_ViaNet_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerID))
            {
                msg = "Please enter CustomerID.";
            }
            else if (string.IsNullOrEmpty(SessionID))
            {
                msg = "Please enter SessionID.";
            }
            else if (string.IsNullOrEmpty(PaymentID))
            {
                msg = "Please enter PaymentID.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/vianet/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_vianet;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                // ***********************************************************************************************************//
                                // *** AMOUNT IS READONLY AND NOT TO BE PASSED TO VIANET -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
                                // ***********************************************************************************************************//
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_ViaNet(CustomerID, SessionID, PaymentID, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestViaNet_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        ///  ************* CLASSITECH  ***********
        /// </summary> 
        public static string RequestServiceGroup_CLASSITECH_LOOKUP(string UserName, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Classitech_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/classitech/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_CLASSITECH_LOOKUP(UserName, Reference);
                objRes = VendorApi_CommonHelper.RequestCLASSITECH_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_INTERNET_CLASSITECH_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string SessionID, string Amount, string Month, string Package, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Classitech_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(SessionID))
            {
                msg = "Please enter SessionID.";
            }
            else if (string.IsNullOrEmpty(Month))
            {
                msg = "Please enter Month.";
            }
            else if (string.IsNullOrEmpty(Package))
            {
                msg = "Please enter Package.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/classitech/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_classictech;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_ClassiTech(SessionID, Amount, Month, Package, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {

                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestClassiTech_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        ///  ************* DATAPACK  ***********
        /// </summary> 
        public static string RequestServiceGroup_DATAPACK_LOOKUP_NCELL(ref AddVendor_API_Requests objVendor_API_Requests, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_DataPack_Lookup objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "getpackages/ncell-product/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Datapack_LOOKUP(Reference);
                string URL = string.Empty;
                objRes = VendorApi_CommonHelper.RequestDataPack_LOOKUP(JsonReq, ref URL, KhaltiAPIURL);
                objVendor_API_Requests.Req_Khalti_URL = URL;
                objVendor_API_Requests.Req_Khalti_Input = JsonReq;
                objVendor_API_Requests.Req_Token = VendorApi_CommonHelper.Req_TokenLive;
                objVendor_API_Requests.Res_Khalti_Output = Newtonsoft.Json.JsonConvert.SerializeObject(objRes);
                RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objVendor_API_Requests, "vendor_api_requests");

                msg = objRes.Message;
            }
            return msg;
        }
        #region Get CableCarTicketTypes
        public static string RequestGetTicketTypes(ref AddVendor_API_Requests objVendor_API_Requests, string Reference, string Version, string MemberID, string DeviceCode, string PlatForm, ref GetVendor_API_GetTicketTypes objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            else if (string.IsNullOrEmpty(MemberID))
            {
                msg = "Please enter MemberID.";
            }
            if (string.IsNullOrEmpty(msg))
            {

                string KhaltiAPIURL = VendorApi_CommonHelper.CableCar_URL_Prefix_localhost + "/api/ipg/TicketTypes";
                // "https://182.93.95.45:8091/api/ipg/TicketTypes";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Datapack_LOOKUP(Reference);
                string URL = string.Empty;
                msg = VendorApi_CommonHelper.RequestGetTicketTypes(JsonReq, ref URL, KhaltiAPIURL);
                objVendor_API_Requests.Req_Khalti_URL = URL;
                objVendor_API_Requests.Req_Khalti_Input = JsonReq;
                objVendor_API_Requests.Req_Token = VendorApi_CommonHelper.Req_TokenLive;
                objVendor_API_Requests.Res_Khalti_Output = Newtonsoft.Json.JsonConvert.SerializeObject(objRes);
                RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objVendor_API_Requests, "vendor_api_requests");
            }
            return msg;
        }

        public static string PayTransactionCable(ref string TransactionID, string CustomerIdd, string Req_ReferenceNo, string Amount, string number, string MemberId, double totalPrice, string users,
            string UserInput, string DeviceCode, AddUserLoginWithPin resGetRecord, ref AddVendor_API_Requests objVendor_API_Requests, object ticketdetails, string Reference, string Version, string Platform, string authenticationToken, string BankTransactionID, string WalletType, ref bool IsCouponUnlocked, AddCouponsScratched resCoupon, string mpin, ref CableResponses CRPResp)
        {

            string msg = string.Empty;

            if (string.IsNullOrEmpty(users))
            {
                msg = "Please enter CustomerID.";

            }
            else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
            {
                msg = "Please Verify Kyc";
            }

            else if (string.IsNullOrEmpty(mpin) || Common.Decryption(mpin) != Common.DecryptString(resGetRecord.Pin))
            {
                msg = "Invalid Pin";
            }

            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }

                else if (string.IsNullOrEmpty(Platform))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = VendorApi_CommonHelper.CableCar_URL_Prefix_localhost + "/api/ipg/PayTransaction";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.Cable_Car;

                    if (resGetRecord == null)
                    {
                        msg = "Please enter Valid MemberId.";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                    }
                    if (string.IsNullOrEmpty(msg))
                    {
                        WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                        AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                        {
                            msg = Common.InsufficientBalance_MPCoins;
                        }
                        else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                        {
                            msg = Common.InsufficientBalance;
                        }
                        else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                        {
                            msg = Common.InsufficientBalance;
                        }


                        if (string.IsNullOrEmpty(msg))
                        {

                            // ***********************************************************************************************************//
                            // *** AMOUNT IS READONLY AND NOT TO BE PASSED TO CableCar -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
                            // ***********************************************************************************************************//
                            // string JsonReq = VendorApi_CommonHelper.CableCar(CustomerId, SessionID, PaymentID, Amount, Reference);
                            string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Datapack_LOOKUP(DeviceCode);
                            string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                            string CustomerId = users;
                            decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            if (resGetRecord == null || resGetRecord.Id == 0)
                            {
                                msg = "MemberId not found";
                                JsonReq = String.Empty;
                            }
                            else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                            {
                                msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                if (!string.IsNullOrEmpty(msg))
                                {
                                    JsonReq = String.Empty;
                                }
                            }
                            if (string.IsNullOrEmpty(msg))
                            {
                                if (resGetRecord.IsActive == false)
                                {
                                    msg = "Your account is not active.";
                                    JsonReq = String.Empty;
                                }
                            }
                            if (!string.IsNullOrEmpty(JsonReq))
                            {
                                string TransactionUniqueId = string.Empty;
                                string URL = string.Empty;
                                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.CableCar;
                                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, Platform, VendorApiType, "", MemberId, "", Convert.ToString(VendorType));
                                objVendor_API_Requests.Req_Khalti_URL = null;

                                MerchantDetail MerchantOrder = null;
                                string APIUser = "annapurna_cc";
                                MerchantOrder = VendorApi_CommonHelper.MerchantDetailByAPIUser(APIUser);
                                TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionID, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance, "", "", VendorType);

                                if (msg == "success")
                                {
                                    string VendorOutputResponse = string.Empty;
                                    msg = VendorApi_CommonHelper.PayCableTransaction(JsonReq, ref URL, KhaltiAPIURL, TransactionID, ticketdetails, CustomerIdd, Amount, users, UserInput);
                                    VendorOutputResponse = msg;
                                    var CRP = JsonConvert.DeserializeObject<CableResponses>(msg);
                                    var cablepay = new CableResponses
                                    {
                                        TransactionID = CRP.TransactionID,
                                        ReferenceNo = CRP.ReferenceNo,
                                        ResponseCode = CRP.ResponseCode,

                                    };

                                    CRPResp = CRP;

                                    string RedirectURL = string.Empty;
                                    string OrderToken = string.Empty;
                                    var cablerespon = JsonConvert.SerializeObject(cablepay);


                                    string Mesg1 = RepMerchants.RequestMerchantOrderGenerateCableCar(MerchantOrder.apiKey, KhaltiAPIURL, cablepay.ReferenceNo, MerchantOrder.MerchantUniqueId, Amount, APIUser, MerchantOrder.API_Password, Platform, DeviceCode, UserInput, ref UniqueTransactionId, ref RedirectURL, ref OrderToken, ref objVendor_API_Requests, resGetRecord.ContactNumber);

                                    if (CRP.ResponseDescription == "Success")
                                    {
                                        MerchantDetail MerchantUpdate = null;
                                        MerchantDetail MerchantAmountCableCar = null;
                                        string MID = cablepay.ReferenceNo;
                                        MerchantUpdate = VendorApi_CommonHelper.MerchantUpadteForCableCar(MID, TransactionUniqueId);
                                        MerchantAmountCableCar = VendorApi_CommonHelper.MerchantUpadteForCableCarAmount(MID, MerchantOrder.MerchantUniqueId);
                                        objVendor_API_Requests.Req_Khalti_URL = null;
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, Platform, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        objVendor_API_Requests.Req_ReferenceNo = cablepay.ReferenceNo;
                                        objVendor_API_Requests.Res_Khalti_State = "Success";
                                        objVendor_API_Requests.TransactionUniqueId = TransactionUniqueId;
                                        RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objVendor_API_Requests, "vendor_api_requests");
                                        string BankTransactionId = string.Empty;
                                        string UniqueCustomerID = string.Empty;
                                        objVendor_API_Requests.Res_Khalti_Message = "Success";
                                        //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, A, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                        msg = Common.UpdateCableCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                        string Title = "Transaction successfull";
                                        string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                        Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                        msg = cablerespon;

                                    }

                                    else

                                    {
                                        CableResponses cableResponses = new CableResponses();
                                        string REFUND = string.Empty;
                                        objVendor_API_Requests.Res_Khalti_Status = false;
                                        objVendor_API_Requests.Res_Khalti_State = "FAILED";
                                        objVendor_API_Requests.Res_Khalti_Message = msg;
                                        REFUND = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionID, VendorApiType, WalletType, Platform, DeviceCode);
                                        var RefundCash = JsonConvert.DeserializeObject<CableResponses>(msg);
                                        var refundpay = new CableResponses
                                        {
                                            TransactionID = RefundCash.TransactionID,
                                            ReferenceNo = RefundCash.ReferenceNo,
                                            ResponseCode = RefundCash.ResponseCode,
                                            ResponseDescription = RefundCash.ResponseDescription,

                                        };
                                        var RefundResponse = JsonConvert.SerializeObject(refundpay);
                                        msg = RefundResponse;
                                    }
                                }
                            }
                            // **** Populate Values to be passed to Controller Action **** //

                            Id = VendorApi_CommonHelper.Id;
                        }


                    }
                }
            }
            return msg;



        }
        #endregion

        #region CableCar
        public static string GetTicketInvoiceCable(string TransactionID, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId, double totalPrice, string users,
    string UserInput, string DeviceCode, AddUserLoginWithPin resGetRecord, ref AddVendor_API_Requests objVendor_API_Requests, object paycabledata)
        {

            string msg = string.Empty;

            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = VendorApi_CommonHelper.CableCar_URL_Prefix_localhost + "/api/ipg/GetTicketInvoice";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Datapack_LOOKUP(DeviceCode);
                string URL = string.Empty;
                msg = VendorApi_CommonHelper.GetTicketInvoice(JsonReq, ref URL, KhaltiAPIURL, TransactionID, users, UserInput, paycabledata);
                objVendor_API_Requests.Req_Khalti_URL = URL;
                objVendor_API_Requests.Req_Khalti_Input = JsonReq;
                objVendor_API_Requests.Req_Token = VendorApi_CommonHelper.Req_TokenLive;
                objVendor_API_Requests.Res_Khalti_Output = Newtonsoft.Json.JsonConvert.SerializeObject(msg);
                RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objVendor_API_Requests, "vendor_api_requests");
            }
            return msg;


        }

        public static string GetTickeGetReconcile(string TransactionId, string CustomerId, string secretKey, string DeviceId, string number, string MemberId, double totalPrice, string users,
         string UserInput, string DeviceCode, AddUserLoginWithPin resGetRecord, ref AddVendor_API_Requests objVendor_API_Requests, object paycabledata)
        {
            string msg = string.Empty;

            if (string.IsNullOrEmpty(MemberId))
            {
                msg = "Please enter MemberId.";

            }
            if (string.IsNullOrEmpty(TransactionId))
            {
                msg = "Please enter TransactionID.";
            }
            if (string.IsNullOrEmpty(DeviceId))
            {
                msg = "Please enter DeviceId.";
            }
            if (string.IsNullOrEmpty(secretKey))
            {
                msg = "Please enter secretkey.";
            }

            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = VendorApi_CommonHelper.CableCar_URL_Prefix_localhost + "/api/ipg/GetReconcileReport";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Datapack_LOOKUP(DeviceCode);
                string URL = string.Empty;
                msg = VendorApi_CommonHelper.GetReconcileCableCar(JsonReq, ref URL, KhaltiAPIURL, TransactionId, users, UserInput, paycabledata);
                objVendor_API_Requests.Req_Khalti_URL = URL;
                objVendor_API_Requests.Req_Khalti_Input = JsonReq;
                objVendor_API_Requests.Req_Token = VendorApi_CommonHelper.Req_TokenLive;
                objVendor_API_Requests.Res_Khalti_Output = Newtonsoft.Json.JsonConvert.SerializeObject(msg);
                RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objVendor_API_Requests, "vendor_api_requests");
            }
            return msg;


        }
        #endregion CableCar

        /// <summary>
        ///  ************* DATAPACK  ***********
        /// </summary> 
        public static string RequestServiceGroup_DATAPACK_LOOKUP_NTC(ref AddVendor_API_Requests objVendor_API_Requests, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_DataPack_Lookup objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "getpackages/ntc-package/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Datapack_LOOKUP(Reference);
                string URL = string.Empty;
                objRes = VendorApi_CommonHelper.RequestDataPack_LOOKUP(JsonReq, ref URL, KhaltiAPIURL);
                objVendor_API_Requests.Req_Khalti_URL = URL;
                objVendor_API_Requests.Req_Khalti_Input = JsonReq;
                objVendor_API_Requests.Req_Token = VendorApi_CommonHelper.Req_TokenLive;
                objVendor_API_Requests.Res_Khalti_Output = VendorApi_CommonHelper.VendorOutput;
                RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objVendor_API_Requests, "vendor_api_requests");

                msg = objRes.Message;
            }
            return msg;
        }

        /// <summary>
        ///  ************* Arrownet  ***********
        /// </summary> 
        public static string RequestServiceGroup_Arrownet_LOOKUP(string UserName, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Arrownet_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/arrownet/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Arrownet_LOOKUP(UserName, Reference);
                objRes = VendorApi_CommonHelper.RequestArrownet_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_INTERNET_Arrownet_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string UserName, string Amount, string Duration, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Arrownet_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter SessionID.";
            }
            else if (string.IsNullOrEmpty(Duration))
            {
                msg = "Please enter Duration.";
            }
            else if (!string.IsNullOrEmpty(Duration))
            {
                int Num;
                bool isNum = int.TryParse(Duration, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Duration.";
                }
                else if (Num < 0 || Num > 12)
                {
                    msg = "Please enter valid Duration.";
                }
            }

            if (string.IsNullOrEmpty(msg) && string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (string.IsNullOrEmpty(msg) && !string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/arrownet/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_Arrownet;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_Arrownet(UserName, Amount, Duration, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {

                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestArrownet_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        ///  ************* SubISU  ***********
        /// </summary> 
        /// 
        public static string RequestServiceGroup_SUBISU_LOOKUP(string UserName, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_SUBISU_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/subisu/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SUBISU_LOOKUP(Reference, UserName);
                objRes = VendorApi_CommonHelper.RequestSUBISU_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_SUBISU_NEW_LOOKUP(string UserName, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_SUBISU_Lookup_TV_ComboOffer objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/subisu/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SUBISU_LOOKUP(Reference, UserName);
                objRes = VendorApi_CommonHelper.RequestSUBISU_NEW_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }


        public static string RequestServiceGroup_INTERNET_SUBISU_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string SessionId, string OfferName, string PlanType, string stb, string CustomerId, string Amount, string Reference, string Version, string DeviceCode,
           string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_SUBISU_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            //if (string.IsNullOrEmpty(CustomerId))
            //{
            //    msg = "Please enter CustomerId.";
            //}
            //else if (string.IsNullOrEmpty(Number))
            //{
            //    msg = "Please enter Number.";
            //}
            if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
                else if (9 > Num || Num > 30000)
                {
                    msg = "Please enter valid Amount 10-30000.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/subisu/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_subisu_new;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_SUBISU(SessionId, OfferName, Amount, PlanType, stb);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSUBISU_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        ///  ************* SubISU  ***********
        /// </summary> 
        public static string RequestServiceGroup_INTERNET_SUBISU_PAYMENT_OLD(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Number, string Amount, string Reference, string Version, string DeviceCode,
           string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_SUBISU_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerId))
            {
                msg = "Please enter CustomerId.";
            }
            else if (string.IsNullOrEmpty(Number))
            {
                msg = "Please enter Number.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
                else if (9 > Num || Num > 30000)
                {
                    msg = "Please enter valid Amount 10-30000.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/subisu/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_subisu;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_SUBISU_OLD(CustomerId, Number, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSUBISU_INTERNET_PAYMENT_OLD(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        ///  ************* Pokhara  ***********
        /// </summary>



        /// <summary>
        ///  ************* Pokhara  ***********
        /// </summary> 
        public static string RequestServiceGroup_INTERNET_Pokhara_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string UserName, string Number, string Amount, string Address, string Reference, string Version, string DeviceCode,
           string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Pokhara_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(Number))
            {
                msg = "Please enter Number.";
            }
            else if (string.IsNullOrEmpty(Address))
            {
                msg = "Please enter Address.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
                else if (9 > Num || Num > 10000)
                {
                    msg = "Please enter valid Amount 10-10000.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/pokhara-internet/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_Pokhara;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_Pokhara(CustomerId, UserName, Number, Amount, Address, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestPokhara_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //

                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        ///  ************* VirtualNetwork  ***********
        /// </summary> 
        public static string RequestServiceGroup_INTERNET_VirtualNetwork_PAYMENT(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string UniqueCustomerId, string UserName, string Number, string Amount, string Reference, string Version, string DeviceCode,
           string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_VirtualNetwork_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(Number))
            {
                msg = "Please enter Number.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
                else if (100 > Num)
                {
                    msg = "Please enter minimum Amount 100.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/virtual-network/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_VirtualNetwork;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_VirtualNetwork(UserName, Number, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, UniqueCustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestVirtualNetwork_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        ///  ************* WebNetwork  ***********
        /// </summary> 
        public static string RequestServiceGroup_INTERNET_WebNetwork_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string UserName, string Number, string Amount, string Reference, string Version, string DeviceCode,
           string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_WebNetwork_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(Number))
            {
                msg = "Please enter Number.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
                else if (100 > Num)
                {
                    msg = "Please enter minimum Amount 100.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/web-network/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_WebNetwork;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_WebNetwork(UserName, Number, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestWebNetwork_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        ///  ************* RoyalNetwork  ***********
        /// </summary> 
        public static string RequestServiceGroup_INTERNET_RoyalNetwork_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string UserName, string Number, string Amount, string Reference, string Version, string DeviceCode,
           string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_RoyalNetwork_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(Number))
            {
                msg = "Please enter Number.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
                else if (100 > Num)
                {
                    msg = "Please enter minimum Amount 100.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/royal-network/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_RoyalNetwork;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_RoyalNetwork(UserName, Number, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {

                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestRoyalNetwork_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //

                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        ///  ************* WebSurfer  ***********
        /// </summary> 
        /// 
        public static string RequestServiceGroup_WebSurfer_UserList_LOOKUP(string CustomerId, string UniqueCustomerId, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_WebSurfer_UserList_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerId))
            {
                msg = "Please enter CustomerId.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "userlist/times/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_WebSurfer_UserList_LOOKUP(CustomerId, Reference);
                objRes = VendorApi_CommonHelper.RequestWebSurfer_USERLIST_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_WebSurfer_LOOKUP(string UserName, string SessionId, string UniqueCustomerId, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_WebSurfer_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(UserName))
            {
                msg = "Please enter UserName.";
            }
            else if (string.IsNullOrEmpty(SessionId))
            {
                msg = "Please enter SessionId.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/times/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_WebSurfer_LOOKUP(UserName, SessionId, Reference);
                objRes = VendorApi_CommonHelper.RequestWebSurfer_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        /// <summary>
        ///  ************* Techminds  ***********
        /// </summary> 
        public static string RequestServiceGroup_Techminds_LOOKUP(string RequestID, string UniqueCustomerId, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Techminds_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(RequestID))
            {
                msg = "Please enter RequestID.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/techminds/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Techminds_LOOKUP(RequestID, Reference);
                objRes = VendorApi_CommonHelper.RequestTechminds_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_INTERNET_WebSurfer_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string SessionID, string Amount, string package_id, string Service, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_WebSurfer_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(SessionID))
            {
                msg = "Please enter SessionID.";
            }
            else if (string.IsNullOrEmpty(Service))
            {
                msg = "Please enter Service.";
            }
            else if (string.IsNullOrEmpty(package_id))
            {
                msg = "Please enter package_id.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/times/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_WebSurfer;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_WebSurfer(SessionID, Amount, package_id, Service, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestWebsurfer_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceGroup_INTERNET_Techminds_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string SessionID, string Amount, string RequestId, string Reference, string Version, string DeviceCode,
         string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Techminds_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(SessionID))
            {
                msg = "Please enter SessionID.";
            }
            else if (string.IsNullOrEmpty(RequestId))
            {
                msg = "Please enter RequestId.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/techminds/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_TechMinds;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_Techminds(SessionID, Amount, RequestId, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestTechminds_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }
        /// <summary>
        ///  ************* DishHome FTTH  ***********
        /// </summary> 
        public static string RequestServiceGroup_DishHome_LOOKUP(string CustomerID, string Reference, string Version, string DeviceCode, string PlatForm, ref Vendor_API_DishHome objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerID))
            {
                msg = "Please enter CustomerID.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/dishhome/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_DishHome_LOOKUP(CustomerID, Reference);
                objRes = VendorApi_CommonHelper.RequestDishHome_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_INTERNET_DishHome_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string PackageName, string SessionID, string Amount, string RequestId, string Reference, string Version, string DeviceCode,
         string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Dishhome_FTTH_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(SessionID))
            {
                msg = "Please enter SessionID.";
            }
            else if (string.IsNullOrEmpty(CustomerId))
            {
                msg = "Please enter CustomerId.";
            }
            else if (string.IsNullOrEmpty(PackageName))
            {
                msg = "Please enter PackageName.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/dishhome/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_Dishhome;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_DISHHOME_FTTH(SessionID, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateDishHomeFTTHWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, PackageName, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestDishHome_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceGroup_INTERNET_NT_FTTH_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Number, string Amount, string Reference, string Version, string DeviceCode,
         string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_NT_FTTH_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Number))
            {
                msg = "Please enter Subscriber Number.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if ((Convert.ToInt64(Amount) < 10) || (Convert.ToInt64(Amount) > 25000))
            {
                msg = "Amount should be between Rs.10 and Rs.25000.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "nt-ftth/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_NT_FTTH;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_INTERNET_NT_FTTH(Number, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateNTFTTHWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Number, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestNT_FTTH_INTERNET_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }
        #endregion

        #region Kaspersky 
        public static string RequestServiceGroup_Kaspersky_LOOKUP(string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Kaspersky_Lookup objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "products/kaspersky/";
                objRes = VendorApi_CommonHelper.RequestKaspersky_LOOKUP(KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_INTERNET_Kaspersky_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Value, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Kaspersky_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Value))
            {
                msg = "Please enter Value.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "kaspersky/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_antivirus_kaspersky;
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_KasperSky(Value, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestKaspersky_ANTIVIRUS_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {

                                            VendorApi_CommonHelper.Pin = objRes.pin;
                                            VendorApi_CommonHelper.Serial = objRes.serial;
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        #endregion

        #region Bussewa
        public static string RequestServiceGroup_Bussewa_LOOKUP(string Reference, string BoardingFrom, string ArrivalTo, string ShiftDayNight, string Date, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Bussewa_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(BoardingFrom))
            {
                msg = "Please enter BoardingFrom.";
            }
            else if (string.IsNullOrEmpty(ArrivalTo))
            {
                msg = "Please enter ArrivalTo.";
            }
            else if (string.IsNullOrEmpty(ShiftDayNight))
            {
                msg = "Please enter ShiftDayNight.";
            }
            else if (string.IsNullOrEmpty(Date))
            {
                msg = "Please enter Date.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "search/bus";
                objRes = VendorApi_CommonHelper.RequestBussewa_LOOKUP(Reference, BoardingFrom, ArrivalTo, ShiftDayNight, Date, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_Bussewa_ROUTES_LOOKUP(string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Bussewa_Routes_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "routes/bus/";
                objRes = VendorApi_CommonHelper.RequestBussewa_LOOKUP_ROUTES(Reference, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }
        #endregion

        #region Demat
        public static string RequestServiceGroup_Demat_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string SessionID, string Value, string Amount, string Reference, string Version, string DeviceCode,
           string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Demat_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(SessionID))
            {
                msg = "Please enter SessionID.";
            }

            if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {

                if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "servicegroup/commit/nabil-invest/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Demat_Nabil;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        AddUserLoginWithPin outobject = new AddUserLoginWithPin();
                        GetUserLoginWithPin inobject = new GetUserLoginWithPin();
                        inobject.MemberId = Convert.ToInt64(MemberId);
                        AddUserLoginWithPin resGetRecord = RepCRUD<GetUserLoginWithPin, AddUserLoginWithPin>.GetRecord(Common.StoreProcedures.sp_Users_GetLoginWithPin, inobject, outobject);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_DematNabil(Value, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, SessionID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestDemat_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // **** Populate Values to be passed to Controller Action **** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceGroup_Demat_LOOKUP(string Reference, string ClientID, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Demat_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(ClientID))
            {
                msg = "Please enter ClientID.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "servicegroup/details/nabil-invest/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COUNTERS_DEMAT();
                objRes = VendorApi_CommonHelper.RequestDemat_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        #endregion

        #region RIDE
        /// <summary>
        ///  ************ RIDE  **********
        /// </summary> 
        public static string RequestServiceGroup_Ride_Lookup(string App, string PhoneNumber, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Ride_Lookup objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(App))
            {
                msg = "Please enter App.";
            }
            else if (string.IsNullOrEmpty(PhoneNumber))
            {
                msg = "Please enter PhoneNumber.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string VendorURL = string.Empty;
                string VendorJson = string.Empty;
                string KhaltiAPIURL = "details/tootle/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Ride_LOOKUP(App, PhoneNumber);
                objRes = VendorApi_CommonHelper.RequestRide_LOOKUP(JsonReq, ref VendorURL, ref VendorJson, KhaltiAPIURL);
                objVendor_API_Requests.Req_Khalti_Input = JsonReq;
                objVendor_API_Requests.Res_Khalti_Output = VendorJson;
                objVendor_API_Requests.Req_Khalti_URL = VendorURL;
                RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objVendor_API_Requests, "vendor_api_requests");

                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_RIDE(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId,
            string MemberId, string productidentity, string number, string Amount, string ReferenceNo, string UserInput,
            string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_Ride_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            else if (string.IsNullOrEmpty(number))
            {
                msg = "Please enter phone number.";
            }
            else if (string.IsNullOrEmpty(productidentity))
            {
                msg = "Please enter product identity.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/tootle/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Ride_Tootle;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid phone number.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_RIDE(productidentity, Amount, number, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_RIDE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // *** Populate Values to be passed to Controller Action *** //

                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;

                            }
                        }
                    }
                }

            }
            return msg;
        }

        #endregion

        #region Worldlink
        /// <summary>
        ///  ************ RIDE  **********
        /// </summary> 
        public static string RequestServiceGroup_WorldLink_Lookup(string Reference, string Username, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_WorldLink_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Username))
            {
                msg = "Please enter Username.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/worldlink-v2/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_WorldLink_LOOKUP(Reference, Username);
                objRes = VendorApi_CommonHelper.RequestWorldLink_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_WorldLink(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType,
            string CustomerId, string MemberId, string SessionID, string PackageID, string Amount, string ReferenceNo,
            string UserInput, string authenticationToken, string DeviceCode, string PlatForm,
            ref GetVendor_API_ServiceGroup_WorldLink_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
                else if (Convert.ToDecimal(Amount) <= 0)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            else if (string.IsNullOrEmpty(SessionID))
            {
                msg = "Please enter phone SessionID.";
            }
            else if (string.IsNullOrEmpty(PackageID))
            {
                msg = "Please enter product PackageID.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/worldlink-v2/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_internet_Worldlink;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid phone number.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_WorldLink(SessionID, Amount, PackageID, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_WorldLink(ref objVendor_API_Requests, JsonReq, ref VendorOutputResponse, KhaltiAPIURL);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // *** Populate Values to be passed to Controller Action *** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;

                            }
                        }
                    }
                }

            }
            return msg;
        }

        #endregion

        #region Insurance
        /// <summary>
        ///  *********** INSURANCE  *********
        /// </summary> 
        public static string RequestServiceGroup_NecoInsurance_Lookup(string InsuranceSlug, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_NecoInsurance_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/neco-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_NecoInsurance_LOOKUP(InsuranceSlug);
                objRes = VendorApi_CommonHelper.RequestNecoInsurance_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }


        public static string RequestServiceGroup_COMMIT_NECOINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string MobileNumber, string PolicyCategory, string PolicyNumber, string PolicyType, string Amount, string CustomerName, string InsuranceSlug, string ReferenceNo, string ServiceName, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_NecoInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            else if (string.IsNullOrEmpty(MobileNumber))
            {
                msg = "Please enter phone number.";
            }
            else if (string.IsNullOrEmpty(PolicyCategory))
            {
                msg = "Please enter policy category.";
            }
            else if (string.IsNullOrEmpty(PolicyType))
            {
                msg = "Please enter policy type.";
            }
            else if (string.IsNullOrEmpty(CustomerName))
            {
                msg = "Please enter customer name.";
            }
            else if (string.IsNullOrEmpty(ServiceName))
            {
                msg = "Please enter service name.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/neco-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Neco;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_NecoInsurance(PolicyType, CustomerName, PolicyCategory, Amount, ReferenceNo, PolicyNumber, MobileNumber, ServiceName, InsuranceSlug);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_NECOINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // ** Populate Values to be passed to Controller Action ** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;

                            }
                        }
                    }
                }

            }
            return msg;
        }

        public static string RequestServiceGroup_SagarmathaInsurance_Lookup(string DebitNote, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_SagarmathaInsurance_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(DebitNote))
            {
                msg = "Please enter DebitNote.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/sagarmatha-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SagarmathaInsurance_LOOKUP(DebitNote, Reference);
                objRes = VendorApi_CommonHelper.RequestSagarmathaInsurance_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_SAGARMATHINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_SagarmathaInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            else if (string.IsNullOrEmpty(SessionId))
            {
                msg = "Please enter service SessionId.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/sagarmatha-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Salico;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_SagarmathaInsurance(Amount, SessionId, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_SAGARMATHAINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // ** Populate Values to be passed to Controller Action ** //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;

                            }
                        }
                    }
                }

            }
            return msg;
        }

        public static string RequestServiceGroup_RelianceInsurance_Detail(string PolicyNo, string DOB, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_RelianceInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/reliance-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_RelianceInsurance_Detail(PolicyNo, DOB);
                objRes = VendorApi_CommonHelper.RequestRelianceInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_RELIANCEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string PolicyNo, string TransactionId, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_RelianceInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            else if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(TransactionId))
            {
                msg = "Please enter TransactionId.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(TransactionId))
                {
                    msg = "Please enter TransactionId.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/reliance-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Sanima_Reliance;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_RelianceInsurance(Amount, PolicyNo, TransactionId, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_RELIANCEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                // * Populate Values to be passed to Controller Action * //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceGroup_JyotiLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_JyotiLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                //string KhaltiAPIURL = "details/nds/";
                string KhaltiAPIURL = "details/surya-life-insurance/";
                ///api/servicegroup/details/surya-life-insurance/
                //https://services.khalti.com/api/servicegroup/details/surya-life-insurance/
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_JyotiLifeInsurance_Detail(PolicyNo, DOB, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestJyotiLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_JYOTILIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_JyotiLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    // string KhaltiAPIURL = "commit/nds/";
                    string KhaltiAPIURL = "commit/surya-life-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Surya_Jyoti_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_JyotiLifeInsurance(Amount, SessionId, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_JYOTILIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        /// PRIME LIFE INSURANCE
        /// </summary>
        /// <returns></returns>
        public static string RequestServiceGroup_PrimeLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_PrimeLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/primelife-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_PrimeLifeInsurance_Detail(PolicyNo, DOB, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestPrimeLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_PRIMELIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_PrimeLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/primelife-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Himalayan_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_PrimeLifeInsurance(Amount, SessionId, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_PRIMELIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        /// PRABHU LIFE INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_PrabhuLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_PrabhuLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/prabhu-life-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_PrabhuLifeInsurance_Detail(PolicyNo, DOB, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestPrabhuLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_PRABHULIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_PrabhuLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/prabhu-life-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Prabhu_Mahalaxmi_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_PrabhuLifeInsurance(Amount, SessionId, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_PRABHULIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }

        /// <summary>
        /// NATIONAL LIFE INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_NationalLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_NationalLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/national-life-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_NationalLifeInsurance_Detail(PolicyNo, DOB, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestNationalLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_NATIONALLIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_NationalLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/national-life-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_National_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_NationalLifeInsurance(Amount, SessionId, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_NATIONALLIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }




        /// <summary>
        /// HIMALAYAN GENERAL INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_HimalayanGeneralInsurance_Detail(string PolicyNo, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_HimalayanGeneralInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            //else if (string.IsNullOrEmpty(DOB))
            //{
            //    msg = "Please enter DOB.";
            //}
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/hg-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_HimalayanGeneralInsurance_Detail(PolicyNo, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestHimalayanGeneralInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_HIMALAYANGENERALINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_HimalayanGeneralInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/hg-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Himalayan_Everest;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_HimalayanGeneralInsurance(Amount, SessionId, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_HIMALAYANGENERALINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        /// MAHALAXMI LIFE INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_MahalaxmiLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_MahalaxmiLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/mahalaxmi-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_MahalaxmiLifeInsurance_Detail(PolicyNo, DOB, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestMahalaxmiLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_MAHALAXMILIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_MahalaxmiLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/mahalaxmi-insurance/";
                    int VendorApiType = 0; // (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Mahalaxmi_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_MahalaxmiLifeInsurance(Amount, SessionId, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_MAHALAXMILIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        /// IME LIFE INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_IMELifeInsurance_Detail(string PolicyNo,/* string DOB,*/ string DOBYear, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_ArhantLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            /*else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }*/
            else if (string.IsNullOrEmpty(DOBYear))
            {
                msg = "Please enter DOBYear.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/arhant-life-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_IMELifeInsurance_Detail(PolicyNo, /*DOB,*/ DOBYear, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestIMELifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_IMELIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, /*string InsuranceSlug,*/ string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
               /* if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }*/
                 if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/arhant-life-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_IME_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_IMELifeInsurance(Amount, SessionId/*, InsuranceSlug*/, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponseIME(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalanceArhantLifeInsurance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId,Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_IMELIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        /// Asian LIFE INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_AsianLifeInsurance_Detail(string PolicyNo,/* string DOB,*/ string DOBYear, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_ArhantLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            /*else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }*/
            else if (string.IsNullOrEmpty(DOBYear))
            {
                msg = "Please enter DOBYear.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/arhant-life-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_AsianLifeInsurance_Detail(PolicyNo, /*DOB,*/ DOBYear, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestAsianLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_AsianLIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, /*string InsuranceSlug,*/ string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                /* if (string.IsNullOrEmpty(ReferenceNo))
                 {
                     msg = "Please enter ReferenceNo.";
                 }
                 else if (string.IsNullOrEmpty(SessionId))
                 {
                     msg = "Please enter SessionId.";
                 }
                 else if (string.IsNullOrEmpty(InsuranceSlug))
                 {
                     msg = "Please enter InsuranceSlug.";
                 }*/
                if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/arhant-life-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_IME_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_IMELifeInsurance(Amount, SessionId/*, InsuranceSlug*/, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponseIME(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalanceArhantLifeInsurance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_IMELIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }



        /// <summary>
        /// Citizen LIFE INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_CitizenLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_CitizenLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/citizen-life-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_CitizenLifeInsurance_Detail(PolicyNo, DOB, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestCitizenLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_CITIZENLIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_CitizenLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/citizen-life-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Citizen_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_CitizenLifeInsurance(Amount, SessionId, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_CITIZENLIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        /// RELIABLE LIFE INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_ReliableLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_ReliableLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/reliable-life-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_ReliableLifeInsurance_Detail(PolicyNo, DOB, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestReliableLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_RELIABLELIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_ReliableLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/reliable-life-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Reliable_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_ReliableLifeInsurance(Amount, SessionId, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_RELIABLELIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        /// UNION LIFE INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_UnionLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_UnionLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter Insurance Slug.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/union-life-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_UnionLifeInsurance_Detail(PolicyNo, DOB, InsuranceSlug, Reference);
                objRes = VendorApi_CommonHelper.RequestUnionLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_UNIONLIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_UnionLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/union-life-insurance/";
                    int VendorApiType = 0; // (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Union_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_UnionLifeInsurance(Amount, SessionId, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_UNIONLIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        /// IME General INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_IMEGeneralInsurance_Detail(string Version, string DeviceCode, string PlatForm, ref GetVendor_API_IMEGeneralInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "info/ime-general-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_IMEGeneralInsurance_Detail();
                objRes = VendorApi_CommonHelper.RequestIMEGeneralInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_IMEGENERALINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string PolicyType, string InsuranceType, string Branch, string FullName, string Address, string MobileNumber, string PolicyDescription, string DebitNoteNo, string BillNo, string Email, string MemberId, string Amount, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_IMEGeneralInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(PolicyType))
                {
                    msg = "Please enter PolicyType.";
                }
                else if (string.IsNullOrEmpty(InsuranceType))
                {
                    msg = "Please enter InsuranceType.";
                }
                else if (string.IsNullOrEmpty(Branch))
                {
                    msg = "Please enter Branch.";
                }
                else if (string.IsNullOrEmpty(FullName))
                {
                    msg = "Please enter FullName.";
                }
                else if (string.IsNullOrEmpty(Address))
                {
                    msg = "Please enter Address.";
                }
                else if (string.IsNullOrEmpty(MobileNumber))
                {
                    msg = "Please enter MobileNumber.";
                }
                else if (string.IsNullOrEmpty(PolicyDescription))
                {
                    msg = "Please enter PolicyDescription.";
                }
                else if (string.IsNullOrEmpty(DebitNoteNo))
                {
                    msg = "Please enter DebitNoteNo.";
                }
                else if (string.IsNullOrEmpty(BillNo))
                {
                    msg = "Please enter BillNo.";
                }
                else if (string.IsNullOrEmpty(Email))
                {
                    msg = "Please enter Email.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/ime-general-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_IGI_Prudential;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_IMEGeneralInsurance(PolicyType, InsuranceType, Branch, FullName, Address, MobileNumber, PolicyDescription, DebitNoteNo, BillNo, Email, Amount, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_IMEGENERALINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        /// <summary>
        /// Prudential INSURANCE
        /// </summary>
        /// <returns></returns>
        /// 
        public static string RequestServiceGroup_PrudentialInsurance_Detail(string Version, string DeviceCode, string PlatForm, ref GetVendor_API_PrudentialInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "getpackages/prudential-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_PrudentialInsurance_Detail();
                objRes = VendorApi_CommonHelper.RequestPrudentialInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_PRUDENTIALINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string Branch, string FullName, string MobileNumber, string DebitNoteNo, string Email, string MemberId, string Amount, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_PrudentialInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }



            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(Branch))
                {
                    msg = "Please enter Branch.";
                }
                else if (string.IsNullOrEmpty(FullName))
                {
                    msg = "Please enter FullName.";
                }
                else if (string.IsNullOrEmpty(MobileNumber))
                {
                    msg = "Please enter MobileNumber.";
                }
                else if (string.IsNullOrEmpty(DebitNoteNo))
                {
                    msg = "Please enter DebitNoteNo.";
                }
                else if (string.IsNullOrEmpty(Email))
                {
                    msg = "Please enter Email.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/prudential-insurance/";
                    int VendorApiType = 0; // (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Prudential_Insurance;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_PrudentialInsurance(Branch, FullName, MobileNumber, DebitNoteNo, Email, Amount, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_PRUDENTIALINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        #endregion

        #region Transaction Lookup
        public static string RequestTransactionLookup(string TransactionID, string Req_ReferenceNo, string Type, string MemberId,
            string authenticationToken, string UserInput, string Version, string DeviceCode, string PlatForm,
            ref GetVendor_API_TransactionLookup objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            else if (string.IsNullOrEmpty(Req_ReferenceNo))
            {
                msg = "Please enter Req_ReferenceNo.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(Type) || Type == "0"))
            {
                msg = "Please enter Type.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(Type)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(Type, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Type.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                string LookupURL = $"{VendorApi_CommonHelper.Vendor_Lookup_URL_Prefix}status?token={VendorApi_CommonHelper.Req_TokenLive}&reference={Req_ReferenceNo}";
                if (Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{VendorApi_CommonHelper.Vendor_Lookup_URL_Prefix_localhost}status?token={VendorApi_CommonHelper.Req_TokenLive_localhost}&reference={Req_ReferenceNo}";
                }
                AddUserLoginWithPin outobject = new AddUserLoginWithPin();
                GetUserLoginWithPin inobject = new GetUserLoginWithPin();
                inobject.MemberId = Convert.ToInt64(MemberId);
                AddUserLoginWithPin resGetRecord = RepCRUD<GetUserLoginWithPin, AddUserLoginWithPin>.GetRecord(Common.StoreProcedures.sp_Users_GetLoginWithPin, inobject, outobject);
                if (resGetRecord == null || resGetRecord.Id == 0)
                {
                    return "Invalid MemberId";
                }
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Transaction_Lookup(Req_ReferenceNo);

                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                if (resGetRecord == null || resGetRecord.Id == 0)
                {
                    msg = "MemberId not found";
                    JsonReq = String.Empty;
                }
                else
                {
                    if (resGetRecord.IsActive == false)
                    {
                        msg = "Your account is not active.";
                        JsonReq = String.Empty;
                    }
                }
                if (!string.IsNullOrEmpty(JsonReq))
                {
                    int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Transaction_Lookup;
                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(Type)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();

                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(LookupURL, Req_ReferenceNo, inobject.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", LookupURL);

                    WalletTransactions objWalletTrans = new WalletTransactions();
                    objWalletTrans.Reference = Req_ReferenceNo;
                    objWalletTrans.Type = Convert.ToInt32(Type);
                    objWalletTrans.MemberId = Convert.ToInt64(MemberId);
                    objWalletTrans.Sign = (int)WalletTransactions.Signs.Credit;
                    objWalletTrans.Status = (int)WalletTransactions.Statuses.Refund;
                    if (objWalletTrans.GetRecord())
                    {
                        msg = "Refund already initiated";
                    }
                    else
                    {

                        // *************** CHECK IF ANY OTHER TRANSACTION WITH SAME REFERENCE NO. AS SUCCESS ********************//
                        WalletTransactions objtransChkSuccess = new WalletTransactions();
                        objtransChkSuccess.Reference = Req_ReferenceNo;
                        objtransChkSuccess.Type = Convert.ToInt32(Type);
                        objtransChkSuccess.MemberId = Convert.ToInt64(MemberId);
                        objtransChkSuccess.Status = (int)WalletTransactions.Statuses.Success;
                        if (objtransChkSuccess.GetRecord())
                        {
                            msg = $"Already success TransactionID: {objtransChkSuccess.TransactionUniqueId} found with Reference no {objtransChkSuccess.Reference}.";
                        }
                        else
                        {
                            objWalletTrans = new WalletTransactions();
                            objWalletTrans.TransactionUniqueId = TransactionID;
                            objWalletTrans.Reference = Req_ReferenceNo;
                            objWalletTrans.Type = Convert.ToInt32(Type);
                            objWalletTrans.MemberId = Convert.ToInt64(MemberId);
                            objWalletTrans.Sign = (int)WalletTransactions.Signs.Debit;
                            if (objWalletTrans.GetRecord())
                            {
                                objRes = VendorApi_CommonHelper.RequestTRANSACTION_LOOKUP(Req_ReferenceNo, ref objVendor_API_Requests);
                                msg = objRes.message;
                                if (objWalletTrans.Type == (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_flight_airlines)
                                {
                                    // IF FLIGHT PAYMENT IS SUCCESS AT KHALTI THEN CHECK KHALTI FLIGHT STATUS CHECK
                                    if (objRes.status == true && objRes.state.ToLower() == "success")
                                    {
                                        GetVendor_API_Airlines_CheckStatus objResFlight = new GetVendor_API_Airlines_CheckStatus();
                                        msg = RepKhalti.RequestServiceGroup_AIRLINES_FLIGHT_STATUS(objWalletTrans.MemberId.ToString(), objWalletTrans.Reference, "1", objWalletTrans.DeviceCode, objWalletTrans.Platform, ref objResFlight);
                                    }
                                }
                            }
                            else
                            {
                                msg = "Data Not Found";
                            }
                        }
                        string VendorOutput = Newtonsoft.Json.JsonConvert.SerializeObject(objRes);
                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(LookupURL, JsonReq, DeviceCode, PlatForm, VendorAPIType, VendorApiTypeName, objVendor_API_Requests.Id, msg, VendorOutput);

                    }

                    if (msg.ToLower() == "success")
                    {
                        // *********************************************************************
                        // ***************  UPDATE TRANSACTION STATUS HERE.***************  
                        // *********************************************************************
                        objWalletTrans = new WalletTransactions();
                        objWalletTrans.TransactionUniqueId = TransactionID;
                        objWalletTrans.Reference = Req_ReferenceNo;
                        objWalletTrans.Type = Convert.ToInt32(Type);
                        if (objWalletTrans.GetRecord())
                        {
                            objWalletTrans.Status = objWalletTrans.GetTransactionStatusEnum(msg);
                            objWalletTrans.Remarks = Common.GetTransactionRemarks(objWalletTrans.Type, objWalletTrans.TransactionAmount, objWalletTrans.CustomerID);// "Successfully Completed Transaction";
                            objWalletTrans.Description = Common.GetTransactionRemarks(objWalletTrans.Type, objWalletTrans.TransactionAmount, objWalletTrans.CustomerID);//$"Transaction Completed successfully on {Common.fnGetdatetime()} for Req_ReferenceNo: {Req_ReferenceNo}";
                            objWalletTrans.UpdatedDate = System.DateTime.UtcNow;
                            if (!string.IsNullOrEmpty(objRes.response_id))
                            {
                                objWalletTrans.VendorTransactionId = objRes.response_id;
                            }
                            //objWalletTrans.Update();
                            if (objWalletTrans.Update())
                            {
                                objWalletTrans.Id = 0;
                                objWalletTrans.CurrentBalance = WalletBalance;
                                objWalletTrans.AddCashBack();
                                Common.AssignCoupons(resGetRecord.MemberId, objWalletTrans.TransactionUniqueId);
                                VendorApi_CommonHelper.DistributeComission(objWalletTrans, resGetRecord, VendorApiTypeName, objVendor_API_Requests);
                                msg = "success";
                            }
                            Common.AddLogs(objWalletTrans.Description, true, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(MemberId), "", true, PlatForm, DeviceCode);
                            if (objWalletTrans.Type == (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_flight_airlines)
                            {
                                string BookingID = objWalletTrans.CustomerID;
                                Common.AddLogs($"Flight Transaction Check Status executed on {Common.fnGetdatetime()} for BookingID: {BookingID}", true, Convert.ToInt32(AddLog.LogType.DBLogs), Convert.ToInt64(MemberId), "", true, PlatForm, DeviceCode);
                                AddFlightBookingDetails outobjectFlightBooking = new AddFlightBookingDetails();
                                GetFlightBookingDetails inobjectFlightBooking = new GetFlightBookingDetails();
                                inobjectFlightBooking.BookingId = Convert.ToInt64(BookingID);
                                inobjectFlightBooking.CheckFlightBooked = 1;
                                inobjectFlightBooking.CheckInbound = 0;
                                AddFlightBookingDetails res = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.StoreProcedures.sp_FlightBookingDetails_Get, inobjectFlightBooking, outobjectFlightBooking);
                                if (res != null && res.Id > 0)
                                {
                                    res.IsFlightIssued = true;
                                    bool IsUpdated = RepCRUD<AddFlightBookingDetails, GetFlightBookingDetails>.Update(res, "flightbookingdetails");
                                    Common.AddLogs($"Flight Transaction Check Status Success on {Common.fnGetdatetime()} for BookingID: {BookingID}", true, Convert.ToInt32(AddLog.LogType.DBLogs), Convert.ToInt64(MemberId), "", true, PlatForm, DeviceCode);
                                }
                            }
                        }
                    }
                    else if (msg.ToLower().Contains("error") || msg.ToLower().Contains("fail") || msg.ToLower().Contains("expired"))
                    {
                        // *********************************************************************
                        //***************   REFUND TRANSACTION AMOUNT HERE. ***************  
                        // *********************************************************************
                        decimal CurrentBalance = 0;
                        outobject = new AddUserLoginWithPin();
                        inobject = new GetUserLoginWithPin();
                        inobject.MemberId = Convert.ToInt64(MemberId);
                        resGetRecord = RepCRUD<GetUserLoginWithPin, AddUserLoginWithPin>.GetRecord(Common.StoreProcedures.sp_Users_GetLoginWithPin, inobject, outobject);
                        if (resGetRecord != null || resGetRecord.Id != 0)
                        {
                            CurrentBalance = resGetRecord.TotalAmount;
                        }
                        objWalletTrans = new WalletTransactions();
                        objWalletTrans.TransactionUniqueId = TransactionID;
                        objWalletTrans.Reference = Req_ReferenceNo;
                        objWalletTrans.Type = Convert.ToInt32(Type);
                        if (objWalletTrans.GetRecord())
                        {
                            // ********************************************************************************************
                            // ************************* UPDATE OLD TRANSACTION STATUS ************************************ 
                            // ********************************************************************************************
                            int VendorType = objWalletTrans.VendorType;
                            string ParentTransactionId = objWalletTrans.TransactionUniqueId;
                            objWalletTrans.Status = objWalletTrans.GetTransactionStatusEnum(msg);
                            if (objWalletTrans.Update())
                            {

                                WalletTransactions objWalletTransCheck = new WalletTransactions();
                                objWalletTransCheck.ParentTransactionId = objWalletTrans.TransactionUniqueId;
                                objWalletTransCheck.Type = Convert.ToInt32(objWalletTrans.Type);
                                objWalletTransCheck.MemberId = Convert.ToInt64(objWalletTrans.MemberId);
                                objWalletTransCheck.Sign = (int)WalletTransactions.Signs.Credit;
                                objWalletTransCheck.Status = (int)WalletTransactions.Statuses.Refund;
                                if (!objWalletTransCheck.GetRecordCheckExists())
                                {

                                    WalletTransactions objWalletTransCheckBankRefund = new WalletTransactions();
                                    objWalletTransCheckBankRefund.ParentTransactionId = objWalletTrans.ParentTransactionId;
                                    objWalletTransCheckBankRefund.MemberId = Convert.ToInt64(objWalletTrans.MemberId);
                                    objWalletTransCheckBankRefund.Sign = (int)WalletTransactions.Signs.Credit;
                                    objWalletTransCheckBankRefund.Status = (int)WalletTransactions.Statuses.Refund;
                                    if (!objWalletTransCheckBankRefund.GetRecordCheckExists())
                                    {
                                        // **************************************************************************************************
                                        // ********* CREDIT REFUND WITH PARENT TRANSACTION ID AND SAVE STATUS AS REFUND ********** 
                                        // **************************************************************************************************
                                        objWalletTrans.Id = 0;
                                        objWalletTrans.Sign = (int)WalletTransactions.Signs.Credit;
                                        objWalletTrans.Amount = objWalletTrans.Amount + objWalletTrans.ServiceCharge;
                                        objWalletTrans.ParentTransactionId = ParentTransactionId;
                                        objWalletTrans.VendorTransactionId = new CommonHelpers().GenerateUniqueId();
                                        objWalletTrans.Status = (int)WalletTransactions.Statuses.Refund;
                                        objWalletTrans.Remarks = "Refund Credit for Failed Transaction " + objWalletTrans.TransactionUniqueId;
                                        objWalletTrans.Description = "Transaction Failed on " + Common.fnGetdatetime();
                                        objWalletTrans.CurrentBalance = CurrentBalance + objWalletTrans.Amount + objWalletTrans.ServiceCharge;
                                        objWalletTrans.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                                        objWalletTrans.CreatedDate = System.DateTime.UtcNow;
                                        objWalletTrans.UpdatedDate = System.DateTime.UtcNow;
                                        objWalletTrans.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                                        objWalletTrans.VendorType = VendorType;
                                        objWalletTrans.GatewayStatus = WalletTransactions.Statuses.Success.ToString();
                                        objWalletTrans.Add();
                                        Common.AddLogs(objWalletTrans.Remarks + " in TransactionID:" + objWalletTrans.TransactionUniqueId, true, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(MemberId), "", true, PlatForm, DeviceCode);
                                    }
                                }
                            }
                        }
                    }
                    else if (msg.ToLower().Contains("queue") || msg.ToLower().Contains("processing"))
                    {
                        // *********************************************************************
                        // ***************************   DO NOTHING ***************************  
                        // *********************************************************************
                    }
                }
            }
            return msg;
        }


        public static string RequestTransactionLookupAll(string authenticationToken, string UserInput, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_TransactionLookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                objRes = DLR_LOOKUP_ALL(authenticationToken, UserInput, Version, DeviceCode, PlatForm, objRes);
                msg = "success";
            }
            return msg;
        }

        public static GetVendor_API_TransactionLookup DLR_LOOKUP_ALL(string authenticationToken, string UserInput, string Version, string DeviceCode, string PlatForm, GetVendor_API_TransactionLookup objRes)
        {
            List<AddTransaction> objWalletTrans = new List<AddTransaction>();
            AddTransaction outobjecttrans = new AddTransaction();
            GetTransaction inobjectTrans = new GetTransaction();
            AddVendor_API_Requests objVendor_API_Requests = new AddVendor_API_Requests();
            //*********************************************************************
            //********************* FOR PENDING TRANSACTIONS *********************
            //*********************************************************************
            inobjectTrans.Status = (int)WalletTransactions.Statuses.Pending;
            objWalletTrans = RepCRUD<GetTransaction, AddTransaction>.GetRecordList(Common.StoreProcedures.sp_WalletTransactions_Get, inobjectTrans, outobjecttrans);
            for (int i = 0; i < objWalletTrans.Count; i++)
            {
                RequestTransactionLookup(objWalletTrans[i].TransactionUniqueId, objWalletTrans[i].Reference, objWalletTrans[i].Type.ToString(), objWalletTrans[i].MemberId, authenticationToken, UserInput, Version, DeviceCode, PlatForm, ref objRes, ref objVendor_API_Requests);
            }

            //*********************************************************************
            // ********************* FOR QUEUED TRANSACTIONS *********************
            //*********************************************************************
            inobjectTrans.Status = (int)WalletTransactions.Statuses.Queued;
            objWalletTrans = RepCRUD<GetTransaction, AddTransaction>.GetRecordList(Common.StoreProcedures.sp_WalletTransactions_Get, inobjectTrans, outobjecttrans);
            for (int i = 0; i < objWalletTrans.Count; i++)
            {
                RequestTransactionLookup(objWalletTrans[i].TransactionUniqueId, objWalletTrans[i].Reference, objWalletTrans[i].Type.ToString(), objWalletTrans[i].MemberId, authenticationToken, UserInput, Version, DeviceCode, PlatForm, ref objRes, ref objVendor_API_Requests);
            }

            //************************************************************************
            // ********************* FOR PROCESSING TRANSACTIONS*********************
            //************************************************************************
            inobjectTrans.Status = (int)WalletTransactions.Statuses.Processing;
            objWalletTrans = RepCRUD<GetTransaction, AddTransaction>.GetRecordList(Common.StoreProcedures.sp_WalletTransactions_Get, inobjectTrans, outobjecttrans);
            for (int i = 0; i < objWalletTrans.Count; i++)
            {
                RequestTransactionLookup(objWalletTrans[i].TransactionUniqueId, objWalletTrans[i].Reference, objWalletTrans[i].Type.ToString(), objWalletTrans[i].MemberId, authenticationToken, UserInput, Version, DeviceCode, PlatForm, ref objRes, ref objVendor_API_Requests);
            }

            return objRes;
        }

        #endregion

        #region School Lookup 
        public static string RequestServiceGroup_School_LOOKUP(string Version, string DeviceCode, string PlatForm, ref GetVendor_API_School_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "school-category/";
                objRes = VendorApi_CommonHelper.RequestSchool_LOOKUP(KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_School_LOOKUPBY_IDX(string IDX, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_School_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(IDX))
            {
                msg = "Please enter IDX.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "khalti-school/";
                objRes = VendorApi_CommonHelper.RequestSchool_LOOKUPBY_IDX(IDX, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_School_PAYMENT(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, string BankTransactionId, string WalletType, string CustomerId, string CasId, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_School_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CasId) || CasId == "0")
            {
                msg = "Please enter CasId.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }

            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/School/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_School;
                    //decimal[] validation_array = VendorApi_CommonHelper.tv_School_validation;
                    //if (!validation_array.Contains(Convert.ToDecimal(Amount)))
                    //{
                    //    msg = "Invalid Amount. Please enter amount from these values : " + string.Join(",", validation_array);
                    //}
                    //else
                    {

                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                        if (string.IsNullOrEmpty(msg))
                        {
                            if (resGetRecord == null || resGetRecord.Id == 0)
                            {
                                msg = "Please enter Valid MemberId.";
                            }
                            else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                            {
                                msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                            }

                            if (string.IsNullOrEmpty(msg))
                            {
                                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                                {
                                    msg = Common.InsufficientBalance_MPCoins;
                                }
                                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                                {
                                    msg = Common.InsufficientBalance;
                                }
                                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                                {
                                    msg = Common.InsufficientBalance;
                                }
                                else
                                {
                                    string JsonReq = string.Empty;
                                    //JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_School_PAYMENT(CasId, Amount, Reference);

                                    string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                    decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                    if (resGetRecord == null || resGetRecord.Id == 0)
                                    {
                                        msg = "MemberId not found";
                                        JsonReq = String.Empty;
                                    }
                                    else
                                    {
                                        if (resGetRecord.IsActive == false)
                                        {
                                            msg = "Your account is not active.";
                                            JsonReq = String.Empty;
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(JsonReq))
                                    {

                                        string TransactionUniqueId = string.Empty;
                                        string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                        //AddVendor_API_Requests objVendor_API_Requests = new AddVendor_API_Requests();
                                        //objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL,Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                        //TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                        if (msg == "success")
                                        {
                                            string VendorOutputResponse = string.Empty;
                                            //objRes = VendorApi_CommonHelper.RequestSchool_PAYMENT(JsonReq, ref VendorOutputResponse);
                                            objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                            if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                            {
                                                //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                                msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                                if (msg.ToLower() == "success")
                                                {
                                                    string Title = "Transaction successfull";
                                                    string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                    Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                                }
                                            }
                                            else
                                            {
                                                msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                            }
                                        }
                                    }
                                    // **** Populate Values to be passed to Controller Action **** //
                                    //AddUser outobject = new AddUser();
                                    //GetUser inobject = new GetUser();
                                    //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                    //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                    //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                    objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                    //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                    Id = VendorApi_CommonHelper.Id;
                                }
                            }
                        }
                    }
                }
            }
            return msg;
        }

        #endregion

        #region Flight-Airlines


        /// <summary>
        ///  ************* AIRLINES  FLIGHT ***********
        /// </summary> 
        /// 
        public static string RequestServiceGroup_AIRLINES_SECTOR_LOOKUP(string MemberId, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Airlines_Sector_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference) || Reference == "0")
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }

            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "sectors/flight/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_FLIGHT_LOOKUP();
                objRes = VendorApi_CommonHelper.RequestAirlines_SECTORS_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }


        public static string RequestServiceGroup_AIRLINES_LOOKUP(string MemberId, string Reference, string FlightType, string TripType, string FlightDate, string ReturnDate, string Adult, string Child, string FromDeparture, string ToArrival, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Airlines_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference) || Reference == "0")
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(FlightType))
            {
                msg = "Please enter FlightType.";
            }
            else if (string.IsNullOrEmpty(TripType))
            {
                msg = "Please enter TripType.";
            }
            else if (string.IsNullOrEmpty(FlightDate))
            {
                msg = "Please enter FlightDate.";
            }
            else if (TripType.ToUpper() == "R" && string.IsNullOrEmpty(ReturnDate))
            {
                msg = "Please enter ReturnDate.";
            }
            else if (string.IsNullOrEmpty(Adult))
            {
                msg = "Please enter Adult.";
            }
            else if (string.IsNullOrEmpty(Child))
            {
                msg = "Please enter Child.";
            }
            else if (string.IsNullOrEmpty(FromDeparture))
            {
                msg = "Please enter FromDeparture.";
            }
            else if (string.IsNullOrEmpty(ToArrival))
            {
                msg = "Please enter ToArrival.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }

            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "search/flight";
                objRes = VendorApi_CommonHelper.RequestAirlines_LOOKUP(Reference, FlightType, TripType, FlightDate, ReturnDate, Adult, Child, FromDeparture, ToArrival, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_AIRLINES_DOWNLOAD_TICKET(string MemberId, string Reference, string LogID, string Version, string DeviceCode, string PlatForm, bool IsEmailSend, string Email, ref GetVendor_API_Airlines_Lookup objRes)
        {
            string msg = string.Empty;
            //if (string.IsNullOrEmpty(Reference) || Reference == "0")
            //{
            //    msg = "Please enter Reference.";
            //}
            if (string.IsNullOrEmpty(LogID))
            {
                msg = "Please enter LogID.";
            }
            else if (string.IsNullOrEmpty(Email) && IsEmailSend == true)
            {
                msg = "Please enter ContactEmail.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }

            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {

                if (LogID.StartsWith("Plasma_"))
                {
                    var flightID = LogID.Replace("Plasma_", "");
                    string fullpath = string.Empty;

                    AddFlightBookingDetails outobject = new AddFlightBookingDetails();
                    GetFlightBookingDetails inobject = new GetFlightBookingDetails();

                    inobject.MemberId = Convert.ToInt64(MemberId);
                    inobject.Flightid = flightID;
                    inobject.LogIDs = LogID;
                    AddFlightBookingDetails resGetRecord = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.StoreProcedures.sp_FlightBookingDetails_Get, inobject, outobject);

                    AddFlightBookingDetails resGetRecordFlightBookingDetail = new AddFlightBookingDetails();

                    objRes = VendorApi_CommonHelper.RequestPlasmaAirlines_DOWNLOAD_TICKET(resGetRecord.BookingId, MemberId, flightID, resGetRecord.ContactName, resGetRecord.ContactPhone, resGetRecord.ContactEmail, "/Content/FlightTicketPDF", ref fullpath);

                    var filename = HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + Path.GetFileName(objRes.FilePath));
                    if (objRes.FilePath != null && objRes.FilePath != "")
                    {

                        #region SendEmailConfirmation
                        string mystring = File.ReadAllText(HttpContext.Current.Server.MapPath("/Templates/FlightTicketDownload.html"));
                        string body = mystring;
                        string Subject = MyPay.Models.Common.Common.WebsiteName + " - Download your flight ticket ";
                        if (!string.IsNullOrEmpty(Email))
                        {
                            MyPay.Models.Common.Common.SendAsyncMail(Email, Subject, body, fullpath);
                            //msg = "success";
                            return objRes.Message;
                        }
                        #endregion
                        //msg = "success";

                        return objRes.Message;
                    }
                }
                else
                {

                    string fullpath = string.Empty;
                    string KhaltiAPIURL = "download";
                    objRes = VendorApi_CommonHelper.RequestAirlines_DOWNLOAD_TICKET(Reference, MemberId, LogID, "/Content/FlightTicketPDF", ref fullpath, KhaltiAPIURL);

                    if (objRes.status && IsEmailSend)
                    {
                        #region SendEmailConfirmation
                        string mystring = File.ReadAllText(HttpContext.Current.Server.MapPath("/Templates/FlightTicketDownload.html"));
                        string body = mystring;
                        string Subject = MyPay.Models.Common.Common.WebsiteName + " - Download your flight ticket ";
                        if (!string.IsNullOrEmpty(Email))
                        {
                            MyPay.Models.Common.Common.SendAsyncMail(Email, Subject, body, fullpath);
                        }
                        #endregion
                        msg = "success";
                    }
                    else
                    {
                        msg = objRes.Message;
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceCableCar(string TransactionId, bool IsEmailSend, string Email, ref GetVendor_API_Airlines_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(TransactionId) || TransactionId == "0")
            {
                msg = "Please enter TransactionId.";
            }

            if (string.IsNullOrEmpty(msg))
            {
                string fullpath = string.Empty;

                objRes = VendorApi_CommonHelper.RequestDownloadCableCar(TransactionId, "/Content/CableCar", ref fullpath);

                if (objRes.status == true)
                {
                    #region SendEmailConfirmation
                    string mystring = File.ReadAllText(HttpContext.Current.Server.MapPath("/Templates/CableCardownlod.html"));
                    string body = mystring;
                    string Subject = MyPay.Models.Common.Common.WebsiteName + " - Download your CableCar ticket ";
                    if (!string.IsNullOrEmpty(Email))
                    {
                        MyPay.Models.Common.Common.SendAsyncMail(Email, Subject, body, fullpath);
                    }
                    #endregion
                    msg = JsonConvert.SerializeObject(objRes);
                    return msg;
                }
                else
                {
                    msg = JsonConvert.SerializeObject(objRes);
                }
            }
            return msg;
        }


        public static string RequestServiceGroup_AIRLINES_FLIGHT_STATUS(string MemberId, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Airlines_CheckStatus objRes)
        {
            string msg = string.Empty;
            try
            {

                if (string.IsNullOrEmpty(Reference) || Reference == "0")
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                //else if (string.IsNullOrEmpty(DeviceCode))
                //{
                //    msg = "Please enter DeviceCode.";
                //}
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }

                if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
                {
                    msg = "Please enter MemberId.";
                }
                else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
                {
                    Int64 Num;
                    bool isNum = Int64.TryParse(MemberId, out Num);
                    if (!isNum)
                    {
                        msg = "Please enter valid MemberId.";
                    }
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "flight/status";
                    objRes = VendorApi_CommonHelper.RequestAirlines_FLIGHT_STATUS(Reference, KhaltiAPIURL);
                    msg = objRes.Message;
                }
                if (msg.ToLower() == "success")
                {
                    WalletTransactions uw = new WalletTransactions();
                    uw.Reference = Reference;
                    uw.Type = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_flight_airlines;
                    if (uw.GetRecord())
                    {
                        //GetFlightDetail
                        AddFlightBookingDetails outobjectFlightBooking = new AddFlightBookingDetails();
                        GetFlightBookingDetails inobjectFlightBooking = new GetFlightBookingDetails();
                        inobjectFlightBooking.BookingId = Convert.ToInt64(uw.CustomerID);
                        inobjectFlightBooking.CheckFlightBooked = 1;
                        inobjectFlightBooking.CheckInbound = 0;
                        AddFlightBookingDetails res = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.StoreProcedures.sp_FlightBookingDetails_Get, inobjectFlightBooking, outobjectFlightBooking);
                        if (res != null && res.Id > 0)
                        {
                            res.IsFlightIssued = true;
                            if (string.IsNullOrEmpty(res.PnrNumber))
                            {
                                if (objRes != null && objRes.detail != null && objRes.detail.outbound != null && !string.IsNullOrEmpty(objRes.detail.outbound.pnr_no))
                                {
                                    res.PnrNumber = objRes.detail.outbound.pnr_no;
                                }
                            }
                            bool IsUpdated = RepCRUD<AddFlightBookingDetails, GetFlightBookingDetails>.Update(res, "flightbookingdetails");
                            if (IsUpdated && res.TripType == "R" && !string.IsNullOrEmpty(objRes.detail.inbound_flight_id) && objRes.detail.inbound_status.ToLower() == "success")
                            {
                                AddFlightBookingDetails outobjectFlightBooking_Inbound = new AddFlightBookingDetails();
                                GetFlightBookingDetails inobjectFlightBooking_Inbound = new GetFlightBookingDetails();
                                inobjectFlightBooking_Inbound.BookingId = Convert.ToInt64(uw.CustomerID);
                                inobjectFlightBooking_Inbound.CheckFlightBooked = 1;
                                inobjectFlightBooking_Inbound.CheckInbound = 1;
                                AddFlightBookingDetails res_Inbound = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.StoreProcedures.sp_FlightBookingDetails_Get, inobjectFlightBooking_Inbound, outobjectFlightBooking_Inbound);
                                if (res_Inbound != null && res_Inbound.Id > 0)
                                {
                                    res_Inbound.IsFlightIssued = true;
                                    if (string.IsNullOrEmpty(res_Inbound.PnrNumber))
                                    {
                                        if (objRes != null && objRes.detail != null && objRes.detail.inbound != null && !string.IsNullOrEmpty(objRes.detail.inbound.pnr_no))
                                        {
                                            res_Inbound.PnrNumber = objRes.detail.inbound.pnr_no;
                                            bool IsUpdated_Inbound = RepCRUD<AddFlightBookingDetails, GetFlightBookingDetails>.Update(res_Inbound, "flightbookingdetails");
                                        }
                                    }
                                }
                            }

                            for (int i = 0; i < objRes.detail.passengers.Count; i++)
                            {
                                AddFlightPassengersDetails resOut = new AddFlightPassengersDetails();
                                GetFlightPassengersDetails resIn = new GetFlightPassengersDetails();
                                resIn.BookingId = Convert.ToInt64(uw.CustomerID);
                                resIn.FirstName = objRes.detail.passengers[i].firstname;
                                resIn.LastName = objRes.detail.passengers[i].lastname;
                                resIn.Type = (objRes.detail.passengers[i].passenger_type.ToLower() == "children" ? "CHILD" : objRes.detail.passengers[i].passenger_type.ToUpper());
                                resIn.Gender = objRes.detail.passengers[i].gender.Substring(0, 1);
                                AddFlightPassengersDetails resGetRecordPassengers = RepCRUD<GetFlightPassengersDetails, AddFlightPassengersDetails>.GetRecord(Common.StoreProcedures.sp_FlightPassengersDetails_Get, resIn, resOut);
                                if (resGetRecordPassengers.Id != 0)
                                {
                                    if (string.IsNullOrEmpty(resGetRecordPassengers.TicketNo))
                                    {
                                        resGetRecordPassengers.BarCode = objRes.detail.passengers[i].barcode;
                                        resGetRecordPassengers.TicketNo = objRes.detail.passengers[i].ticket_no;
                                    }
                                    if (string.IsNullOrEmpty(resGetRecordPassengers.InboundTicketNo))
                                    {
                                        resGetRecordPassengers.InboundTicketNo = objRes.detail.passengers[i].inbound_ticket_no;
                                        resGetRecordPassengers.InboundBarCode = objRes.detail.passengers[i].inbound_barcode;
                                    }
                                    RepCRUD<AddFlightPassengersDetails, GetFlightPassengersDetails>.Update(resGetRecordPassengers, "flightpassengersdetails");
                                }
                            }
                            string logmsg = "Flight Issued Status Updated To Success For Booking ID :" + inobjectFlightBooking.BookingId;
                            Common.AddLogs(logmsg, false, Convert.ToInt32(AddLog.LogType.ApiRequests), uw.MemberId, uw.MemberName, true, uw.Platform, uw.DeviceCode);

                            //AddFlightPassengersDetails outobjectFlightPassengers = new AddFlightPassengersDetails();
                            //GetFlightPassengersDetails inobjectFlightPassengers = new GetFlightPassengersDetails();
                            //AddFlightPassengersDetails resFlightPassengers = new AddFlightPassengersDetails();
                            //for (int i = 0; i < objRes.detail.passengers.Count; i++)
                            //{
                            //    outobjectFlightPassengers = new AddFlightPassengersDetails();
                            //    inobjectFlightPassengers = new GetFlightPassengersDetails();
                            //    inobjectFlightPassengers.BookingId = Convert.ToInt64(uw.CustomerID);
                            //    inobjectFlightPassengers.FirstName = objRes.detail.passengers[i].firstname;
                            //    inobjectFlightPassengers.Type = objRes.detail.passengers[i].passenger_type;
                            //    inobjectFlightPassengers.Gender = objRes.detail.passengers[i].gender;
                            //    resFlightPassengers = RepCRUD<GetFlightPassengersDetails, AddFlightPassengersDetails>.GetRecord(Common.StoreProcedures.sp_FlightPassengersDetails_Get, inobjectFlightPassengers, outobjectFlightPassengers);
                            //    if (resFlightPassengers != null && resFlightPassengers.Id > 0)
                            //    {

                            //    }
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_AIRLINES_BOOK_FLIGHT(string BankTransactionId, string WalletType, string CustomerId, string BookingID, string FlightID, string ReturnFlightID, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Airlines_Payment_Request objRes, AddUserLoginWithPin resGetRecord)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(BookingID) || BookingID == "0")
            {
                msg = "Please enter BookingID.";
            }
            else if (string.IsNullOrEmpty(FlightID))
            {
                msg = "Please enter FlightID.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                else if (resGetRecord.MemberId != Convert.ToInt64(MemberId))
                {
                    msg = "Invalid User";
                }

                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "book/flight/";
                    FlightID = FlightID.Split('`')[0];
                    if (!string.IsNullOrEmpty(ReturnFlightID))
                    {
                        ReturnFlightID = ReturnFlightID.Split('`')[0];
                    }
                    string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_FLIGHT_AIRLINES_PAYMENT(BookingID, FlightID, ReturnFlightID);
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        msg = "MemberId not found";
                        JsonReq = String.Empty;
                    }
                    else
                    {
                        if (resGetRecord.IsActive == false)
                        {
                            msg = "Your account is not active.";
                            JsonReq = String.Empty;
                        }
                    }
                    if (!string.IsNullOrEmpty(JsonReq))
                    {
                        objRes = VendorApi_CommonHelper.RequestAirlines_BOOK_FLIGHT(JsonReq, KhaltiAPIURL);
                        msg = objRes.message;
                    }
                }

            }
            return msg;
        }

        public static string RequestServiceGroup_AIRLINES_ADD_PASSENGER(AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string BookingID, string ContactName, string ContactPhone, List<FlightPassenger> Passengers, string PassengersClassString, string Reference, string Version, string DeviceCode,
           string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Airlines_AddPassenger_Request objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(BookingID) || BookingID == "0")
            {
                msg = "Please enter BookingID.";
            }
            else if (string.IsNullOrEmpty(ContactName))
            {
                msg = "Please enter ContactName.";
            }
            else if (string.IsNullOrEmpty(ContactPhone))
            {
                msg = "Please enter ContactPhone.";
            }
            else if (string.IsNullOrEmpty(PassengersClassString))
            {
                msg = "Please enter PassengersClassString.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                else
                {
                    Passengers = JsonConvert.DeserializeObject<List<FlightPassenger>>(PassengersClassString);
                }

                if (Passengers == null || Passengers.Count == 0)
                {
                    msg = "Please enter Passengers.";
                }
                else if (Passengers != null && Passengers.Count > 0)
                {
                    for (int i = 0; i < Passengers.Count; i++)
                    {
                        if (string.IsNullOrEmpty(Passengers[i].FirstName))
                        {
                            msg = "Please enter Passenger " + (i + 1).ToString() + "  FirstName.";
                            break;
                        }
                        else if (string.IsNullOrEmpty(Passengers[i].LastName))
                        {
                            msg = "Please enter Passenger " + (i + 1).ToString() + "   LastName.";
                            break;
                        }
                        else if (string.IsNullOrEmpty(Passengers[i].Type))
                        {
                            msg = "Please enter Passenger " + (i + 1).ToString() + "   Type.";
                            break;
                        }
                        else if (string.IsNullOrEmpty(Passengers[i].Title))
                        {
                            msg = "Please enter Passenger " + (i + 1).ToString() + "   Title.";
                            break;
                        }
                        else if (string.IsNullOrEmpty(Passengers[i].Gender))
                        {
                            msg = "Please enter Passenger " + (i + 1).ToString() + "   Gender.";
                            break;
                        }
                        else if (string.IsNullOrEmpty(Passengers[i].Nationality))
                        {
                            msg = "Please enter Passenger " + (i + 1).ToString() + "   Nationality.";
                            break;
                        }

                    }
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "addinfo/flight/";

                    string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_FLIGHT_AIRLINES_PASSENGER_ADD(BookingID, ContactName, ContactPhone, Passengers);
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        msg = "MemberId not found";
                        JsonReq = String.Empty;
                    }
                    else if (resGetRecord.IsActive == false)
                    {
                        msg = "Your account is not active.";
                        JsonReq = String.Empty;
                    }
                    if (!string.IsNullOrEmpty(JsonReq))
                    {
                        objRes = VendorApi_CommonHelper.RequestAirlines_ADD_PASSENGERS(JsonReq, resGetRecord, KhaltiAPIURL);
                        msg = objRes.message;
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceGroup_AIRLINES_ISSUE_FLIGHT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string BookingID, string FlightID, string ReturnFlightID, string FareTotal, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Airlines_IssueFlight_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(BookingID) || BookingID == "0")
            {
                msg = "Please enter BookingID.";
            }
            else if (string.IsNullOrEmpty(FlightID))
            {
                msg = "Please enter FlightID.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                AddFlightBookingDetails resOut = new AddFlightBookingDetails();
                GetFlightBookingDetails resIn = new GetFlightBookingDetails();
                resIn.BookingId = Convert.ToInt64(BookingID);
                resIn.CheckFlightBooked = 1;
                resIn.CheckInbound = 0;
                resIn.MemberId = Convert.ToInt64(MemberId);

                //resIn.Flightid = FlightID;
                AddFlightBookingDetails resGetFlightRecord = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.StoreProcedures.sp_FlightBookingDetails_Get, resIn, resOut);
                if (resGetFlightRecord.Id > 0)
                {
                    FlightID = resGetFlightRecord.Flightid;
                }
                else
                {
                    msg = "Booking not found. TTL for Booked flight is 30 mins.";
                    Common.AddLogs($"Booking Flight ID {FlightID} not found for BookingID {BookingID}. Usermessage : {msg}", false, (int)AddLog.LogType.DBLogs, Common.CreatedBy, Common.CreatedByName, false, PlatForm, DeviceCode, 0, Common.CreatedBy, Common.CreatedByName);
                }

                if (string.IsNullOrEmpty(msg) && resGetFlightRecord.TripType.ToUpper() == "R")
                {
                    //if (string.IsNullOrEmpty(ReturnFlightID))
                    //{
                    //    msg = "Please enter ReturnFlightID.";
                    //}
                    //else
                    {
                        AddFlightBookingDetails resOut_ReturnFlight = new AddFlightBookingDetails();
                        GetFlightBookingDetails resIn_ReturnFlight = new GetFlightBookingDetails();
                        resIn_ReturnFlight.BookingId = Convert.ToInt64(BookingID);
                        resIn_ReturnFlight.BookingId = Convert.ToInt64(BookingID);
                        resIn_ReturnFlight.CheckFlightBooked = 1;
                        resIn_ReturnFlight.CheckInbound = 1;
                        resIn_ReturnFlight.MemberId = Convert.ToInt64(MemberId);
                        //resIn.Flightid = ReturnFlightID;
                        AddFlightBookingDetails resGetFlightRecord_ReturnFlight = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.StoreProcedures.sp_FlightBookingDetails_Get, resIn_ReturnFlight, resOut_ReturnFlight);
                        if (resGetFlightRecord_ReturnFlight.Id > 0)
                        {
                            ReturnFlightID = resGetFlightRecord_ReturnFlight.Flightid;
                        }
                        else
                        {
                            msg = "Return Flight Booking not found. TTL for Booked flight is 30 mins.";
                            Common.AddLogs($"Return Booking Flight ID {FlightID} not found for BookingID {BookingID}. Usermessage : {msg}", false, (int)AddLog.LogType.DBLogs, Common.CreatedBy, Common.CreatedByName, false, PlatForm, DeviceCode, 0, Common.CreatedBy, Common.CreatedByName);
                        }
                    }
                }

                if (string.IsNullOrEmpty(msg))
                {
                    if (string.IsNullOrEmpty(Reference))
                    {
                        msg = "Please enter Reference.";
                    }
                    else if (string.IsNullOrEmpty(Version))
                    {
                        msg = "Please enter Version.";
                    }
                    else if (string.IsNullOrEmpty(DeviceCode))
                    {
                        msg = "Please enter DeviceCode.";
                    }
                    else if (string.IsNullOrEmpty(PlatForm))
                    {
                        msg = "Please enter PlatForm.";
                    }
                    else if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(FareTotal) || FareTotal == "0"))
                    {
                        msg = "Please enter FareTotal.";
                    }
                    else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(FareTotal)))
                    {
                        decimal Num;
                        bool isNum = decimal.TryParse(FareTotal, out Num);
                        if (!isNum)
                        {
                            msg = "Please enter valid FareTotal.";
                        }
                    }
                    if (string.IsNullOrEmpty(msg))
                    {
                        string KhaltiAPIURL = "issue/flight/";
                        //AddUser outobject = new AddUser();
                        //GetUser inobject = new GetUser();
                        //inobject.MemberId = Convert.ToInt64(MemberId);
                        //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                        if (string.IsNullOrEmpty(msg))
                        {
                            decimal InboundFareTotal = 0;
                            decimal OutboundFareTotal = 0;
                            decimal TotalFare = 0;
                            string MemberName = resGetRecord.FirstName + " " + resGetRecord.LastName;
                            OutboundFareTotal = Convert.ToDecimal(FlightID.Split('`')[1]);
                            FlightID = FlightID.Split('`')[0];
                            if (resGetFlightRecord.TripType.ToUpper() == "R" && !string.IsNullOrEmpty(ReturnFlightID))
                            {
                                InboundFareTotal = Convert.ToDecimal(ReturnFlightID.Split('`')[1]);
                                ReturnFlightID = ReturnFlightID.Split('`')[0];
                            }
                            TotalFare = OutboundFareTotal + InboundFareTotal;
                            if (TotalFare < Convert.ToDecimal(FareTotal))
                            {
                                msg = "Please enter valid FareTotal.";
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_FLIGHT_AIRLINES_ISSUE_FLIGHT(BookingID, FlightID, ReturnFlightID, Reference);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsActive == false)
                                {
                                    msg = "Your account is not active.";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(FareTotal));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                decimal Amount = Convert.ToDecimal(FareTotal);
                                int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_flight_airlines;
                                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Convert.ToString(Amount), ((int)VendorApi_CommonHelper.KhaltiAPIName.khalti_flight_airlines).ToString());
                                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                                {
                                    msg = Common.InsufficientBalance_MPCoins;
                                }
                                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                                {
                                    msg = Common.InsufficientBalance;
                                }
                                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                                {
                                    msg = Common.InsufficientBalance;
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(JsonReq))
                                    {
                                        string TransactionUniqueId = string.Empty;
                                        string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                        // SHIFTED TO MAIN CONTROLLER
                                        //objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL,Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                        objVendor_API_Requests.Req_Khalti_Input = JsonReq;
                                        RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objVendor_API_Requests, "vendor_api_requests");
                                        TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, BookingID, Amount.ToString(), out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                        if (msg == "success")
                                        {
                                            string VendorOutputResponse = string.Empty;
                                            objRes = VendorApi_CommonHelper.RequestAirlines_ISSUE_FLIGHT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                            objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                            if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                            {
                                                //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                                msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                                if (msg.ToLower() == "success")
                                                {
                                                    string Title = "Transaction successfull";
                                                    string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                    Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                                }
                                            }
                                            else
                                            {
                                                msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                            }
                                        }
                                    }
                                    // **** Populate Values to be passed to Controller Action **** //
                                    //AddUser outobject = new AddUser();
                                    //GetUser inobject = new GetUser();
                                    //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                    //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                    //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                    objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                    //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                    Id = VendorApi_CommonHelper.Id;
                                }
                            }
                        }
                    }
                }
            }
            return msg;
        }


        public static string RequestServiceGroup_AIRLINES_ISSUE_FLIGHT_CHECK(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string BookingID, string FlightID, string ReturnFlightID, string FareTotal, string Reference, string Version, string DeviceCode,
        string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Airlines_IssueFlight_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(BookingID) || BookingID == "0")
            {
                msg = "Please enter BookingID.";
            }
            else if (string.IsNullOrEmpty(FlightID))
            {
                msg = "Please enter FlightID.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            else if ((string.IsNullOrEmpty(FareTotal) || FareTotal == "0"))
            {
                msg = "Please enter FareTotal.";
            }
            else if (!string.IsNullOrEmpty(FareTotal))
            {
                decimal Num;
                bool isNum = decimal.TryParse(FareTotal, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid FareTotal.";
                }
            }
            else if ((string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if ((!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                AddFlightBookingDetails resOut = new AddFlightBookingDetails();
                GetFlightBookingDetails resIn = new GetFlightBookingDetails();
                resIn.BookingId = Convert.ToInt64(BookingID);
                resIn.CheckFlightBooked = 1;
                resIn.CheckInbound = 0;
                resIn.Flightid = FlightID;
                resIn.MemberId = Convert.ToInt64(MemberId);
                AddFlightBookingDetails resGetFlightRecord = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.StoreProcedures.sp_FlightBookingDetails_Get, resIn, resOut);
                if (resGetFlightRecord.Id > 0)
                {
                    if (resGetFlightRecord.IsFlightIssued == false)
                    {
                        msg = "success";
                    }
                    else
                    {
                        msg = "Flight already issued";
                    }
                }
                else
                {
                    msg = "Booking not found. ";
                    Common.AddLogs($"Booking Flight ID {FlightID} not found for BookingID {BookingID}. Usermessage : {msg}", false, (int)AddLog.LogType.DBLogs, Common.CreatedBy, Common.CreatedByName, false, PlatForm, DeviceCode, 0, Common.CreatedBy, Common.CreatedByName);
                }

                if (string.IsNullOrEmpty(msg) && resGetFlightRecord.TripType.ToUpper() == "R")
                {
                    AddFlightBookingDetails resOut_ReturnFlight = new AddFlightBookingDetails();
                    GetFlightBookingDetails resIn_ReturnFlight = new GetFlightBookingDetails();
                    resIn_ReturnFlight.BookingId = Convert.ToInt64(BookingID);
                    resIn_ReturnFlight.CheckFlightBooked = 1;
                    resIn_ReturnFlight.CheckInbound = 1;
                    resIn_ReturnFlight.Flightid = ReturnFlightID;
                    resIn_ReturnFlight.MemberId = Convert.ToInt64(MemberId);
                    AddFlightBookingDetails resGetFlightRecord_ReturnFlight = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.StoreProcedures.sp_FlightBookingDetails_Get, resIn_ReturnFlight, resOut_ReturnFlight);
                    if (resGetFlightRecord_ReturnFlight.Id > 0)
                    {
                        if (resGetFlightRecord_ReturnFlight.IsFlightIssued == false)
                        {
                            msg = "success";
                        }
                        else
                        {
                            msg = "Flight already issued";
                        }
                    }
                    else
                    {
                        msg = "Return Flight Booking not found. ";
                        Common.AddLogs($"Return Booking Flight ID {FlightID} not found for BookingID {BookingID}. Usermessage : {msg}", false, (int)AddLog.LogType.DBLogs, Common.CreatedBy, Common.CreatedByName, false, PlatForm, DeviceCode, 0, Common.CreatedBy, Common.CreatedByName);
                    }
                }

                if (string.IsNullOrEmpty(msg))
                {
                    msg = "success";
                }
            }
            return msg;
        }


        public static string RequestServiceGroup_AIRLINES_CANCEL_FLIGHT(string BankTransactionId, string WalletType, string CustomerId, string BookingID, string CancelTickets, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Airlines_CancelFlight_Request objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(BookingID) || BookingID == "0")
            {
                msg = "Please enter BookingID.";
            }
            else if (string.IsNullOrEmpty(CancelTickets))
            {
                msg = "Please enter CancelTickets.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "cancel/flight/";
                    AddUser outobject = new AddUser();
                    GetUser inobject = new GetUser();
                    inobject.MemberId = Convert.ToInt64(MemberId);
                    AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_FLIGHT_AIRLINES_CANCEL_FLIGHT(BookingID, CancelTickets, Reference);
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "MemberId not found";
                            JsonReq = String.Empty;
                        }
                        else
                        {
                            if (resGetRecord.IsActive == false)
                            {
                                msg = "Your account is not active.";
                                JsonReq = String.Empty;
                            }
                        }
                        if (!string.IsNullOrEmpty(JsonReq))
                        {
                            objRes = VendorApi_CommonHelper.RequestAirlines_CANCEL_FLIGHT(JsonReq, KhaltiAPIURL);
                            msg = objRes.message;
                        }
                    }
                }
            }
            return msg;
        }

        #endregion

        #region EChalan

        public static string RequestServiceGroup_EChalan_DISTRICT_CODES_LOOKUP(string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_EChalan_Lookup_DistrictCode objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "locations/govpayment/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_EChalan_DISTRICT_CODE_LOOKUP(Reference, "echalan");
                objRes = VendorApi_CommonHelper.RequestEChalan_LOOKUP_DISTRICT_CODES(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }


        /// <summary>
        ///  ************* EChalan  ***********
        /// </summary> 
        public static string RequestServiceGroup_EChalan_LOOKUP(string Reference, string app_id, string voucher_no, string service, string fiscal_year, string province_code, string district_code, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_EChalan_Lookup objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(app_id))
            {
                msg = "Please enter app_id.";
            }
            else if (string.IsNullOrEmpty(voucher_no))
            {
                msg = "Please enter voucher_no.";
            }
            else if (string.IsNullOrEmpty(service))
            {
                msg = "Please enter service.";
            }
            else if (string.IsNullOrEmpty(fiscal_year))
            {
                msg = "Please enter fiscal_year.";
            }
            else if (string.IsNullOrEmpty(province_code))
            {
                msg = "Please enter province_code.";
            }
            else if (string.IsNullOrEmpty(district_code))
            {
                msg = "Please enter district_code.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/govpayment/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_EChalan_LOOKUP(Reference, app_id, voucher_no, service, fiscal_year, province_code, district_code);
                objRes = VendorApi_CommonHelper.RequestEChalan_LOOKUP(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_EChalan_PAYMENT(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string SessionId, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_EChalan_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(SessionId))
            {
                msg = "Please enter SessionId.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/govpayment/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Traffic_Police_Fine;
                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt64(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        msg = "Please enter Valid MemberId.";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                    }
                    if (string.IsNullOrEmpty(msg))
                    {
                        WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                        AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                        {
                            msg = Common.InsufficientBalance_MPCoins;
                        }
                        else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                        {
                            msg = Common.InsufficientBalance;
                        }
                        else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                        {
                            msg = Common.InsufficientBalance;
                        }
                        else
                        {
                            string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_EChalan(SessionId, Amount, Reference);

                            string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                            decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            if (resGetRecord == null || resGetRecord.Id == 0)
                            {
                                msg = "MemberId not found";
                                JsonReq = String.Empty;
                            }
                            else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                            {
                                msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                if (!string.IsNullOrEmpty(msg))
                                {
                                    JsonReq = String.Empty;
                                }
                            }
                            if (string.IsNullOrEmpty(msg))
                            {
                                if (resGetRecord.IsActive == false)
                                {
                                    msg = "Your account is not active.";
                                    JsonReq = String.Empty;
                                }
                            }
                            if (!string.IsNullOrEmpty(JsonReq))
                            {
                                string TransactionUniqueId = string.Empty;
                                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                if (msg == "success")
                                {
                                    string VendorOutputResponse = string.Empty;
                                    objRes = VendorApi_CommonHelper.RequestEChalan_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                    objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                    if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                    {
                                        //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                        string chitno = string.Empty;
                                        string ChallanDescription = string.Empty;
                                        string fullName = string.Empty;
                                        string ebpNo = string.Empty;
                                        if (objRes != null && objRes.extra_data != null)
                                        {
                                            chitno = objRes.extra_data.chit_no;
                                            ChallanDescription = objRes.extra_data.violation_description;
                                            fullName = objRes.extra_data.full_name;
                                            ebpNo = objRes.extra_data.ebp_number;
                                        }
                                        msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, chitno, ChallanDescription, fullName, 1, ebpNo);
                                        if (msg.ToLower() == "success")
                                        {
                                            string Title = "Transaction successfull";
                                            string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                            Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                        }
                                    }
                                    else
                                    {
                                        msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                    }
                                }
                            }
                            objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                            Id = VendorApi_CommonHelper.Id;
                        }

                    }
                }
            }
            return msg;
        }
        #endregion

        //NepalLifeInsurance
        public static string RequestServiceGroup_NepalLifeInsurance_Detail(string PolicyNo, string DOB, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_NepalLifeInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(PolicyNo))
            {
                msg = "Please enter PolicyNo.";
            }
            else if (string.IsNullOrEmpty(DOB))
            {
                msg = "Please enter DOB.";
            }
            else if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/nepal-life-insurance/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_NepalLifeInsurance_Detail(PolicyNo, DOB, Reference);
                objRes = VendorApi_CommonHelper.RequestNepalLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_NEPALLIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_NepalLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(SessionId))
                {
                    msg = "Please enter SessionId.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/nepal-life-insurance/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Nepal_Life;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Nepal_Life).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_NepalLifeInsurance(Amount, SessionId, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_NEPALLIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        //SuryaLifeInsurance
        //public static string RequestServiceGroup_SuryaLifeInsurance_Detail(string PolicyNo, string DOB, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_SuryaLifeInsurance_Detail objRes)
        //{
        //    string msg = string.Empty;
        //    if (string.IsNullOrEmpty(PolicyNo))
        //    {
        //        msg = "Please enter PolicyNo.";
        //    }
        //    else if (string.IsNullOrEmpty(DOB))
        //    {
        //        msg = "Please enter DOB.";
        //    }
        //    else if (string.IsNullOrEmpty(Reference))
        //    {
        //        msg = "Please enter Reference.";
        //    }
        //    else if (string.IsNullOrEmpty(Version))
        //    {
        //        msg = "Please enter Version.";
        //    }
        //    else if (string.IsNullOrEmpty(DeviceCode))
        //    {
        //        msg = "Please enter DeviceCode.";
        //    }
        //    else if (string.IsNullOrEmpty(PlatForm))
        //    {
        //        msg = "Please enter PlatForm.";
        //    }
        //    if (string.IsNullOrEmpty(msg))
        //    {
        //        string KhaltiAPIURL = "details/surya-life-insurance/";
        //        string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SuryaLifeInsurance_Detail(PolicyNo, DOB, Reference);
        //        objRes = VendorApi_CommonHelper.RequestSuryaLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
        //        msg = objRes.Message;
        //    }
        //    return msg;
        //}
        //public static string RequestServiceGroup_COMMIT_SURYALIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_SuryaLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        //{
        //    string msg = string.Empty;
        //    if (string.IsNullOrEmpty(Amount))
        //    {
        //        msg = "Please enter Amount.";
        //    }
        //    else if (!string.IsNullOrEmpty(Amount))
        //    {
        //        decimal Num;
        //        bool isNum = decimal.TryParse(Amount, out Num);
        //        if (!isNum)
        //        {
        //            msg = "Please enter valid Amount.";
        //        }
        //    }
        //    if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
        //    {
        //        msg = "Please enter MemberId.";
        //    }
        //    else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
        //    {
        //        Int64 Num;
        //        bool isNum = Int64.TryParse(MemberId, out Num);
        //        if (!isNum)
        //        {
        //            msg = "Please enter valid MemberId.";
        //        }
        //    }

        //    if (string.IsNullOrEmpty(msg))
        //    {
        //        if (string.IsNullOrEmpty(ReferenceNo))
        //        {
        //            msg = "Please enter ReferenceNo.";
        //        }
        //        else if (string.IsNullOrEmpty(SessionId))
        //        {
        //            msg = "Please enter SessionId.";
        //        }
        //        else if (string.IsNullOrEmpty(DeviceCode))
        //        {
        //            msg = "Please enter DeviceCode.";
        //        }
        //        else if (string.IsNullOrEmpty(PlatForm))
        //        {
        //            msg = "Please enter PlatForm.";
        //        }


        //        if (string.IsNullOrEmpty(msg))
        //        {
        //            string KhaltiAPIURL = "commit/surya-life-insurance/";
        //            int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Surya_Life;

        //            //AddUser outobject = new AddUser();
        //            //GetUser inobject = new GetUser();
        //            //inobject.MemberId = Convert.ToInt32(MemberId);
        //            //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

        //            if (string.IsNullOrEmpty(msg))
        //            {
        //                if (resGetRecord == null || resGetRecord.Id == 0)
        //                {
        //                    msg = "Please enter Valid member id.";
        //                }
        //                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
        //                {
        //                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
        //                }

        //                if (string.IsNullOrEmpty(msg))
        //                {
        //                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
        //                    AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Surya_Life).ToString());
        //                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
        //                    {
        //                        msg = Common.InsufficientBalance_MPCoins;
        //                    }
        //                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
        //                    {
        //                        msg = Common.InsufficientBalance;
        //                    }
        //                    else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
        //                    {
        //                        msg = Common.InsufficientBalance;
        //                    }
        //                    else
        //                    {
        //                        string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_SuryaLifeInsurance(Amount, SessionId, ReferenceNo);

        //                        string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
        //                        decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
        //                        if (resGetRecord == null || resGetRecord.Id == 0)
        //                        {
        //                            msg = "MemberId not found";
        //                            JsonReq = String.Empty;
        //                        }
        //                        else
        //                        {
        //                            if (resGetRecord.IsActive == false)
        //                            {
        //                                msg = "Your account is not active.";
        //                                JsonReq = String.Empty;
        //                            }
        //                        }
        //                        if (!string.IsNullOrEmpty(JsonReq))
        //                        {
        //                            string TransactionUniqueId = string.Empty;
        //                            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
        //                            objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
        //                            TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
        //                            if (msg == "success")
        //                            {
        //                                string VendorOutputResponse = string.Empty;
        //                                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_SURYALIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
        //                                objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
        //                                if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
        //                                {
        //                                    //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
        //                                    msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
        //                                    if (msg.ToLower() == "success")
        //                                    {
        //                                        string Title = "Transaction successfull";
        //                                        string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
        //                                        Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
        //                                }
        //                            }
        //                        }
        //                        //  Populate Values to be passed to Controller Action  //
        //                        //AddUser outobject = new AddUser();
        //                        //GetUser inobject = new GetUser();
        //                        //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
        //                        //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
        //                        //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
        //                        objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
        //                        //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
        //                        Id = VendorApi_CommonHelper.Id;
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    return msg;
        //}


        //SanimaLifeInsurance
        //public static string RequestServiceGroup_SanimaLifeInsurance_Detail(string PolicyNo, string DOB, string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_SanimaLifeInsurance_Detail objRes)
        //{
        //    string msg = string.Empty;
        //    if (string.IsNullOrEmpty(PolicyNo))
        //    {
        //        msg = "Please enter PolicyNo.";
        //    }
        //    else if (string.IsNullOrEmpty(DOB))
        //    {
        //        msg = "Please enter DOB.";
        //    }
        //    else if (string.IsNullOrEmpty(Reference))
        //    {
        //        msg = "Please enter Reference.";
        //    }
        //    else if (string.IsNullOrEmpty(Version))
        //    {
        //        msg = "Please enter Version.";
        //    }
        //    else if (string.IsNullOrEmpty(DeviceCode))
        //    {
        //        msg = "Please enter DeviceCode.";
        //    }
        //    else if (string.IsNullOrEmpty(PlatForm))
        //    {
        //        msg = "Please enter PlatForm.";
        //    }
        //    if (string.IsNullOrEmpty(msg))
        //    {
        //        string KhaltiAPIURL = "details/sanimalife-insurance/";
        //        string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SanimaLifeInsurance_Detail(PolicyNo, DOB, Reference);
        //        objRes = VendorApi_CommonHelper.RequestSanimaLifeInsurance_DETAIL(JsonReq, KhaltiAPIURL);
        //        msg = objRes.Message;
        //    }
        //    return msg;
        //}

        //public static string RequestServiceGroup_COMMIT_SANIMALIFEINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string SessionId, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_SanimaLifeInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        //{
        //    string msg = string.Empty;
        //    if (string.IsNullOrEmpty(Amount))
        //    {
        //        msg = "Please enter Amount.";
        //    }
        //    else if (!string.IsNullOrEmpty(Amount))
        //    {
        //        decimal Num;
        //        bool isNum = decimal.TryParse(Amount, out Num);
        //        if (!isNum)
        //        {
        //            msg = "Please enter valid Amount.";
        //        }
        //    }
        //    if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
        //    {
        //        msg = "Please enter MemberId.";
        //    }
        //    else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
        //    {
        //        Int64 Num;
        //        bool isNum = Int64.TryParse(MemberId, out Num);
        //        if (!isNum)
        //        {
        //            msg = "Please enter valid MemberId.";
        //        }
        //    }

        //    if (string.IsNullOrEmpty(msg))
        //    {
        //        if (string.IsNullOrEmpty(ReferenceNo))
        //        {
        //            msg = "Please enter ReferenceNo.";
        //        }
        //        else if (string.IsNullOrEmpty(SessionId))
        //        {
        //            msg = "Please enter SessionId.";
        //        }
        //        else if (string.IsNullOrEmpty(DeviceCode))
        //        {
        //            msg = "Please enter DeviceCode.";
        //        }
        //        else if (string.IsNullOrEmpty(PlatForm))
        //        {
        //            msg = "Please enter PlatForm.";
        //        }


        //        if (string.IsNullOrEmpty(msg))
        //        {
        //            string KhaltiAPIURL = "commit/sanimalife-insurance/";
        //            int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Sanima_Life;

        //            //AddUser outobject = new AddUser();
        //            //GetUser inobject = new GetUser();
        //            //inobject.MemberId = Convert.ToInt32(MemberId);
        //            //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

        //            if (string.IsNullOrEmpty(msg))
        //            {
        //                if (resGetRecord == null || resGetRecord.Id == 0)
        //                {
        //                    msg = "Please enter Valid member id.";
        //                }
        //                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
        //                {
        //                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
        //                }

        //                if (string.IsNullOrEmpty(msg))
        //                {
        //                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
        //                    AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Sanima_Life).ToString());
        //                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
        //                    {
        //                        msg = Common.InsufficientBalance_MPCoins;
        //                    }
        //                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
        //                    {
        //                        msg = Common.InsufficientBalance;
        //                    }
        //                    else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
        //                    {
        //                        msg = Common.InsufficientBalance;
        //                    }
        //                    else
        //                    {
        //                        string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_SanimaLifeInsurance(SessionId, ReferenceNo);

        //                        string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
        //                        decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
        //                        if (resGetRecord == null || resGetRecord.Id == 0)
        //                        {
        //                            msg = "MemberId not found";
        //                            JsonReq = String.Empty;
        //                        }
        //                        else
        //                        {
        //                            if (resGetRecord.IsActive == false)
        //                            {
        //                                msg = "Your account is not active.";
        //                                JsonReq = String.Empty;
        //                            }
        //                        }
        //                        if (!string.IsNullOrEmpty(JsonReq))
        //                        {
        //                            string TransactionUniqueId = string.Empty;
        //                            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
        //                            objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
        //                            TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
        //                            if (msg == "success")
        //                            {
        //                                string VendorOutputResponse = string.Empty;
        //                                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_SANIMALIFEINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
        //                                objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
        //                                if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
        //                                {
        //                                    //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
        //                                    msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
        //                                    if (msg.ToLower() == "success")
        //                                    {
        //                                        string Title = "Transaction successfull";
        //                                        string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
        //                                        Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
        //                                }
        //                            }
        //                        }
        //                        //  Populate Values to be passed to Controller Action  //
        //                        //AddUser outobject = new AddUser();
        //                        //GetUser inobject = new GetUser();
        //                        //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
        //                        //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
        //                        //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
        //                        objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
        //                        //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
        //                        Id = VendorApi_CommonHelper.Id;
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    return msg;
        //}


        //ShikharInsurance
        public static string RequestServiceGroup_ShikharInsurance_GetPackages(string Version, string DeviceCode, string PlatForm, ref GetVendor_API_ShikharInsurance_GetPackages objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "getpackages/shikhar-insurance-offline/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_ShikharInsurance_GetPackages();
                objRes = VendorApi_CommonHelper.RequestShikharInsurance_GetPackages(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_SHIKHARINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string CustomerName, string Address, string ContactNumber, string Email, string PolicyType, string PolicyNumber, string Branch, string PolicyDescription, string PolicyName, string Amount, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_ShikharInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(CustomerName))
            {
                msg = "Please enter CustomerName.";
            }

            if (string.IsNullOrEmpty(Address))
            {
                msg = "Please enter Address.";
            }

            if (string.IsNullOrEmpty(ContactNumber))
            {
                msg = "Please enter ContactNumber.";
            }

            if (string.IsNullOrEmpty(Email))
            {
                msg = "Please enter Email.";
            }

            if (string.IsNullOrEmpty(PolicyType))
            {
                msg = "Please enter PolicyType.";
            }

            if (string.IsNullOrEmpty(PolicyNumber))
            {
                msg = "Please enter PolicyNumber.";
            }

            if (string.IsNullOrEmpty(Branch))
            {
                msg = "Please enter Branch.";
            }

            if (string.IsNullOrEmpty(PolicyDescription))
            {
                msg = "Please enter PolicyDescription.";
            }

            if (string.IsNullOrEmpty(PolicyName))
            {
                msg = "Please enter PolicyName.";
            }

            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                //else if (string.IsNullOrEmpty(SessionId))
                //{
                //    msg = "Please enter SessionId.";
                //}
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "use/shikhar-insurance-offline/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Shikhar;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Shikhar).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_ShikharInsurance(ReferenceNo, CustomerName, Address, ContactNumber, Email, PolicyType, PolicyNumber, Branch, PolicyDescription, PolicyName, Amount);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_SHIKHARINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        //ArhantInsurance
        public static string RequestServiceGroup_ArhantInsurance_Detail(string InsuranceSlug, string RequestId, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_ArhantInsurance_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(InsuranceSlug))
            {
                msg = "Please enter InsuranceSlug.";
            }
            if (string.IsNullOrEmpty(RequestId))
            {
                msg = "Please enter RequestId.";
            }
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "details/arhant-insurances/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_ArhantInsurance_Detail(InsuranceSlug, RequestId);
                objRes = VendorApi_CommonHelper.RequestArhantInsurance_DETAIL(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_ARHANTINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string RequestId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_ArhantInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(RequestId))
                {
                    msg = "Please enter RequestId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/arhant-insurances/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Arhant;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Arhant).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_ArhantInsurance(RequestId, Amount, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_ARHANTINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_NLGINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string RequestId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_ArhantInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests, string ClassName)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(RequestId))
                {
                    msg = "Please enter RequestId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/arhant-insurances/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_NLG;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Arhant).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_ArhantInsurance(RequestId, Amount, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateArhantInsuranceWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount,out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance,ClassName);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_ARHANTINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_SIDDHARTHAINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string RequestId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_ArhantInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests,string ClassName)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(RequestId))
                {
                    msg = "Please enter RequestId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/arhant-insurances/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_SIDDHARTHA;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Arhant).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_ArhantInsurance(RequestId, Amount, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateArhantInsuranceWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance,ClassName);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_ARHANTINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }

        public static string RequestServiceGroup_COMMIT_UNITEDINSURANCE(AddUserLoginWithPin resGetRecord, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string MemberId, string Amount, string RequestId, string InsuranceSlug, string ReferenceNo, string UserInput, string authenticationToken, string DeviceCode, string PlatForm, ref GetVendor_API_ServiceGroup_ArhantInsurance_Commit objRes, ref AddVendor_API_Requests objVendor_API_Requests,string ClassName)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Amount))
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(ReferenceNo))
                {
                    msg = "Please enter ReferenceNo.";
                }
                else if (string.IsNullOrEmpty(RequestId))
                {
                    msg = "Please enter RequestId.";
                }
                else if (string.IsNullOrEmpty(InsuranceSlug))
                {
                    msg = "Please enter InsuranceSlug.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }


                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "commit/arhant-insurances/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_UNITEDAJOD;

                    //AddUser outobject = new AddUser();
                    //GetUser inobject = new GetUser();
                    //inobject.MemberId = Convert.ToInt32(MemberId);
                    //AddUser resGetRecord = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);

                    if (string.IsNullOrEmpty(msg))
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid member id.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }

                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Insurance_Arhant).ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_ArhantInsurance(RequestId, Amount, InsuranceSlug, ReferenceNo);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateArhantInsuranceWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance, ClassName);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_COMMIT_ARHANTINSURANCE(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                //  Populate Values to be passed to Controller Action  //
                                //AddUser outobject = new AddUser();
                                //GetUser inobject = new GetUser();
                                //inobject.MemberId = Convert.ToInt64(resGetRecord.MemberId);
                                //AddUser resGet = RepCRUD<GetUser, AddUser>.GetRecord("sp_Users_Get", inobject, outobject);
                                //objRes.WalletBalance = Convert.ToDecimal(resGet.TotalAmount).ToString();
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                //resKhalti = VendorApi_CommonHelper.resVendor_API_Requests;
                                Id = VendorApi_CommonHelper.Id;
                            }
                        }
                    }
                }
            }
            return msg;
        }


        public static string RequestServiceGroup_Eset_LOOKUP(string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Eset_Lookup objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "products/eset-antivirus/";
                objRes = VendorApi_CommonHelper.RequestEset_LOOKUP(KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }
        public static string RequestServiceGroup_Antivirus_ESET_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Value, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Eset_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Value))
            {
                msg = "Please enter Value.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "eset-antivirus/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Antivirus_Eset;
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Eset(Value, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestEset_ANTIVIRUS_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {

                                            VendorApi_CommonHelper.Pin = objRes.pin;
                                            VendorApi_CommonHelper.Serial = objRes.serial;
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }


        public static string RequestServiceGroup_Wardwiz_LOOKUP(string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Wardwiz_Lookup objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "products/wardwiz-antivirus/";
                objRes = VendorApi_CommonHelper.RequestWardwiz_LOOKUP(KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_Antivirus_WARDWIZ_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Value, string Amount, string Reference, string Version, string DeviceCode,
           string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Wardwiz_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Value))
            {
                msg = "Please enter Value.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "wardwiz-antivirus/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Antivirus_Wardwiz;
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Wardwiz(Value, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestWardwiz_ANTIVIRUS_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {

                                            VendorApi_CommonHelper.Pin = objRes.pin;
                                            VendorApi_CommonHelper.Serial = objRes.serial;
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }
        public static string RequestServiceGroup_K7_LOOKUP(string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_K7_Lookup objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "products/k7-antivirus/";
                objRes = VendorApi_CommonHelper.RequestK7_LOOKUP(KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_Mcafee_LOOKUP(string Reference, string Version, string DeviceCode, string PlatForm, ref GetVendor_API_Mcafee_Lookup objRes, bool IsTestVendor = false)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "products/mcafee-antivirus";
                objRes = VendorApi_CommonHelper.RequestMcafee_LOOKUP(KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }

        public static string RequestServiceGroup_ANTIVIRUS_K7_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Value, string Amount, string Reference, string Version, string DeviceCode,
            string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_K7_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Value))
            {
                msg = "Please enter Value.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "k7-antivirus/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Antivirus_k7;
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_K7(Value, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestK7_ANTIVIRUS_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {

                                            VendorApi_CommonHelper.Pin = objRes.pin;
                                            VendorApi_CommonHelper.Serial = objRes.serial;
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }

                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();

                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }
        public static string RequestServiceGroup_INTERNET_Mcafee_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Value, string Name, string Amount, string Reference, string Version, string DeviceCode,
        string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Mcafee_Payment_Request objRes, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Value))
            {
                msg = "Please enter Value.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (string.IsNullOrEmpty(Name))
            {
                msg = "Please enter Name.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(Reference))
                {
                    msg = "Please enter Reference.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    string KhaltiAPIURL = "mcafee-antivirus/";
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_Antivirus_Mcafee;
                    {
                        if (resGetRecord == null || resGetRecord.Id == 0)
                        {
                            msg = "Please enter Valid MemberId.";
                        }
                        else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                        {
                            msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        }
                        if (string.IsNullOrEmpty(msg))
                        {
                            WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                            {
                                msg = Common.InsufficientBalance_MPCoins;
                            }
                            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                            {
                                msg = Common.InsufficientBalance;
                            }
                            else
                            {
                                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Mcafee(Value, Name, Amount, Reference);

                                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                                if (resGetRecord == null || resGetRecord.Id == 0)
                                {
                                    msg = "MemberId not found";
                                    JsonReq = String.Empty;
                                }
                                else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                                {
                                    msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                    if (!string.IsNullOrEmpty(msg))
                                    {
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (string.IsNullOrEmpty(msg))
                                {
                                    if (resGetRecord.IsActive == false)
                                    {
                                        msg = "Your account is not active.";
                                        JsonReq = String.Empty;
                                    }
                                }
                                if (!string.IsNullOrEmpty(JsonReq))
                                {
                                    string TransactionUniqueId = string.Empty;
                                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                    objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                                    TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance);
                                    if (msg == "success")
                                    {
                                        string VendorOutputResponse = string.Empty;
                                        objRes = VendorApi_CommonHelper.RequestMcafee_ANTIVIRUS_PAYMENT(JsonReq, ref VendorOutputResponse, KhaltiAPIURL, ref objVendor_API_Requests);
                                        objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", VendorOutputResponse);
                                        if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success" && objRes.status == true)
                                        {

                                            VendorApi_CommonHelper.Pin = objRes.pin;
                                            VendorApi_CommonHelper.Serial = objRes.serial;
                                            //VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                            msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                            if (msg.ToLower() == "success")
                                            {
                                                string Title = "Transaction successfull";
                                                string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                            }
                                        }
                                        else
                                        {
                                            msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                        }
                                    }
                                }
                                objRes.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                                Id = VendorApi_CommonHelper.Id;
                            }

                        }
                    }
                }
            }
            return msg;
        }

        #region PlasmaTech
        public static string RequestServiceGroup_EPF_ContributorDetail(string BatchCrncy, string DebtorName, string DebtorAddress, ref GetVendor_API_Epf_Contributor_Detail objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(BatchCrncy))
            {
                msg = "Please enter BatchCrncy.";
            }
            else if (string.IsNullOrEmpty(DebtorName))
            {
                msg = "Please enter DebtorName.";
            }
            else if (string.IsNullOrEmpty(DebtorAddress))
            {
                msg = "Please enter DebtorAddress.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "tp/epf/contributor/detail/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_EPF_ContributorDetail(BatchCrncy, DebtorName, DebtorAddress);
                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_EPF_Contributor_Detail(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }
        public static string RequestServiceGroup_EPF_Commit(string BatchCrncy, string DebtorName, string DebtorAddress, ref GetVendor_API_Epf_Commit objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(BatchCrncy))
            {
                msg = "Please enter BatchCrncy.";
            }
            else if (string.IsNullOrEmpty(DebtorName))
            {
                msg = "Please enter DebtorName.";
            }
            else if (string.IsNullOrEmpty(DebtorAddress))
            {
                msg = "Please enter DebtorAddress.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "billpayment/lodgebillpay.do/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_EPF_Commit(BatchCrncy, DebtorName, DebtorAddress);
                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_EPF_Commit(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }
        public static string RequestServiceGroup_EPF_ConfirmPayment(string BatchCrncy, string DebtorName, string DebtorAddress, ref GetVendor_API_Epf_Commit objRes)
        {
            string msg = string.Empty;
            if (string.IsNullOrEmpty(BatchCrncy))
            {
                msg = "Please enter BatchCrncy.";
            }
            else if (string.IsNullOrEmpty(DebtorName))
            {
                msg = "Please enter DebtorName.";
            }
            else if (string.IsNullOrEmpty(DebtorAddress))
            {
                msg = "Please enter DebtorAddress.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "billpayment/confirmbillpay.do/";
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_SERVICEGROUP_EPF_ConfirmPayment(BatchCrncy, DebtorName, DebtorAddress);
                objRes = VendorApi_CommonHelper.RequestSERVICEGROUP_EPF_ConfirmPayment(JsonReq, KhaltiAPIURL);
                msg = objRes.Message;
            }
            return msg;
        }




        #region BusSewa Service
        public static GetDataFromBusSewa Get_BusSewa_TRIP_RequestService(string Reference, string BoardingFrom, string ArrivalTo, string ShiftDayNight, string Date, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(BoardingFrom))
            {
                msg = "Please enter BoardingFrom.";
            }
            else if (string.IsNullOrEmpty(ArrivalTo))
            {
                msg = "Please enter ArrivalTo.";
            }
            else if (string.IsNullOrEmpty(ShiftDayNight))
            {
                msg = "Please enter ShiftDayNight.";
            }
            else if (string.IsNullOrEmpty(Date))
            {
                msg = "Please enter Date.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.bus_sewa;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
                //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string KhaltiAPIURL = "trips";
                string tripdata = string.Empty;
                var jsonData = new TripDetail
                {
                    from = BoardingFrom,
                    to = ArrivalTo,
                    shift = ShiftDayNight,
                    date = Date
                };
                var data = JsonConvert.SerializeObject(jsonData);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.PostMethod_BusSewaWeb(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data);

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error BusSewaPost: ApiName " + VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"BusSewaPost URL: {VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

            }
            obj.message = msg;
            return obj;
        }

        public static GetDataFromBusSewa Get_BusSewa_ROUTES_RequestService(string Reference, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.bus_sewa;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
            // string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "routes";

            if (string.IsNullOrEmpty(msg))
            {
                //var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, Data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, "", 0);

                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, "", authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.GetMethod_BusSewaWeb(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, "");
                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error BusSewaPost: ApiName " + VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + ". Request: " + "" + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        obj.IsException = true;
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"BusSewaPost URL: {VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost}, Request {""}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);


                VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, "", DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);
            }
            obj.message = msg;
            return obj;
        }
        public static GetDataFromBusSewa Get_BusSewa_REFRESH_RequestService(string Reference, string Id, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Id))
            {
                msg = "Please provide bus Id.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.bus_sewa;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            if (string.IsNullOrEmpty(msg))
            {
                string KhaltiAPIURL = "refresh/" + @Id + " ";
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, "", authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);

                try
                {
                    string json = VendorApi_CommonHelper.GetMethod_BusSewaWeb(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, "");
                    msg = json;

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error BusSewaPost: ApiName " + VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + ". Request: " + "" + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"BusSewaPost URL: {VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost}, Request {""}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, "", DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);
            }
            obj.message = msg;
            return obj;
        }
        public static GetDataFromBusSewa Get_BusSewa_BOOKSEAT_RequestService(string Reference, string Id, object seat, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Id))
            {
                msg = "Please provide bus Id.";
            }
            else if (string.IsNullOrEmpty(Convert.ToString(seat)))
            {
                msg = "Please provide bus ticket number.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }

            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.bus_sewa;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "book";
            if (string.IsNullOrEmpty(msg))
            {
                var jsonData = new BookSeat
                {
                    id = Id,
                    seat = seat,
                };
                var data = JsonConvert.SerializeObject(jsonData);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);

                try
                {
                    msg = VendorApi_CommonHelper.PostMethod_BusSewaWeb(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data);

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error BusSewaPost: ApiName " + VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"BusSewaPost URL: {VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

            }
            obj.message = msg;
            return obj;
        }

        public static GetDataFromBusSewa Get_BusSewa_CANCELQUEUE_RequestService(string Reference, string Id, string ticketSrlNo, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Id))
            {
                msg = "Please provide bus Id.";
            }
            else if (string.IsNullOrEmpty(ticketSrlNo))
            {
                msg = "Please provide bus ticket number.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.bus_sewa;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "cancelQueue";
            if (string.IsNullOrEmpty(msg))
            {
                var jsonData = new CancelQueue
                {
                    id = Id,
                    ticketSrlNo = ticketSrlNo,
                };
                var data = JsonConvert.SerializeObject(jsonData);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                {

                    try
                    {
                        msg = VendorApi_CommonHelper.PostMethod_BusSewaWeb(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data);

                    }
                    catch (WebException e)
                    {
                        obj.IsException = true;
                        if (e.Response == null && e.Message != null)
                        {
                            Common.AddLogs("Error BusSewaPost: ApiName " + VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                            msg = e.Message;

                        }
                        else
                        {
                            using (WebResponse response = e.Response)
                            {
                                HttpWebResponse httpResponse = (HttpWebResponse)response;
                                Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                                using (Stream Edata = response.GetResponseStream())
                                using (var reader = new StreamReader(Edata))
                                {
                                    msg = reader.ReadToEnd();
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        msg = ex.Message;
                        obj.IsException = true;
                    }
                    Common.AddLogs($"BusSewaPost URL: {VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                    VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

                }

            }
            obj.message = msg;
            return obj;
        }
        public static GetDataFromBusSewa Get_BusSewa_PAYMENTCONFIRMATION_RequestService(string refId, string Reference, string Id, string ticketSrlNo,
                            string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName,
                            string authenticationToken, string UserInput, int VendorApiType,
                            AddCouponsScratched resCoupon, ref string TransactionID, string BankTransactionId,
                            string WalletType, string UniqueCustomerId, string Amount,
                            AddUserLoginWithPin resGetRecord
            , string API_KEY, string UniqueMerchantId, string UserName, string Password, string RedirectURL, string OrderToken, string UniqueTransactionId)
        {

            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Id))
            {
                msg = "Please provide bus Id.";
            }
            else if (string.IsNullOrEmpty(ticketSrlNo))
            {
                msg = "Please provide bus ticket number.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Amount is required.";
            }

            else if (string.IsNullOrEmpty(WalletType))
            {
                msg = "Payment type is required.";
            }
            else if (string.IsNullOrEmpty(Convert.ToString(MemberId)))
            {
                msg = "Member Id is required.";
            }
            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.bus_sewa;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "paymentConfirm";
            //string msg1 = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);


            if (string.IsNullOrEmpty(msg))
            {

                var data = string.Empty;

                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, "", MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                {
                    objVendor_API_Requests.Res_Khalti_Id = ticketSrlNo;
                    //--start insert into wallet transaction table (Customer)--//
                    string TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, ticketSrlNo, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance, "", "", VendorType);
                    obj.TransactionId = TransactionUniqueId;
                    if (string.IsNullOrEmpty(obj.TransactionId))
                    {
                        obj.message = "Transaction Not Saved";
                        return obj;
                    }
                    //--end insert into wallet transaction table (Customer)--//
                    var name = !string.IsNullOrEmpty(resGetRecord.MiddleName) ? resGetRecord.FirstName + ' ' + resGetRecord.MiddleName + ' ' + resGetRecord.LastName : resGetRecord.FirstName + ' ' + resGetRecord.LastName;
                    //--start insert into merchant order table (Merchant)--//
                    string msg1 = RepMerchants.RequestMerchantOrderGenerate_BUS(API_KEY, "", ticketSrlNo, UniqueMerchantId, Amount, UserName, Password, PlatForm, DeviceCode, UserInput, ref UniqueTransactionId, ref RedirectURL, ref OrderToken, ref objVendor_API_Requests, MemberId, name, resGetRecord.ContactNumber, "");
                    if (msg1.ToLower() != "success")
                    {
                        obj.message = msg1;
                        return obj;
                    }

                    obj.MerchantOrderTxnId = ticketSrlNo;
                    //--end insert into merchant order table--//
                    var jsonData = new paymentConfirm
                    {
                        id = Id,
                        ticketSrlNo = ticketSrlNo,
                        refId = obj.TransactionId
                    };
                    data = JsonConvert.SerializeObject(jsonData);
                    try
                    {
                        msg = VendorApi_CommonHelper.PostMethod_BusSewaWeb(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data);

                        if (!string.IsNullOrEmpty(msg))
                        {
                            paymentConfirmation result = JsonConvert.DeserializeObject<paymentConfirmation>(msg.ToString());
                            if (result.status == 1)
                            {
                                bool IsCouponUnlocked = false;
                                objVendor_API_Requests.Res_Khalti_Status = true;
                                var res = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                if (res.ToLower() == "success")
                                {
                                    string Title = "Transaction successfull";
                                    string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                                                                                                                    //string Message = "TransactionId " + objVendor_API_Requests.TransactionUniqueId + " success for " + VendorApiTypeName;
                                    Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                }
                            }
                            else if (result.status == 2)
                            {
                                //objVendor_API_Requests.Res_Khalti_Status = 0;
                                paymentConfirmation Failedresult = JsonConvert.DeserializeObject<paymentConfirmation>(Convert.ToString(msg));
                                objVendor_API_Requests.Res_Khalti_State = "failed";
                                objVendor_API_Requests.Res_Khalti_Message = Failedresult.message;
                                Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                            }
                        }


                    }
                    catch (WebException e)
                    {
                        obj.IsException = true;
                        if (e.Response == null && e.Message != null)
                        {
                            Common.AddLogs("Error BusSewaPost: ApiName " + VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                            obj.IsException = true;
                            msg = e.Message;

                        }
                        else
                        {
                            using (WebResponse response = e.Response)
                            {
                                HttpWebResponse httpResponse = (HttpWebResponse)response;
                                Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                                using (Stream Edata = response.GetResponseStream())
                                using (var reader = new StreamReader(Edata))
                                {
                                    obj.IsException = true;
                                    msg = reader.ReadToEnd();
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        obj.IsException = true;
                        msg = ex.Message;
                    }
                    Common.AddLogs($"BusSewaPost URL: {VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                    VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

                }

            }
            obj.message = msg;
            return obj;
        }
        public static GetDataFromBusSewa Get_BusSewa_TicketQuery_RequestService(string Reference, string Id, string ticketSrlNo, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Id))
            {
                msg = "Please provide bus Id.";
            }
            else if (string.IsNullOrEmpty(ticketSrlNo))
            {
                msg = "Please provide bus ticket number.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.bus_sewa;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
            // string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "queryTicket";
            if (string.IsNullOrEmpty(msg))
            {

                {
                    var jsonData = new CancelQueue
                    {
                        id = Id,
                        ticketSrlNo = ticketSrlNo,
                    };
                    var data = JsonConvert.SerializeObject(jsonData);
                    var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    try
                    {

                        msg = VendorApi_CommonHelper.PostMethod_BusSewaWeb(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data);

                    }
                    catch (WebException e)
                    {
                        obj.IsException = true;
                        if (e.Response == null && e.Message != null)
                        {
                            Common.AddLogs("Error BusSewaPost: ApiName " + VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                            msg = e.Message;

                        }
                        else
                        {
                            using (WebResponse response = e.Response)
                            {
                                HttpWebResponse httpResponse = (HttpWebResponse)response;
                                Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                                using (Stream Edata = response.GetResponseStream())
                                using (var reader = new StreamReader(Edata))
                                {
                                    msg = reader.ReadToEnd();
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        msg = ex.Message;
                        obj.IsException = true;
                    }
                    Common.AddLogs($"BusSewaPost URL: {VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                    VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);
                }

            }
            obj.message = msg;
            return obj;
        }

        public static GetDataFromBusSewa Get_BusSewa_PASSENGERINFO_RequestService(string Reference, string Id, string ticketSrlNo, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType, string name, string contactnumber, string email, string boardingpoint, string inputcode, object passengerTypeDetail, object passengerPriceDetail, object passengerFullDetail, string jsondata2)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Id))
            {
                msg = "Please provide bus Id.";
            }
            else if (string.IsNullOrEmpty(ticketSrlNo))
            {
                msg = "Please provide bus ticket number .";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            else if (string.IsNullOrEmpty(name))
            {
                if (inputcode == "1")
                {
                    msg = "Please enter full name.";
                }
            }
            //else if (string.IsNullOrEmpty(email))
            //{
            //    msg = "Please enter email.";
            //}
            else if (string.IsNullOrEmpty(contactnumber))
            {
                msg = "Please enter contact number.";
            }
            else if (string.IsNullOrEmpty(inputcode))
            {
                msg = "Input code is required.";
            }
            var Data = string.Empty;
            if (inputcode == "1")
            {
                var jsonData = new jsonPassengerInfo1
                {
                    id = Id,
                    name = name,
                    email = email,
                    contactNumber = contactnumber,
                    boardingPoint = boardingpoint,
                    ticketSrlNo = ticketSrlNo,
                };

                Data = JsonConvert.SerializeObject(jsonData);
            }
            else if (inputcode == "2")
            {
                Data = jsondata2;
            }
            else if (inputcode == "3")
            {
                var jsonData = new jsonPassengerInfo3
                {
                    id = Id,
                    //name = name,
                    email = email,
                    contactNumber = contactnumber,
                    boardingPoint = boardingpoint,
                    ticketSrlNo = ticketSrlNo,
                    passengerPriceDetail = null,
                };
                Data = JsonConvert.SerializeObject(jsonData);

            }
            else
            {
                var jsonData = new jsonPassengerInfo4
                {
                    id = Id,
                    //name = name,
                    email = email,
                    contactNumber = contactnumber,
                    boardingPoint = boardingpoint,
                    ticketSrlNo = ticketSrlNo,
                    passengerFullDetail = null
                };
                Data = JsonConvert.SerializeObject(jsonData);

            }

            //else if (inputcode == "2")
            //{
            //    if (string.IsNullOrEmpty(Convert.ToString(passengerTypeDetail)))
            //    {
            //        msg = "Please provide passenger type detail.";
            //    }
            //    var jsonData = new jsonPassengerInfo2
            //    {
            //        id = Id,
            //        email = email,
            //        contactNumber = contactnumber,
            //        boardingPoint = boardingpoint,
            //        ticketSrlNo = ticketSrlNo,
            //        passengerTypeDetail = passengerTypeDetail,
            //    };
            //    Data = JsonConvert.SerializeObject(jsonData);
            //}
            //else if (inputcode == "3")
            //{
            //    if (string.IsNullOrEmpty(Convert.ToString(passengerPriceDetail)))
            //    {
            //        msg = "Please provide passenger type detail.";
            //    }
            //    var jsonData = new jsonPassengerInfo3
            //    {
            //        id = Id,
            //        email = email,
            //        contactNumber = contactnumber,
            //        boardingPoint = boardingpoint,
            //        ticketSrlNo = ticketSrlNo,
            //        passengerPriceDetail = passengerPriceDetail,
            //    };
            //    Data = JsonConvert.SerializeObject(jsonData);
            //}

            //else
            //{
            //    if (string.IsNullOrEmpty(Convert.ToString(passengerFullDetail)))
            //    {
            //        msg = "Please provide passenger type detail.";
            //    }
            //    var jsonData = new jsonPassengerInfo4
            //    {
            //        id = Id,
            //        email = email,
            //        contactNumber = contactnumber,
            //        boardingPoint = boardingpoint,
            //        ticketSrlNo = ticketSrlNo,
            //        passengerFullDetail = passengerFullDetail,
            //    };
            //    Data = JsonConvert.SerializeObject(jsonData);
            //}
            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.bus_sewa;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, "", 0);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "passengerInfo";
            if (string.IsNullOrEmpty(msg))
            {
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, Data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                //var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, Data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                {

                    try
                    {
                        msg = VendorApi_CommonHelper.PostMethod_BusSewaWeb(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Data);

                    }
                    catch (WebException e)
                    {
                        obj.IsException = true;
                        if (e.Response == null && e.Message != null)
                        {
                            Common.AddLogs("Error BusSewaPost: ApiName " + VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + ". Request: " + Data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                            msg = e.Message;

                        }
                        else
                        {
                            using (WebResponse response = e.Response)
                            {
                                HttpWebResponse httpResponse = (HttpWebResponse)response;
                                Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                                using (Stream Edata = response.GetResponseStream())
                                using (var reader = new StreamReader(Edata))
                                {
                                    msg = reader.ReadToEnd();
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        obj.IsException = true;
                        msg = ex.Message;
                    }
                    Common.AddLogs($"BusSewaPost URL: {VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost}, Request {Data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                    VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

                }

            }
            obj.message = msg;
            return obj;
        }

        #endregion

        #endregion

        public static string PaymentConfirmDetailsmessage(ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resGetCouponsScratched, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string number, string MemberId,
          string authenticationToken, string UserInput, string DeviceCode, string PlatForm, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            string msg = VendorApi_CommonHelper.ValidateUserInputs(Req_ReferenceNo, Amount, number, MemberId, InputNumber_Digits);

            if (string.IsNullOrEmpty(msg))
            {
                //string KhaltiAPIURL = "ntc/";
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_ntc;
                string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Req_ReferenceNo, Amount, number, string.Empty, VendorAPIType);
                if (Convert.ToDouble(Amount) < 10 || Convert.ToDouble(Amount) > 25000)
                {
                    msg = "Please enter amount between 10 to 25000.";
                    JsonReq = String.Empty;
                }
                if (string.IsNullOrEmpty(msg))
                {
                    if (resGetRecord == null || resGetRecord.Id == 0)
                    {
                        msg = "Invalid MemberId";
                        JsonReq = String.Empty;
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                        if (!string.IsNullOrEmpty(msg))
                        {
                            JsonReq = String.Empty;
                        }
                    }
                    WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                }
                UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId;
                Id = VendorApi_CommonHelper.Id;
            }
            return msg;
        }

        #region Plasma Tech Service
        public static string GetPnrDetail(string userID, string password, string agencyId, string pnrNo, string lastName)
        {
            try
            {
                string soapEnvelope = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:book=\"http://booking.us.org/\">"
               + "<soapenv:Header/>"
               + "<soapenv:Body>"
               + "<book:GetPnrDetail>"
               + "<strUserId>" + userID + "</strUserId>"
               + "<strPassword>" + password + "</strPassword>"
               + "<strAgencyId>" + agencyId + "</strAgencyId>"
               + "<strPnrNo>" + pnrNo + "</strPnrNo>"
               + "<strLastName>" + lastName + "</strLastName>"
               + "</book:GetPnrDetail>"
               + "</soapenv:Body>"
               + "</soapenv:Envelope>";

                // Create the request
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create("http://dev.usbooking.org:80/us/UnitedSolutions");
                request.ContentType = "text/xml";
                request.Method = "POST";
                // Convert the SOAP envelope to bytes
                byte[] bytes = Encoding.UTF8.GetBytes(soapEnvelope);
                request.ContentLength = bytes.Length;

                // Write the SOAP envelope to the request stream
                using (Stream requestStream = request.GetRequestStream())
                {
                    requestStream.Write(bytes, 0, bytes.Length);
                }

                // Get the response
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    string responseString = reader.ReadToEnd();
                    var xmlresponsestring = RemoveAllNamespaces(responseString);
                    XmlDocument doc = new XmlDocument();
                    doc.LoadXml(xmlresponsestring);

                    string JsonResponse = JsonConvert.SerializeXmlNode(doc);
                    //GetPnrDetailRootModel root = JsonConvert.DeserializeObject<GetPnrDetailRootModel>(JsonResponse);

                    // Access the deserialized data
                    //string itineraryXML = root.Envelope.Body.IssueTicketResponse.@return;
                    //XDocument xmlDoc = XDocument.Parse(itineraryXML);
                    //string jsonString = JsonConvert.SerializeXNode(xmlDoc);

                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
            return null;
        }
        public static string RequestServiceGroup_PLASMA_FLIGHT_PAYMENT(ref bool IsCouponUnlocked, ref string TransactionID, AddUserLoginWithPin resGetRecord, string BankTransactionId, string WalletType, string UniqueCustomerId, string Amount, string Reference, string Version, string DeviceCode, string PlatForm, string MemberId, string authenticationToken, string UserInput, ref GetVendor_API_Airlines_MyPay_Payment_Request objResPayment, ref AddVendor_API_Requests objVendor_API_Requests, AddCouponsScratched resCoupon, string bookingId, string flightID, string returnFlightID, string contactName, string contactEmail, string contactMobile)
        {

            log4net.Config.XmlConfigurator.ConfigureAndWatch(new System.IO.FileInfo(AppDomain.CurrentDomain.BaseDirectory + "log4net.config"));
            ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            string msg = string.Empty;
            if (string.IsNullOrEmpty(resGetRecord.ContactNumber))
            {
                msg = "Please enter Contact Number.";
            }

            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg) && (string.IsNullOrEmpty(MemberId) || MemberId == "0"))
            {
                msg = "Please enter MemberId.";
            }
            else if (string.IsNullOrEmpty(msg) && (!string.IsNullOrEmpty(MemberId)))
            {
                Int64 Num;
                bool isNum = Int64.TryParse(MemberId, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid MemberId.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
                if (string.IsNullOrEmpty(msg))
                {
                    int VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.Airlines_MyPay;
                    if (PlatForm.ToLower() == "android" || PlatForm.ToLower() == "ios")
                    {
                        VendorApiType = (int)VendorApi_CommonHelper.KhaltiAPIName.Airlines_MyPay;
                    }

                    if (string.IsNullOrEmpty(resGetRecord.MemberId.ToString()))
                    {
                        msg = "Please enter Valid MemberId.";
                    }
                    else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                    {
                        msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                    }
                    if (string.IsNullOrEmpty(msg))
                    {
                        WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                        //string WalletType = string.Empty;
                        AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (Convert.ToDecimal(resGetRecord.TotalRewardPoints) < objOut.MPCoinsDebit))
                        {
                            msg = Common.InsufficientBalance_MPCoins;
                        }
                        else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins) && (WalletBalance < (Convert.ToDecimal(objOut.NetAmount) - objOut.MPCoinsDebit)))
                        {
                            msg = Common.InsufficientBalance;
                        }
                        else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) && WalletBalance < Convert.ToDecimal(objOut.NetAmount))
                        {
                            msg = Common.InsufficientBalance;
                        }

                        if (string.IsNullOrEmpty(msg))
                        {

                            // ***********************************************************************************************************//
                            // *** AMOUNT IS READONLY AND NOT TO BE PASSED -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
                            // ***********************************************************************************************************//
                            string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_PlasmaTech_LOOKUP(DeviceCode);

                            string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                            string CustomerId = resGetRecord.ContactNumber;
                            decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                            if (resGetRecord == null || resGetRecord.Id == 0)
                            {
                                msg = "MemberId not found";
                                JsonReq = String.Empty;
                            }
                            else if (resGetRecord.IsKYCApproved != (int)AddUser.kyc.Verified)
                            {
                                msg = Common.GetKycMessage(resGetRecord, Convert.ToDecimal(Amount));
                                if (!string.IsNullOrEmpty(msg))
                                {
                                    JsonReq = String.Empty;
                                }
                            }
                            if (string.IsNullOrEmpty(msg))
                            {
                                if (resGetRecord.IsActive == false)
                                {
                                    msg = "Your account is not active.";
                                    JsonReq = String.Empty;
                                }
                            }
                            if (!string.IsNullOrEmpty(JsonReq))
                            {
                                string TransactionUniqueId = string.Empty;
                                string URL = string.Empty;

                                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.PlasmaTech;
                                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();

                                if (PlatForm.ToLower() == "android" || PlatForm.ToLower() == "ios")
                                {
                                    VendorType = (int)VendorApi_CommonHelper.VendorTypes.PlasmaTech;
                                    VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                                }

                                string KhaltiAPIURL = string.Empty;
                                objVendor_API_Requests.Req_URL = "";
                                KhaltiAPIURL = objVendor_API_Requests.Req_URL;
                                objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(KhaltiAPIURL, Reference, resGetRecord.MemberId, MemberName, "", authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType, "", MemberId, "", Convert.ToString(VendorType));

                                //TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance, "", "", VendorType);

                                TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, bookingId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance, "", "", VendorType);
                                // string TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, ticketSrlNo, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance, "", "", VendorType);
                                objVendor_API_Requests.Res_TraceId = TransactionUniqueId;

                                IssueFlightRes issueFlightRes = new IssueFlightRes();
                                IssueTicketTwoWayRes issueTicketTwoWayRes = new IssueTicketTwoWayRes();
                                string VendorOutputResponse = string.Empty;
                                string jsonString = "";
                                if (msg == "success")
                                {
                                    //-----------need to call issueticket api-----------//
                                    GetVendor_API_Airlines_MyPay_Payment_Request objRes = new GetVendor_API_Airlines_MyPay_Payment_Request();

                                    string resp = "";
                                    string soapEnvelope = "";
                                    // Create the request

                                    

                                    //List<PassengerDetail> passengers = JsonConvert.DeserializeObject<List<PassengerDetail>>(passengerDetails);
                                    List<AddFlightPassengersDetails> paxDetailsList = VendorApi_CommonHelper.GetPaxDetailsList(bookingId);

                                    string combinedXml = ""; // Initialize an empty string
                                    foreach (var item in paxDetailsList)
                                    {
                                        PassengerDetail pd = new PassengerDetail();
                                        pd.PaxType = item.Type;
                                        pd.Title = item.Title;
                                        pd.Gender = item.Gender;
                                        pd.FirstName = item.Firstname;
                                        pd.LastName = item.Lastname;
                                        pd.Nationality = item.Nationality;
                                        if (item.Remarks == null || item.Remarks == "")
                                        {
                                            pd.Remarks = "Flight";
                                        }
                                        else
                                        {
                                            pd.Remarks = item.Remarks;
                                        }
                                        var xmlreq = GeneratePassengerXml(pd.PaxType, pd.Title, pd.Gender, pd.FirstName, pd.LastName, pd.Nationality, pd.Remarks);
                                        combinedXml += xmlreq;
                                    }

                                    if (contactEmail == null || contactEmail == "")
                                    {
                                        contactEmail = "info@mypay.com.np";
                                    }

                                    //int attemptCount = 0;

                                    //while (attemptCount < 2)
                                    //{
                                        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(Environment.GetEnvironmentVariable("PlasmaTech_EndPoint", EnvironmentVariableTarget.Machine));
                                        request.ContentType = "text/xml";
                                        request.Method = "POST";


                                      //  attemptCount++;

                                        try
                                        {
                                            soapEnvelope = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:book=\"http://booking.us.org/\">"
                                         + "<soapenv:Header/>"
                                         + "<soapenv:Body>"
                                         + "<book:IssueTicket>"
                                         //<!--Optional:-->
                                         + "<strFlightId>" + flightID + "</strFlightId>"
                                         // <!--Optional:-->
                                         + "<strReturnFlightId>" + returnFlightID + "</strReturnFlightId>"
                                         //<!--Optional:-->
                                         + "<strContactName>" + contactName + "</strContactName>"
                                         //<!--Optional:-->
                                         + "<strContactEmail>" + contactEmail + "</strContactEmail>"
                                         //<!--Optional:-->
                                         + "<strContactMobile>" + contactMobile + "</strContactMobile>"
                                         //<!--Optional:-->
                                         + "<strPassengerDetail><![CDATA[<?xml version=\"1.0\" ?><PassengerDetail>" + combinedXml + "</PassengerDetail>]]></strPassengerDetail>"
                                         + "</book:IssueTicket>"
                                         + "</soapenv:Body>"
                                         + "</soapenv:Envelope>";

                                            log.Info("Request sent to airlines: " + soapEnvelope);


                                            // Convert the SOAP envelope to bytes
                                            byte[] bytes = Encoding.UTF8.GetBytes(soapEnvelope);
                                            request.ContentLength = bytes.Length;

                                            // Write the SOAP envelope to the request stream
                                            using (Stream requestStream = request.GetRequestStream())
                                            {
                                                requestStream.Write(bytes, 0, bytes.Length);
                                            }
                                            var xmlresponsestring = "";
                                            // Get the response
                                            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                                            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                            {
                                                string responseString = reader.ReadToEnd();
                                                xmlresponsestring = RemoveAllNamespaces(responseString);
                                                XmlDocument doc = new XmlDocument();
                                                doc.LoadXml(xmlresponsestring);

                                                string JsonResponse = JsonConvert.SerializeXmlNode(doc);
                                                Root root = JsonConvert.DeserializeObject<Root>(JsonResponse);

                                                // Access the deserialized data
                                                string itineraryXML = root.Envelope.Body.IssueTicketResponse.@return;
                                                XDocument xmlDoc = XDocument.Parse(itineraryXML);
                                                jsonString = JsonConvert.SerializeXNode(xmlDoc);
                                            }

                                            var PNR = "";
                                            var ticketNo = "";


                                            if (!string.IsNullOrEmpty(flightID) && !string.IsNullOrEmpty(returnFlightID))//for twoway response
                                            {
                                                issueTicketTwoWayRes = JsonConvert.DeserializeObject<IssueTicketTwoWayRes>(jsonString);
                                                if (issueTicketTwoWayRes.Itinerary != null)
                                                {
                                                    var passengerDetail = issueTicketTwoWayRes.Itinerary;
                                                    resp = JsonConvert.SerializeObject(passengerDetail);
                                                }
                                                PNR = issueTicketTwoWayRes.Itinerary.Passenger[0].PnrNo;
                                                ticketNo = issueTicketTwoWayRes.Itinerary.Passenger[0].TicketNo;
                                                VendorOutputResponse = resp;
                                                objResPayment.Data = jsonString;//JsonConvert.DeserializeObject<IssueTicketTwoWayResp>(jsonString);

                                            }
                                            else  //for oneway response
                                            {
                                                if (jsonString.Contains("[") && jsonString.Contains("]"))
                                                {
                                                    issueTicketTwoWayRes = JsonConvert.DeserializeObject<IssueTicketTwoWayRes>(jsonString);
                                                    if (issueTicketTwoWayRes.Itinerary != null)
                                                    {
                                                        var passengerDetail = issueTicketTwoWayRes.Itinerary;
                                                        resp = JsonConvert.SerializeObject(passengerDetail);
                                                    }
                                                    PNR = issueTicketTwoWayRes.Itinerary.Passenger[0].PnrNo;
                                                    ticketNo = issueTicketTwoWayRes.Itinerary.Passenger[0].TicketNo;
                                                }
                                                else
                                                {
                                                    issueFlightRes = JsonConvert.DeserializeObject<IssueFlightRes>(jsonString);
                                                    if (issueFlightRes.Itinerary != null)
                                                    {
                                                        var passengerDetail = issueFlightRes.Itinerary;
                                                        resp = JsonConvert.SerializeObject(passengerDetail);
                                                    }
                                                    PNR = issueFlightRes.Itinerary.Passenger.PnrNo;
                                                    ticketNo = issueFlightRes.Itinerary.Passenger.TicketNo;
                                                }

                                                VendorOutputResponse = resp;
                                                objResPayment.Data = jsonString;//JsonConvert.DeserializeObject<IssueTicketResp>(jsonString);
                                            }
                                            ///


                                            if (VendorOutputResponse.Contains("TicketNo"))
                                            {
                                                objVendor_API_Requests = VendorApi_CommonHelper.UpdateVendorResponse(KhaltiAPIURL, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, soapEnvelope, xmlresponsestring, request.Address.OriginalString);
                                                //objVendor_API_Requests.Res_Khalti_State = "Success";
                                                if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success")
                                                {
                                                    //ndorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID,  BankTransactionId, WalletType, UniqueCustomerID, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                                                    msg = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, bookingId, "", "", 1, "", "", PNR);
                                                    if (msg.ToLower() == "success")
                                                    {
                                                        string Title = "Transaction Successfull";
                                                        string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                        Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                                    }
                                                }
                                                else {
                                                   // break;
                                                }
                                                //else
                                                //{
                                                //    objVendor_API_Requests.Res_Khalti_State = "Failed";
                                                //    msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                                //}
                                            }
                                            //else
                                            //{
                                            //    objVendor_API_Requests.Res_Khalti_State = "Failed";
                                            //    msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                            //}
                                        }
                                        catch (WebException e)
                                        {
                                            if (e.Status == WebExceptionStatus.Timeout)
                                            {
                                                log.Info("Timeout error occurred while paying for flight: " + e.ToString());
                                                //break;
                                            }
                                            else
                                            {
                                                log.Info("Error occurred while paying for flight: " + e.ToString());
                                            }
                                            //else throw;
                                            //if (attemptCount == 2)
                                            //{
                                            //    throw;
                                            //}
                                        }
                                        catch (Exception ex)
                                        {
                                            objVendor_API_Requests.Res_Khalti_State = "Failed";
                                            if (ex.Message != null)
                                            {
                                                Common.AddLogs($"Error Log for (BookingId:{bookingId}) -(Message:- {ex.Message} by(MemberId:{MemberId}).", false, (int)AddLog.LogType.DBLogs);
                                            }
                                            //msg = Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                                            log.Info("Error occurred while paying for flight: " + ex.ToString());
                                            //break;
                                            //throw;
                                            //if (attemptCount == 2)
                                            //{
                                            //    throw;
                                            //}
                                        }
                                   // }
                                }
                            }

                            // **** Populate Values to be passed to Controller Action **** //
                            objResPayment.UniqueTransactionId = VendorApi_CommonHelper.UniqueTransactionId.ToString();
                            Id = VendorApi_CommonHelper.Id;
                        }
                    }
                }
            }

            return msg;

        }
        public static string RemoveAllNamespaces(string xmlDocument)
        {
            XElement xmlDocumentWithoutNs = RemoveAllNamespaces(XElement.Parse(xmlDocument));
            return xmlDocumentWithoutNs.ToString();
        }

        private static XElement RemoveAllNamespaces(XElement xmlDocument)
        {
            if (!xmlDocument.HasElements)
            {
                XElement xElement = new XElement(xmlDocument.Name.LocalName);
                xElement.Value = xmlDocument.Value;
                foreach (XAttribute attribute in xmlDocument.Attributes())
                    xElement.Add(attribute);

                return xElement;
            }
            return new XElement(xmlDocument.Name.LocalName, xmlDocument.Elements().Select(el => RemoveAllNamespaces(el)));
        }

        public static string FlightAvailabilitySearch(string userID, string password, string agencyId, string sectorFrom, string sectorTo, string flightDate, string returnDate, string tripType, string nationality, string adult, string child, string clientIP)
        {
            Res_Vendor_PlasmaTech_Flight_Available_Requests result = new Res_Vendor_PlasmaTech_Flight_Available_Requests();
            MyPay.org.usbooking.dev.UnitedSolutionsService PlasmaService = new MyPay.org.usbooking.dev.UnitedSolutionsService();
            string availableFlights = PlasmaService.FlightAvailability(userID, password, agencyId, sectorFrom, sectorTo, flightDate, returnDate, tripType, nationality, adult, child, clientIP);
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(availableFlights);

            string JsonResponse = JsonConvert.SerializeXmlNode(doc);

            return JsonResponse;
        }


        public static string FlightReservation(string flightID, string returnFlightID)
        {

            MyPay.org.usbooking.dev.UnitedSolutionsService PlasmaService = new MyPay.org.usbooking.dev.UnitedSolutionsService();
            string reservationResponse = PlasmaService.Reservation(flightID, returnFlightID);
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(reservationResponse);

            string JsonResponse = JsonConvert.SerializeXmlNode(doc);

            return JsonResponse;
        }
        public static string GetFlightSectorCode(string userId)
        {
            WebRes_FlightSector objResponse = new WebRes_FlightSector();
            MyPay.org.usbooking.dev.UnitedSolutionsService PlasmaService = new MyPay.org.usbooking.dev.UnitedSolutionsService();
            string SectorCodes = PlasmaService.SectorCode(userId);
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(SectorCodes);

            string JsonResponse = JsonConvert.SerializeXmlNode(doc);
            SectorCodeRootModel sectorCodeRoot = new SectorCodeRootModel();
            sectorCodeRoot = Newtonsoft.Json.JsonConvert.DeserializeObject<SectorCodeRootModel>(JsonResponse);
            List<sectors> objFligthSectorsList = new List<sectors>();
            for (int i = 0; i < sectorCodeRoot.FlightSector.Sector.Count; i++)
            {
                sectors objFligthSectors = new sectors();
                objFligthSectors.name = sectorCodeRoot.FlightSector.Sector[i].SectorName;
                objFligthSectors.code = sectorCodeRoot.FlightSector.Sector[i].SectorCode;
                objFligthSectors.is_active = true;
                objFligthSectors.is_national = true;
                objFligthSectors.is_international = false;

                objFligthSectorsList.Add(objFligthSectors);
            }
            return JsonConvert.SerializeObject(objFligthSectorsList); ;
        }

        public static string AddPassengerDetail(string memberId, string flightId, string bookingId, string passengersClassString, string FullName, string Mobile, string Email)
        {
            Common_Response _Response = new Common_Response();
            List<RootPassengerDetails> myDeserializedClass = JsonConvert.DeserializeObject<List<RootPassengerDetails>>(passengersClassString);

            AddFlightPassengersDetails res = new AddFlightPassengersDetails();

            bool IsUpdated = false;
            AddFlightBookingDetails resOut = new AddFlightBookingDetails();
            GetFlightBookingDetails_Plasma resIn = new GetFlightBookingDetails_Plasma();
            resIn.BookingId = Convert.ToInt64(bookingId);
            //resIn.Flightid = flightId;
            resIn.MemberId = Convert.ToInt64(memberId);
            resIn.CheckFlightBooked = 1;
            AddFlightBookingDetails resGetRecord = RepCRUD<GetFlightBookingDetails_Plasma, AddFlightBookingDetails>.GetRecord(Common.StoreProcedures.sp_FlightBookingDetails_Get_plasma, resIn, resOut);

            resGetRecord.ContactName = FullName;
            resGetRecord.ContactPhone = Mobile;
            resGetRecord.ContactEmail = Email;
            if (resGetRecord.Id > 0 || resGetRecord.Id != 0)
            {
                IsUpdated = RepCRUD<AddFlightBookingDetails, GetFlightBookingDetails>.Update(resGetRecord, "flightbookingdetails");
            }

            for (int i = 0; i < myDeserializedClass.Count; i++)
            {
                res.BookingId = Convert.ToInt64(bookingId);
                res.FlightId = flightId;
                res.Firstname = myDeserializedClass[i].FirstName;
                res.Lastname = myDeserializedClass[i].LastName;
                res.Nationality = myDeserializedClass[i].Nationality;
                res.Title = myDeserializedClass[i].Title;
                res.Type = myDeserializedClass[i].Type;
                res.Gender = myDeserializedClass[i].Gender;
                res.Remarks = myDeserializedClass[i].Remarks;
                res.CreatedDate = System.DateTime.UtcNow;
                res.UpdatedDate = System.DateTime.UtcNow;
                res.IsActive = true;
                res.IsDeleted = false;
                res.IsApprovedByAdmin = true;
                //res.CreatedBy = Common.GetCreatedById(authenticationToken);
                //res.CreatedByName = Common.GetCreatedByName(authenticationToken);

                Int64 Id = RepCRUD<AddFlightPassengersDetails, AddFlightPassengersDetails>.Insert(res, "flightpassengersdetails");
            }
            _Response.ReponseCode = 1;
            _Response.status = true;
            _Response.Message = "Success";
            _Response.Details = myDeserializedClass.Count.ToString() + " Passengers Added Successfully.";
            string response = JsonConvert.SerializeObject(_Response);
            return response;
        }

        private static object GeneratePassengerXml(string paxType, string title, string gender, string firstName, string lastName, string nationality, string remarks)
        {
            string xmlPaxDetail = $@"
                <Passenger>
                    <PaxType>{paxType}</PaxType>
                    <Title>{title}</Title>
                    <Gender>{gender}</Gender>
                    <FirstName>{firstName}</FirstName>
                    <LastName>{lastName}</LastName>
                    <Nationality>{nationality}</Nationality>
                    <PaxRemarks>{remarks}</PaxRemarks>
                </Passenger>";

            return xmlPaxDetail;
        }
        public class ReservationDetail
        {
            public List<PNRDetail> PNRDetail { get; set; }
        }

        public class ReservationRootTwoWay
        {
            public ReservationDetail ReservationDetail { get; set; }
        }

        public class Body
        {
            public IssueTicketResponse IssueTicketResponse { get; set; }
        }

        public class Envelope
        {
            public Body Body { get; set; }
        }

        public class IssueTicketResponse
        {
            public string @return { get; set; }
        }

        public class Root
        {
            public Envelope Envelope { get; set; }
        }
        public class Itinerary
        {
            public Passenger Passenger { get; set; }
        }

        public class Passenger
        {
            public string Airline { get; set; }
            public string PnrNo { get; set; }
            public string Title { get; set; }
            public string Gender { get; set; }
            public string FirstName { get; set; }
            public string LastName { get; set; }
            public string PaxNo { get; set; }
            public string PaxType { get; set; }
            public string Nationality { get; set; }
            public string PaxId { get; set; }
            public string IssueFrom { get; set; }
            public string AgencyName { get; set; }
            public string IssueDate { get; set; }
            public string IssueBy { get; set; }
            public string FlightNo { get; set; }
            public string FlightDate { get; set; }
            public string Departure { get; set; }
            public string FlightTime { get; set; }
            public string TicketNo { get; set; }
            public string BarCodeValue { get; set; }
            public string BarcodeImage { get; set; }
            public string Arrival { get; set; }
            public string ArrivalTime { get; set; }
            public string Sector { get; set; }
            public string ClassCode { get; set; }
            public string Currency { get; set; }
            public string Fare { get; set; }
            public string Surcharge { get; set; }
            public string TaxCurrency { get; set; }
            public string Tax { get; set; }
            public string CommissionAmount { get; set; }
            public string Refundable { get; set; }
            public string Invoice { get; set; }
            public string ReportingTime { get; set; }
            public string FreeBaggage { get; set; }
        }

        public class IssueFlightRes
        {
            public Itinerary Itinerary { get; set; }
        }
        public class PassengerDetail
        {
            public string PaxType { get; set; }
            public string Title { get; set; }
            public string Gender { get; set; }
            public string FirstName { get; set; }
            public string LastName { get; set; }
            public string Nationality { get; set; }
            public string Remarks { get; set; }
        }

        public class PassengerDetails
        {
            public List<PassengerDetail> PassengerDetail { get; set; }
        }
        // 
        public class RootPassengerDetails
        {
            public string FirstName { get; set; }
            public string LastName { get; set; }
            public string Type { get; set; }
            public string Title { get; set; }
            public string Gender { get; set; }
            public string Nationality { get; set; }
            public string Remarks { get; set; }
        }

        #endregion

        #region Organization ,Event
        public static GetDataFromOrganization RequestOrganization(string Reference, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromOrganization obj = new GetDataFromOrganization();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.organization_events;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.Organization;
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string APIURL = "RegistrationForm/ReadOrganization";
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, Reference, MemberId, MemberName, "", authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.GetMethod_OrganizationDetails(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, "");
                }
                catch (WebException e)
                {
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error OrganizationPost: ApiName " + VendorApi_CommonHelper.Organization_URL_Prefix_localhost + ". Request: " + "" + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
                Common.AddLogs($"OrganizationPost URL: {VendorApi_CommonHelper.Organization_URL_Prefix_localhost}, Request {""}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, "", DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);
            }
            obj.message = msg;
            return obj;
        }
        public static GetDataFromOrganization RequestEventList(string Reference, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromOrganization obj = new GetDataFromOrganization();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.organization_events;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.Organization;
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string APIURL = "RegistrationForm/EventList";
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, Reference, MemberId, MemberName, "", authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.GetMethod_OrganizationDetails(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, "");
                }
                catch (WebException e)
                {
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error OrganizationPost: ApiName " + VendorApi_CommonHelper.Organization_URL_Prefix_localhost + ". Request: " + "" + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
                Common.AddLogs($"OrganizationPost URL: {VendorApi_CommonHelper.Organization_URL_Prefix_localhost}, Request {""}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, "", DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);
            }
            obj.message = msg;
            return obj;
        }
        public static GetDataFromOrganization RequestRegistrationData(string Reference, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromOrganization obj = new GetDataFromOrganization();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.organization_events;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.Organization;
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string APIURL = "RegistrationForm";
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, Reference, MemberId, MemberName, "", authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.GetMethod_OrganizationDetails(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, "");
                }
                catch (WebException e)
                {
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error OrganizationPost: ApiName " + VendorApi_CommonHelper.Organization_URL_Prefix_localhost + ". Request: " + "" + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
                Common.AddLogs($"OrganizationPost URL: {VendorApi_CommonHelper.Organization_URL_Prefix_localhost}, Request {""}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, "", DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);
            }
            obj.message = msg;
            return obj;
        }
        public static GetDataFromOrganization PostRegistrationData(string Reference, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType, string data)
        {
            GetDataFromOrganization obj = new GetDataFromOrganization();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            if (string.IsNullOrEmpty(msg))
            {
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.organization_events;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.Organization;
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string APIURL = "RegistrationForm";
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, Reference, MemberId, MemberName, "", authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.PostMethod_RegistrationDetails(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, data);
                }
                catch (WebException e)
                {
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error OrganizationPost: ApiName " + VendorApi_CommonHelper.Organization_URL_Prefix_localhost + ". Request: " + "" + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;
                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                }
                Common.AddLogs($"OrganizationPost URL: {VendorApi_CommonHelper.Organization_URL_Prefix_localhost}, Request {""}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(VendorApi_CommonHelper.Organization_URL_Prefix_localhost + APIURL, "", DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);
            }
            obj.message = msg;
            return obj;
        }

        #endregion



        #region  NepalPayQR   
        public static GetDataFromNepalQRPay AuthenticationNepalPayQR(string Version, string DeviceCode, string PlatForm, Int64 MemberId, string value, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromNepalQRPay obj = new GetDataFromNepalQRPay();
            string msg = string.Empty;
            if (value != "Refund")
            {
                if (string.IsNullOrEmpty(Version))
                {
                    msg = "Please enter Version.";
                }
                else if (string.IsNullOrEmpty(DeviceCode))
                {
                    msg = "Please enter DeviceCode.";
                }
                else if (string.IsNullOrEmpty(PlatForm))
                {
                    msg = "Please enter PlatForm.";
                }
            }
            var username = string.Empty;
            var password = string.Empty;
            var granttype = string.Empty;
            var apitokenurl = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {
                username = VendorApi_CommonHelper.NepalPayQR_userAuth_username_live;
                password = VendorApi_CommonHelper.NepalPayQR_userAuth_password_live;
                granttype = VendorApi_CommonHelper.NepalPayQR_userAuth_grant_type_live;
                apitokenurl = VendorApi_CommonHelper.NepalPayQR_URL_Prefix_live_token;
            }
            else
            {
                username = VendorApi_CommonHelper.NepalPayQR_userAuth_username;
                password = VendorApi_CommonHelper.NepalPayQR_userAuth_password;
                granttype = VendorApi_CommonHelper.NepalPayQR_userAuth_grant_type;
                apitokenurl = VendorApi_CommonHelper.NepalPayQR_URL_Prefix_localhost;
            }

            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.NepalPay_QR_Payments;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.NCHLQR;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "oauth/token";
            if (string.IsNullOrEmpty(msg))
            {
                //string urlParameters = "username=" +username+ "&password=" +password + "&grant_type=" +granttype;
                var jsonData = new NepalQRAuthjsonrequest
                {
                    username = username,
                    password = password,
                    grant_type = granttype
                };
                var data = JsonConvert.SerializeObject(jsonData);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(apitokenurl + KhaltiAPIURL, "", MemberId, "", data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", apitokenurl + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);

                try
                {
                    msg = VendorApi_CommonHelper.PostMethod_NepalPayQRAuth(apitokenurl + KhaltiAPIURL, data, true);

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error NepalPayQRAuthPost: ApiName " + apitokenurl + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"NepalPayQRAuthPost URL: {apitokenurl}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                if (authenticationToken!="admin")
                {
                    VendorApi_CommonHelper.UpdateVendorResponse(apitokenurl + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

                }

            }
            obj.message = msg;
            return obj;
        }

        public static GetDataFromNepalQRPay GetRequestIssuerToNPI(string instructionId, string qrString, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType, string AuthorizationKey)
        {
            GetDataFromNepalQRPay obj = new GetDataFromNepalQRPay();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(instructionId))
            {
                msg = "InstructionId is required.";
            }
            else if (string.IsNullOrEmpty(qrString))
            {
                msg = "QR reader is rquired.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }

            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.NepalPay_QR_Payments;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.NCHLQR;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "nQR/v1/validate";
            var apiurl = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {
                apiurl = VendorApi_CommonHelper.NepalPayQR_URL_Prefix_live;
            }
            else
            {
                apiurl = VendorApi_CommonHelper.NepalPayQR_URL_Prefix_localhost;
            }
            if (string.IsNullOrEmpty(msg))
            {
                var jsonData = new jsonrequest_IssuerToNPI
                {
                    instructionId = instructionId,
                    qrString = qrString

                };
                var data = JsonConvert.SerializeObject(jsonData);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(apiurl + KhaltiAPIURL, "", MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", apiurl + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);

                try
                {
                    msg = VendorApi_CommonHelper.PostMethod_NepalPayQR(apiurl + KhaltiAPIURL, data, AuthorizationKey);

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error NepalPayQRValidateIssuertoNPIPost: ApiName " + apiurl + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"NepalPayQRValidateIssuertoNPIPost URL: {apiurl}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(apiurl + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

            }
            obj.message = msg;
            return obj;
        }
        public static GetDataFromNepalQRPay GetRequestIssuerToNPI_Payment(string Version, string DeviceCode, string PlatForm,
                            Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType,
                            ValidateResponse model, string tokenstring, string encryptedNCHLmerchantpan, AddCouponsScratched resCoupon,
                            ref string TransactionID, string BankTransactionId, string WalletType,
                             string UniqueTransactionId, AddUserLoginWithPin resGetRecord, string payerPanId, string payerMobileNumber, string token)
        {
            GetDataFromNepalQRPay obj = new GetDataFromNepalQRPay();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            else if (string.IsNullOrEmpty(Convert.ToString(model.amount)))
            {
                msg = "Amount is required.";
            }
            else if (string.IsNullOrEmpty(WalletType))
            {
                msg = "Payment type is required.";
            }
            else if (string.IsNullOrEmpty(Convert.ToString(MemberId)))
            {
                msg = "Member Id is required.";
            }

            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.NepalPay_QR_Payments;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.NCHLQR;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "nQR/v1/payment";
            var apiurl = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {
                apiurl = VendorApi_CommonHelper.NepalPayQR_URL_Prefix_live;
            }
            else
            {
                apiurl = VendorApi_CommonHelper.NepalPayQR_URL_Prefix_localhost;
            }
            if (string.IsNullOrEmpty(msg))
            {
                var jsonData = new NPITOAcquierJsonRequest
                {
                    validationTraceId = model.validationTraceId,
                    instructionId = model.instructionId,
                    acquirerId = model.acquirerId,
                    acquirerCountryCode = model.acquirerCountryCode,
                    merchantPan = encryptedNCHLmerchantpan,
                    merchantCategoryCode = model.merchantCategoryCode,
                    qrType = model.qrType,
                    amount = Convert.ToDecimal(model.amount),
                    transactionFee = Convert.ToDecimal(model.transactionFee),
                    interchangeFee = Convert.ToDecimal(model.interchangeFee),
                    network = model.network,
                    currencyCode = model.currencyCode,
                    merchantBillNo = model.merchantBillNo,
                    merchantTxnRef = model.merchantTxnRef,
                    merchantCountryCode = model.merchantCountryCode,
                    merchantCity = model.merchantCity,
                    merchantName = model.merchantName,
                    terminal = model.terminal,
                    encKeySerial = model.encKeySerial,
                    token = tokenstring,
                    //token = tokenstring,
                    issuerId = model.issuerId,
                    payerName = model.payerName,
                    payerPanId = payerPanId,
                    payerMobileNumber = payerMobileNumber,
                    debtorAccount = model.debtorAccount,
                    debtorAgent = model.debtorAgent,
                    debtorAgentBranch = model.debtorAgentBranch,
                    localTransactionDateTime = model.localTransactionDateTime,
                    instrument = model.instrument,
                    narration = model.narration

                };
                var data = JsonConvert.SerializeObject(jsonData);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(apiurl + KhaltiAPIURL, "", MemberId, MemberName, data, token, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", apiurl + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);

                string ticketSrlNo = model.instructionId;
                objVendor_API_Requests.Res_Khalti_Id = model.instructionId;
                objVendor_API_Requests.Req_ReferenceNo = new CommonHelpers().GenerateUniqueId();
                //--start insert into wallet transaction table (Customer)--//
                decimal amount = 0;
                if (Convert.ToDecimal(model.transactionFee) > 0)
                {
                    amount = Convert.ToDecimal(model.amount) + Convert.ToDecimal(model.transactionFee);
                }
                else
                {
                    amount = Convert.ToDecimal(model.amount);
                }
                string TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, model.merchantName, Convert.ToString(amount), out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance, "", "", VendorType);
                obj.TransactionId = TransactionUniqueId;
                if (string.IsNullOrEmpty(obj.TransactionId))
                {
                    obj.message = "Transaction Not Saved";
                    return obj;
                }


                try
                {
                    msg = VendorApi_CommonHelper.PostMethod_NepalPayQR(apiurl + KhaltiAPIURL, data, authenticationToken);

                    VendorApi_CommonHelper.UpdateVendorResponse(apiurl + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg, "");
                    if (!string.IsNullOrEmpty(msg))
                    {
                        PaymentResponse result = JsonConvert.DeserializeObject<PaymentResponse>(msg.ToString());
                        if (result.responseCode == "000")
                        {
                            MyPay.Models.Common.CommonHelpers commonHelpers = new MyPay.Models.Common.CommonHelpers();
                            string Result = commonHelpers.GetScalarValueWithValue(" update  NepalPayQR  set  nQrTxnId='" + result.nQrTxnId + "',sessionSrlNo='" + result.sessionSrlNo + "'," +
                                           "creditStatus='" + result.creditStatus + "',debitStatus='" + result.debitStatus + "',debitDescription='" + result.debitDescription + "',NepalPayQRTxnDatetime='" + result.rcreTime + "'     where  instructionId='" + model.instructionId + "'");

                            bool IsCouponUnlocked = false;
                            objVendor_API_Requests.Res_Khalti_Status = true;
                            var res = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, "", "", "", 0, "", "", result.nQrTxnId);
                            if (res.ToLower() == "success")
                            {
                                string Title = "Transaction successfull";
                                string Message = $"Bill payment of amount Rs.{model.amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                                                                                                                      //string Message = "TransactionId " + objVendor_API_Requests.TransactionUniqueId + " success for " + VendorApiTypeName;
                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                            }
                        }
                        else
                        {
                            //objVendor_API_Requests.Res_Khalti_Status = 0;
                            PaymentResponse Failedresult = JsonConvert.DeserializeObject<PaymentResponse>(Convert.ToString(msg));
                            objVendor_API_Requests.Res_Khalti_State = "failed";
                            objVendor_API_Requests.Res_Khalti_Message = string.IsNullOrEmpty(Failedresult.responseMessage) ? Failedresult.responseDescription : Failedresult.responseMessage;
                            Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                        }

                    }


                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error NepalPayQRPaymentIssuertoNPIPost: ApiName " + apiurl + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"NepalPayQRPaymentIssuertoNPIPost URL: {apiurl}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);

            }
            obj.message = msg;
            return obj;
        }


        public static GetDataFromNepalQRPay GetRequestCheckstatus(string TransactionID, string Req_ReferenceNo, string Type, string MemberId,
           string authenticationToken, string UserInput, string Version, string DeviceCode, string PlatForm,
           ref GetVendor_API_TransactionLookup objRes, ref AddVendor_API_Requests objVendor_API_Requests,
           string instructionId, string validationtraceid, string issuerId, string merchantid, string nQrTxnId, int VendorApiType,
           string AuthorizationKey)
        {
            GetDataFromNepalQRPay obj = new GetDataFromNepalQRPay();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(instructionId))
            {
                msg = "Please enter instruction id.";
            }
            else if (string.IsNullOrEmpty(validationtraceid))
            {
                msg = "validation trace id is required.";
            }
            else if (string.IsNullOrEmpty(issuerId))
            {
                msg = "QR reader is issuerId id.";
            }
            else if (string.IsNullOrEmpty(merchantid))
            {
                msg = "Please enter merchant id.";
            }

            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }

            else if (string.IsNullOrEmpty(Convert.ToString(MemberId)) || Convert.ToString(MemberId) == "0")
            {
                msg = "Please enter MemberId.";
            }


            if (string.IsNullOrEmpty(msg))
            {
                var apiurl = string.Empty;

                string LookupURL = $"{VendorApi_CommonHelper.Vendor_Lookup_URL_Prefix}status?token={VendorApi_CommonHelper.Req_TokenLive}&reference={Req_ReferenceNo}";

                if (Common.ApplicationEnvironment.IsProduction == false)
                {
                    apiurl = VendorApi_CommonHelper.NepalPayQR_URL_Prefix_localhost;
                    LookupURL = $"{VendorApi_CommonHelper.Vendor_Lookup_URL_Prefix_localhost}status?token={VendorApi_CommonHelper.Req_TokenLive_localhost}&reference={Req_ReferenceNo}";

                }
                else
                {
                    apiurl = VendorApi_CommonHelper.NepalPayQR_URL_Prefix_live;
                }
                AddUserLoginWithPin outobject = new AddUserLoginWithPin();
                GetUserLoginWithPin inobject = new GetUserLoginWithPin();
                inobject.MemberId = Convert.ToInt64(MemberId);
                AddUserLoginWithPin resGetRecord = RepCRUD<GetUserLoginWithPin, AddUserLoginWithPin>.GetRecord(Common.StoreProcedures.sp_Users_GetLoginWithPin, inobject, outobject);
                if (resGetRecord == null || resGetRecord.Id == 0)
                {
                    msg = "Invalid MemberId";
                }
                //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest_Transaction_Lookup(Req_ReferenceNo);

                string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
                decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                if (resGetRecord == null || resGetRecord.Id == 0)
                {
                    msg = "MemberId not found";

                }
                else
                {
                    if (resGetRecord.IsActive == false)
                    {
                        msg = "Your account is not active.";

                    }
                }
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.NepalPay_QR_Payments;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.NCHLQR;
                //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string KhaltiAPIURL = "nQR/v1/merchanttxnreport";


                WalletTransactions objWalletTrans = new WalletTransactions();
                objWalletTrans.Reference = Req_ReferenceNo;
                objWalletTrans.Type = Convert.ToInt32(Type);
                objWalletTrans.MemberId = Convert.ToInt64(MemberId);
                objWalletTrans.Sign = (int)WalletTransactions.Signs.Credit;
                objWalletTrans.Status = (int)WalletTransactions.Statuses.Refund;
                if (objWalletTrans.GetRecord())
                {
                    msg = "Refund already initiated";
                }
                else
                {
                    // *************** CHECK IF ANY OTHER TRANSACTION WITH SAME REFERENCE NO. AS SUCCESS ********************//
                    WalletTransactions objtransChkSuccess = new WalletTransactions();
                    objtransChkSuccess.Reference = Req_ReferenceNo;
                    objtransChkSuccess.Type = Convert.ToInt32(Type);
                    objtransChkSuccess.MemberId = Convert.ToInt64(MemberId);
                    objtransChkSuccess.Status = (int)WalletTransactions.Statuses.Success;
                    if (objtransChkSuccess.GetRecord())
                    {
                        msg = $"Already success TransactionID: {objtransChkSuccess.TransactionUniqueId} found with Reference no {objtransChkSuccess.Reference}.";
                    }
                    else
                    {
                        objWalletTrans = new WalletTransactions();
                        objWalletTrans.TransactionUniqueId = TransactionID;
                        objWalletTrans.Reference = Req_ReferenceNo;
                        objWalletTrans.Type = Convert.ToInt32(Type);
                        objWalletTrans.MemberId = Convert.ToInt64(MemberId);
                        objWalletTrans.Sign = (int)WalletTransactions.Signs.Debit;
                        if (objWalletTrans.GetRecord())
                        {
                            var jsonData = new NepalQRCheckStatusJson
                            {
                                instructionId = instructionId,
                                //validationtraceid = validationtraceid,
                                //nQrTxnId = nQrTxnId,
                                issuerId = issuerId,
                                merchantId = merchantid,

                            };
                            var data = JsonConvert.SerializeObject(jsonData);
                            objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(apiurl + KhaltiAPIURL, "", Convert.ToInt64(MemberId), MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", apiurl + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                            obj.Id = Convert.ToString(objVendor_API_Requests.Id);

                            try
                            {
                                msg = VendorApi_CommonHelper.PostMethod_NepalPayQR(apiurl + KhaltiAPIURL, data, AuthorizationKey);
                                var dataresponse = JsonConvert.DeserializeObject<NepalQRCheckStatusResponse>(msg);


                                if (dataresponse.responseCode == "200")
                                {
                                    string jsonString = JsonConvert.SerializeObject(dataresponse.responseBody);
                                    List<responsecheckstatus> dataresponsestatus = JsonConvert.DeserializeObject<List<responsecheckstatus>>(jsonString);
                                    if ((dataresponsestatus[0].debitStatus == "000") && (dataresponsestatus[0].creditStatus.ToUpper() == "DEFER" || dataresponsestatus[0].creditStatus == "000" || dataresponsestatus[0].creditStatus == "999")) //success case
                                    {
                                        // *********************************************************************
                                        // ***************  UPDATE TRANSACTION STATUS HERE.***************  
                                        // *********************************************************************
                                        objWalletTrans = new WalletTransactions();
                                        objWalletTrans.TransactionUniqueId = TransactionID;
                                        objWalletTrans.Reference = Req_ReferenceNo;
                                        objWalletTrans.Type = Convert.ToInt32(Type);
                                        if (objWalletTrans.GetRecord())
                                        {
                                            objWalletTrans.Status = objWalletTrans.GetTransactionStatusEnum(dataresponse.responseStatus);
                                            if (objWalletTrans.Status == 1)
                                            {
                                                objWalletTrans.GatewayStatus = "success";
                                            }

                                            objWalletTrans.Remarks = Common.GetTransactionRemarks(objWalletTrans.Type, objWalletTrans.TransactionAmount, objWalletTrans.CustomerID);// "Successfully Completed Transaction";
                                            objWalletTrans.Description = Common.GetTransactionRemarks(objWalletTrans.Type, objWalletTrans.TransactionAmount, objWalletTrans.CustomerID);//$"Transaction Completed successfully on {Common.fnGetdatetime()} for Req_ReferenceNo: {Req_ReferenceNo}";
                                            objWalletTrans.UpdatedDate = System.DateTime.UtcNow;
                                            if (!string.IsNullOrEmpty(objRes.response_id))
                                            {
                                                objWalletTrans.VendorTransactionId = objRes.response_id;
                                            }
                                            //objWalletTrans.Update();
                                            if (objWalletTrans.Update())
                                            {
                                                objWalletTrans.Id = 0;
                                                objWalletTrans.CurrentBalance = WalletBalance;
                                                objWalletTrans.AddCashBack();
                                                Common.AssignCoupons(resGetRecord.MemberId, objWalletTrans.TransactionUniqueId);
                                                VendorApi_CommonHelper.DistributeComission(objWalletTrans, resGetRecord, VendorApiTypeName, objVendor_API_Requests);

                                            }
                                            Common.AddLogs(objWalletTrans.Description, true, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(MemberId), "", true, PlatForm, DeviceCode);
                                        }
                                    }


                                }
                                //else if (dataresponse.responseCode == "E010")
                                //{
                                //    msg = dataresponse.responseDescription;
                                //}

                                else     //failed case                            
                                {

                                    // *********************************************************************
                                    //***************   REFUND TRANSACTION AMOUNT HERE. ***************  
                                    // *********************************************************************
                                    decimal CurrentBalance = 0;
                                    outobject = new AddUserLoginWithPin();
                                    inobject = new GetUserLoginWithPin();
                                    inobject.MemberId = Convert.ToInt64(MemberId);
                                    resGetRecord = RepCRUD<GetUserLoginWithPin, AddUserLoginWithPin>.GetRecord(Common.StoreProcedures.sp_Users_GetLoginWithPin, inobject, outobject);
                                    if (resGetRecord != null || resGetRecord.Id != 0)
                                    {
                                        CurrentBalance = resGetRecord.TotalAmount;
                                    }
                                    objWalletTrans = new WalletTransactions();
                                    objWalletTrans.TransactionUniqueId = TransactionID;
                                    objWalletTrans.Reference = Req_ReferenceNo;
                                    objWalletTrans.Type = Convert.ToInt32(Type);                           
                                    objWalletTrans.GatewayStatus = "failed";
                                    if (objWalletTrans.GetRecord())
                                    {
                                        // ********************************************************************************************
                                        // ************************* UPDATE OLD TRANSACTION STATUS ************************************ 
                                        // ********************************************************************************************
                                        string ParentTransactionId = objWalletTrans.TransactionUniqueId;
                                        objWalletTrans.Status = objWalletTrans.GetTransactionStatusEnum("failed");
                                        objWalletTrans.GatewayStatus = "failed";
                                        objWalletTrans.Description = dataresponse.responseDescription;
                                        if (objWalletTrans.Update())
                                        {

                                            WalletTransactions objWalletTransCheck = new WalletTransactions();
                                            objWalletTransCheck.ParentTransactionId = objWalletTrans.TransactionUniqueId;
                                            objWalletTransCheck.Type = Convert.ToInt32(objWalletTrans.Type);
                                            objWalletTransCheck.MemberId = Convert.ToInt64(objWalletTrans.MemberId);
                                            objWalletTransCheck.Sign = (int)WalletTransactions.Signs.Credit;
                                            objWalletTransCheck.Status = (int)WalletTransactions.Statuses.Refund;
                                            if (!objWalletTransCheck.GetRecordCheckExists())
                                            {

                                                WalletTransactions objWalletTransCheckBankRefund = new WalletTransactions();
                                                objWalletTransCheckBankRefund.ParentTransactionId = objWalletTrans.ParentTransactionId;
                                                objWalletTransCheckBankRefund.MemberId = Convert.ToInt64(objWalletTrans.MemberId);
                                                objWalletTransCheckBankRefund.Sign = (int)WalletTransactions.Signs.Credit;
                                                objWalletTransCheckBankRefund.Status = (int)WalletTransactions.Statuses.Refund;
                                                //if (!objWalletTransCheckBankRefund.GetRecordCheckExists())
                                                //{
                                                    // **************************************************************************************************
                                                    // ********* CREDIT REFUND WITH PARENT TRANSACTION ID AND SAVE STATUS AS REFUND ********** 
                                                    // **************************************************************************************************
                                                    objWalletTrans.Id = 0;
                                                    objWalletTrans.Sign = (int)WalletTransactions.Signs.Credit;
                                                    objWalletTrans.Amount = objWalletTrans.Amount + objWalletTrans.ServiceCharge;
                                                    objWalletTrans.ParentTransactionId = ParentTransactionId;
                                                    objWalletTrans.VendorTransactionId = new CommonHelpers().GenerateUniqueId();
                                                    objWalletTrans.Status = (int)WalletTransactions.Statuses.Refund;
                                                    objWalletTrans.Remarks = "Refund Credit for Failed Transaction " + objWalletTrans.TransactionUniqueId;
                                                    objWalletTrans.Description = "Transaction Failed on " + Common.fnGetdatetime();
                                                    objWalletTrans.CurrentBalance = CurrentBalance + objWalletTrans.Amount + objWalletTrans.ServiceCharge;
                                                    objWalletTrans.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                                                    objWalletTrans.CreatedDate = System.DateTime.UtcNow;
                                                    objWalletTrans.UpdatedDate = System.DateTime.UtcNow;
                                                    objWalletTrans.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                                                    objWalletTrans.VendorType = VendorType;
                                                    objWalletTrans.GatewayStatus = WalletTransactions.Statuses.Success.ToString();
                                                    objWalletTrans.Add();
                                                    Common.AddLogs(objWalletTrans.Remarks + " in TransactionID:" + objWalletTrans.TransactionUniqueId, true, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(MemberId), "", true, PlatForm, DeviceCode);
                                                //}
                                            }
                                        }
                                    }
                                }





                            }
                            catch (WebException e)
                            {
                                obj.IsException = true;
                                if (e.Response == null && e.Message != null)
                                {
                                    Common.AddLogs("Error NepalPayQRCheckStatus: ApiName " + apiurl + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                                    msg = e.Message;

                                }
                                else
                                {
                                    using (WebResponse response = e.Response)
                                    {
                                        HttpWebResponse httpResponse = (HttpWebResponse)response;
                                        Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                                        using (Stream Edata = response.GetResponseStream())
                                        using (var reader = new StreamReader(Edata))
                                        {
                                            msg = reader.ReadToEnd();
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                msg = ex.Message;
                                obj.IsException = true;
                            }

                            Common.AddLogs($"NepalPayQRCheckStatus URL: {apiurl}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                            VendorApi_CommonHelper.UpdateVendorResponse(apiurl + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

                        }
                        else
                        {
                            msg = "Data Not Found";
                        }
                    }

                }

            }
            obj.message = msg;
            return obj;
        }




        #endregion

        #region Tourist Bus

        public static GetDataFromBusSewa Get_TouristBus_ROUTES_RequestService(string Reference, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
        
            var url = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {
               
               url = VendorApi_CommonHelper.TouristBus_URL_Prefix_live;
            }
            else
            {
               
                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_localhost;
            }
            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.tourist_bus;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.TouristBus;
            // string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "fetchroute/";

            if (string.IsNullOrEmpty(msg))
            {
                //var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, Reference, MemberId, MemberName, Data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", VendorApi_CommonHelper.BusSewa_URL_Prefix_localhost + KhaltiAPIURL, "", 0);

                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(url + KhaltiAPIURL, Reference, MemberId, MemberName, "", authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", url + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.GetMethod_TouristBus(url + KhaltiAPIURL, "");
                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error TouristBusPost: ApiName " + url + ". Request: " + "" + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        obj.IsException = true;
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"TouristBusPost URL: {url}, Request {""}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);


                VendorApi_CommonHelper.UpdateVendorResponse(url + KhaltiAPIURL, "", DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);
            }
            obj.message = msg;
            return obj;
        }


        public static GetDataFromBusSewa Get_TouristBus_TRIP_RequestService(string Reference, string BoardingFrom, string ArrivalTo, string Date, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(BoardingFrom))
            {
                msg = "Please enter BoardingFrom.";
            }
            else if (string.IsNullOrEmpty(ArrivalTo))
            {
                msg = "Please enter ArrivalTo.";
            }

            else if (string.IsNullOrEmpty(Date))
            {
                msg = "Please enter Date.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            var url = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_live;
            }
            else
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_localhost;
            }
            if (string.IsNullOrEmpty(msg))
            {
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.tourist_bus;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.TouristBus;
                //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string KhaltiAPIURL = "fetchbus/";
                string tripdata = string.Empty;
                var queryParam = new Dictionary<string, string>() {
                 { "from_location",BoardingFrom  },
                 { "to_location", ArrivalTo } ,
                { "date", Date }
                 };
                //var jsonData = new Tourist_TripDetail
                //{
                //    from_location = BoardingFrom,
                //    to_location = ArrivalTo,
                //    date = Date
                //};
                var data = JsonConvert.SerializeObject(queryParam);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(url + KhaltiAPIURL, Reference, MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", url + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.PostMethod_TouristBus(url + KhaltiAPIURL, queryParam);

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error TouristBusPost: ApiName " + url + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"TouristBusPost URL: {url}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(url + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

            }
            obj.message = msg;
            return obj;
        }

        public static GetDataFromBusSewa Get_TouristBus_BOOKSEAT_RequestService(string Reference, string Id, string seat, string totalSeat, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(Id))
            {
                msg = "Please provide bus Id.";
            }
            else if (string.IsNullOrEmpty(Convert.ToString(seat)))
            {
                msg = "Please provide bus ticket number.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            var url = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_live;
            }
            else
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_localhost;
            }
            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.tourist_bus;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.TouristBus;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "seathold/";
            if (string.IsNullOrEmpty(msg))
            {
                var queryParam = new Dictionary<string, string>() {
                 { "seat",seat  },
                 { "totalseat", totalSeat } ,
                { "busno", Id }
                 };
                var data = JsonConvert.SerializeObject(queryParam);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(url + KhaltiAPIURL, Reference, MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", url + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);

                try
                {
                    msg = VendorApi_CommonHelper.PostMethod_TouristBus(url + KhaltiAPIURL, queryParam);

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error TouristBusPost: ApiName " + url + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"TouristBusPost URL: {url}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(url + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

            }
            obj.message = msg;
            return obj;
        }

        public static GetDataFromBusSewa Get_TouristBus_Cancel_RequestService(string Reference, string holdingnumber, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(holdingnumber))
            {
                msg = "Ticket no is required.";
            }

            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            var url = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_live;
            }
            else
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_localhost;
            }
            if (string.IsNullOrEmpty(msg))
            {
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.tourist_bus;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.TouristBus;
                //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string KhaltiAPIURL = "cancelholdingseat/";
                string tripdata = string.Empty;
                var queryParam = new Dictionary<string, string>() {
                 { "holdingnumber",holdingnumber  }

                 };

                var data = JsonConvert.SerializeObject(queryParam);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(url + KhaltiAPIURL, Reference, MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", url + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.PostMethod_TouristBus(url + KhaltiAPIURL, queryParam);

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error TouristBusPost: ApiName " + url + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"TouristBusPost URL: {url}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(url + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

            }
            obj.message = msg;
            return obj;
        }

        public static GetDataFromBusSewa Get_TouristBus_PASSENGERDETAILS_RequestService(string Reference, string name, string contact, string pickup, string drop, string TicketNo, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(name))
            {
                msg = "Please enter name.";
            }
            else if (string.IsNullOrEmpty(contact))
            {
                msg = "Please enter contact number.";
            }

            else if (string.IsNullOrEmpty(pickup))
            {
                msg = "Select pick up location.";
            }
            //else if (string.IsNullOrEmpty(drop))
            //{
            //    msg = "Select drop location.";
            //}
            else if (string.IsNullOrEmpty(TicketNo))
            {
                msg = "Please enter Date.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            var url = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_live;
            }
            else
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_localhost;
            }
            if (string.IsNullOrEmpty(msg))
            {
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.tourist_bus;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.TouristBus;
                //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string KhaltiAPIURL = "passengerdetailfillup/";
                string tripdata = string.Empty;
                var queryParam = new Dictionary<string, string>() {
                 { "name",name  },
                 { "contact", contact } ,
                { "pickup", pickup },
                 { "drop", drop },
                  { "TicketNo", TicketNo }
                 };

                var data = JsonConvert.SerializeObject(queryParam);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(url + KhaltiAPIURL, Reference, MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", url + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.PostMethod_TouristBus(url + KhaltiAPIURL, queryParam);

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error TouristBusPost: ApiName " + url + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"TouristBusPost URL: {url}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(url + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

            }
            obj.message = msg;
            return obj;
        }
        public static GetDataFromBusSewa Get_TouristBus_Detaillist_RequestService(string Reference, string TicketNo, string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName, string authenticationToken, string UserInput, int VendorApiType)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }

            else if (string.IsNullOrEmpty(TicketNo))
            {
                msg = "Please enter Date.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            var url = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_live;
            }
            else
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_localhost;
            }
            if (string.IsNullOrEmpty(msg))
            {
                int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.tourist_bus;
                int VendorType = (int)VendorApi_CommonHelper.VendorTypes.TouristBus;
                //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
                string KhaltiAPIURL = "passengerdetail/";
                string tripdata = string.Empty;
                var queryParam = new Dictionary<string, string>() {
                  { "TicketNo", TicketNo }
                 };

                var data = JsonConvert.SerializeObject(queryParam);
                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(url + KhaltiAPIURL, Reference, MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", url + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                try
                {
                    obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                    msg = VendorApi_CommonHelper.PostMethod_TouristBus(url + KhaltiAPIURL, queryParam);

                }
                catch (WebException e)
                {
                    obj.IsException = true;
                    if (e.Response == null && e.Message != null)
                    {
                        Common.AddLogs("Error TouristBusPost: ApiName " + url + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                        msg = e.Message;

                    }
                    else
                    {
                        using (WebResponse response = e.Response)
                        {
                            HttpWebResponse httpResponse = (HttpWebResponse)response;
                            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                            using (Stream Edata = response.GetResponseStream())
                            using (var reader = new StreamReader(Edata))
                            {
                                msg = reader.ReadToEnd();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    msg = ex.Message;
                    obj.IsException = true;
                }
                Common.AddLogs($"TouristBusPost URL: {url}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                VendorApi_CommonHelper.UpdateVendorResponse(url + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

            }
            obj.message = msg;
            return obj;
        }


        public static GetDataFromBusSewa Get_TouristBus_Payment_RequestService(string refId, string Reference, string commission, string amount, string cashbackamount, string ticketSrlNo,
                            string Version, string DeviceCode, string PlatForm, Int64 MemberId, string MemberName,
                            string authenticationToken, string UserInput, int VendorApiType,
                            AddCouponsScratched resCoupon, ref string TransactionID, string BankTransactionId,
                            string WalletType, string UniqueCustomerId, string Amount,
                            AddUserLoginWithPin resGetRecord
                          , string API_KEY, string UniqueMerchantId, string UserName, string Password, string RedirectURL, string OrderToken, string UniqueTransactionId)
        {
            GetDataFromBusSewa obj = new GetDataFromBusSewa();
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Reference))
            {
                msg = "Please enter Reference.";
            }
            else if (string.IsNullOrEmpty(cashbackamount))
            {
                msg = "Please provide cashback amount.";
            }
            else if (string.IsNullOrEmpty(amount))
            {
                msg = "Please provide  amount.";
            }
            else if (string.IsNullOrEmpty(ticketSrlNo))
            {
                msg = "Please provide bus ticket number.";
            }
            else if (string.IsNullOrEmpty(Version))
            {
                msg = "Please enter Version.";
            }
            else if (string.IsNullOrEmpty(DeviceCode))
            {
                msg = "Please enter DeviceCode.";
            }
            else if (string.IsNullOrEmpty(PlatForm))
            {
                msg = "Please enter PlatForm.";
            }
            else if (string.IsNullOrEmpty(Amount))
            {
                msg = "Amount is required.";
            }

            else if (string.IsNullOrEmpty(WalletType))
            {
                msg = "Payment type is required.";
            }
            else if (string.IsNullOrEmpty(Convert.ToString(MemberId)))
            {
                msg = "Member Id is required.";
            }
            var url = string.Empty;
            if (Common.ApplicationEnvironment.IsProduction == true)
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_live;
            }
            else
            {

                url = VendorApi_CommonHelper.TouristBus_URL_Prefix_localhost;
            }
            int VendorAPIType = (int)VendorApi_CommonHelper.KhaltiAPIName.tourist_bus;
            int VendorType = (int)VendorApi_CommonHelper.VendorTypes.TouristBus;
            //string JsonReq = VendorApi_CommonHelper.GenerateApi_Input_JsonRequest(Reference, "", "", string.Empty, VendorAPIType);
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ");
            string KhaltiAPIURL = "paymentconfirm/";
            if (string.IsNullOrEmpty(msg))
            {
                var data = string.Empty;

                var objVendor_API_Requests = VendorApi_CommonHelper.SendDataToVendor_SaveResponse(url + KhaltiAPIURL, "", MemberId, MemberName, data, authenticationToken, UserInput, DeviceCode, PlatForm, VendorAPIType, "", "", url + KhaltiAPIURL, Convert.ToString(VendorType), 0);
                obj.Id = Convert.ToString(objVendor_API_Requests.Id);
                {
                    objVendor_API_Requests.Res_Khalti_Id = ticketSrlNo;
                    //--start insert into wallet transaction table (Customer)--//
                    string TransactionUniqueId = VendorApi_CommonHelper.UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, ticketSrlNo, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance, "", "", VendorType);
                    obj.TransactionId = TransactionUniqueId;
                    if (string.IsNullOrEmpty(obj.TransactionId))
                    {
                        obj.message = "Transaction Not Saved";
                        return obj;
                    }
                    //--end insert into wallet transaction table (Customer)--//
                    var name = !string.IsNullOrEmpty(resGetRecord.MiddleName) ? resGetRecord.FirstName + ' ' + resGetRecord.MiddleName + ' ' + resGetRecord.LastName : resGetRecord.FirstName + ' ' + resGetRecord.LastName;
                    //--start insert into merchant order table (Merchant)--//
                    string msg1 = RepMerchants.RequestMerchantOrderGenerate_BUS(API_KEY, "", ticketSrlNo, UniqueMerchantId, Amount, UserName, Password, PlatForm, DeviceCode, UserInput, ref UniqueTransactionId, ref RedirectURL, ref OrderToken, ref objVendor_API_Requests, MemberId, name, resGetRecord.ContactNumber, commission);
                    if (msg1.ToLower() != "success")
                    {
                        obj.message = msg1;
                        return obj;
                    }

                    obj.MerchantOrderTxnId = ticketSrlNo;
                    //--end insert into merchant order table--//
                    var queryParam = new Dictionary<string, string>() {
                                     { "TicketNo", ticketSrlNo },
                                     { "pidx",  obj.TransactionId },
                                     { "cashbackamount", cashbackamount }
                                     };
                    data = JsonConvert.SerializeObject(queryParam);
                    try
                    {
                        msg = VendorApi_CommonHelper.PostMethod_TouristBus(url + KhaltiAPIURL, queryParam);

                        if (!string.IsNullOrEmpty(msg))
                        {
                            Tourist_TripDetails_Response result = JsonConvert.DeserializeObject<Tourist_TripDetails_Response>(msg.ToString());
                            if (result.code == "1")
                            {
                                bool IsCouponUnlocked = false;
                                objVendor_API_Requests.Res_Khalti_Status = true;
                                var res = Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                                if (res.ToLower() == "success")
                                {
                                    string Title = "Transaction successfull";
                                    string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                                                                                                                    //string Message = "TransactionId " + objVendor_API_Requests.TransactionUniqueId + " success for " + VendorApiTypeName;
                                    Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                                }
                            }
                            else
                            {
                                //objVendor_API_Requests.Res_Khalti_Status = 0;
                                Tourist_TripDetails_Response Failedresult = JsonConvert.DeserializeObject<Tourist_TripDetails_Response>(Convert.ToString(msg));
                                objVendor_API_Requests.Res_Khalti_State = "failed";
                                objVendor_API_Requests.Res_Khalti_Message = Convert.ToString(Failedresult.data);
                                Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                            }
                        }


                    }
                    catch (WebException e)
                    {
                        obj.IsException = true;
                        if (e.Response == null && e.Message != null)
                        {
                            Common.AddLogs("Error TouristBusPost: ApiName " + url + ". Request: " + data + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                            obj.IsException = true;
                            msg = e.Message;

                        }
                        else
                        {
                            using (WebResponse response = e.Response)
                            {
                                HttpWebResponse httpResponse = (HttpWebResponse)response;
                                Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                                using (Stream Edata = response.GetResponseStream())
                                using (var reader = new StreamReader(Edata))
                                {
                                    obj.IsException = true;
                                    msg = reader.ReadToEnd();
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        obj.IsException = true;
                        msg = ex.Message;
                    }
                    Common.AddLogs($"TouristBusPost URL: {url}, Request {data}, Response {msg}  on {Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
                    VendorApi_CommonHelper.UpdateVendorResponse(url + KhaltiAPIURL, data, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id, "", msg);

                }

            }
            obj.message = msg;
            return obj;
        }

        #endregion

    }
}
