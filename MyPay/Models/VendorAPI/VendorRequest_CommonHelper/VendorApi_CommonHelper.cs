using Dapper;
using DocumentFormat.OpenXml.Drawing.Charts;
using IronBarCode;
using iText.Html2pdf;
using log4net;
using Microsoft.Ajax.Utilities;
using MyPay.Models.Add;
using MyPay.Models.Common;
using MyPay.Models.GenericCoupons;
using MyPay.Models.Get;
using MyPay.Models.Get.Events;
using MyPay.Models.Get.KhanePani;
using MyPay.Models.Get.Nea;
using MyPay.Models.Miscellaneous;
using MyPay.Models.VendorAPI.Get.Antivirus.K7;
using MyPay.Models.VendorAPI.Get.Antivirus.Mcafee;
using MyPay.Models.VendorAPI.Get.CableCar;
using MyPay.Models.VendorAPI.Get.Insurance.Arhant;
using MyPay.Models.VendorAPI.Get.Insurance.Citizen;
using MyPay.Models.VendorAPI.Get.Insurance.Himalayan;
using MyPay.Models.VendorAPI.Get.Insurance.IME;
using MyPay.Models.VendorAPI.Get.Insurance.IMEGeneral;
using MyPay.Models.VendorAPI.Get.Insurance.Jyoti;
using MyPay.Models.VendorAPI.Get.Insurance.Mahalaxmi;
using MyPay.Models.VendorAPI.Get.Insurance.National;
using MyPay.Models.VendorAPI.Get.Insurance.Neco;
using MyPay.Models.VendorAPI.Get.Insurance.Nepal;
using MyPay.Models.VendorAPI.Get.Insurance.Prabhu;
using MyPay.Models.VendorAPI.Get.Insurance.Prime;
using MyPay.Models.VendorAPI.Get.Insurance.Prudential;
using MyPay.Models.VendorAPI.Get.Insurance.Reliable;
using MyPay.Models.VendorAPI.Get.Insurance.Reliance;
using MyPay.Models.VendorAPI.Get.Insurance.Sagarmatha;
using MyPay.Models.VendorAPI.Get.Insurance.Sanima;
using MyPay.Models.VendorAPI.Get.Insurance.Shikhar;
using MyPay.Models.VendorAPI.Get.Insurance.Surya;
using MyPay.Models.VendorAPI.Get.Insurance.Union;
using MyPay.Models.VendorAPI.Get.Internet.SUBISU;
using MyPay.Models.VendorAPI.Get.PlasmaAirlines;
using MyPay.Models.VendorAPI.Get.Ride;
using MyPay.Models.VendorAPI.Get.WorldLink;
using MyPay.Repository;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using QRCoder;
using ServiceStack;
using SixLabors.ImageSharp.Drawing;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Configuration;
using System.Data;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IdentityModel.Tokens.Jwt;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.Services.Description;
using System.Runtime.Remoting;
using System.IO.Packaging;
using System.Web.Mvc;
using static IdentityModel.OidcConstants;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.WebUtilities;
using System.Web.UI.WebControls;
using System.Windows.Interop;
using Microsoft.Office.Interop.Excel;
using MyPay.Models.VendorAPI.Get.BusSewaService;
using MyPay.Models.VendorAPI.Get.Insurance.ArhantLife;
using Org.BouncyCastle.Ocsp;

namespace MyPay.Models.VendorAPI.VendorRequest_CommonHelper
{
    public class VendorApi_CommonHelper
    {
        #region Properties

        //#region Bus Sewa To Test Data
        //public static string BusSewa_URL_Prefix_localhost = "http://node9257-diyalo.ktm.yetiappcloud.com:8080/customer/webresources/booking/";
        //public static string BusSewa_user = "MYPAY";
        //public static String BusSewa_pass = "mYP@y@244#";
        //#endregion
        //#region Bus Sewa Live
        //public static string BusSewa_URL_Prefix_localhost = "https://bussewa.com/customer/webresources/booking/";
        //public static string BusSewa_user = "mypay";
        //public static string BusSewa_pass = "mypay@123$$";
        //#endregion

        #region Horoscope 
        public static string Horoscope_URL_Prefix_localhost = "http://192.168.1.216:8084/api/ClientHoroscopeDetails";
        #endregion
        #region Bus Sewa 
        public static string BusSewa_URL_Prefix_localhost = Environment.GetEnvironmentVariable("BusSewa_BaseURL", EnvironmentVariableTarget.Machine);
        public static string BusSewa_user = "mypay";
        public static string BusSewa_pass = "mypay@123$$";
        public static string BusSewa_Authorization = Environment.GetEnvironmentVariable("BusSewa_BaseAuthorization", EnvironmentVariableTarget.Machine);
        #endregion

        #region Tourist Bus 
        public static string TouristBus_URL_Prefix_localhost = "https://nepaltouristbus.com/mypayapi/";
        public static string TouristBus_user = "mypay";
        public static string TouristBus_pass = "kunwaritand@2016";
        public static string TouristBus_Authorization_local = "Basic bXlwYXk6a3Vud2FyaXRhbmRAMjAxNg==";

        public static string TouristBus_URL_Prefix_live = "https://nepaltouristbus.com/mypayliveapi/";
        public static string TouristBus_user_live = "mypaybusticket";
        public static string TouristBus_pass_live = "kunwaritdesign@2018";
        public static string TouristBus_Authorization_live = "Basic bXlwYXlidXN0aWNrZXQ6a3Vud2FyaXRkZXNpZ25AMjAxOA==";
        #endregion

        #region NepalPay QR
        public static string NepalPayQR_URL_Prefix_localhost = "https://devnpi.connectips.com/";
        public static string NepalPayQR_userAuth_username = "MYPAYNQR@999";
        public static String NepalPayQR_userAuth_password = "123Abcd@123";
        public static String NepalPayQR_userAuth_grant_type = "password";
        public static String NepalPayQR_authentication = "Basic bXlwYXk6QWJjZEAxMjM";
        

        public static string NepalPayQR_URL_Prefix_live_token = "https://182.93.93.107:7444/";
        public static string NepalPayQR_URL_Prefix_live = "https://182.93.93.107:443/";
        public static string NepalPayQR_userAuth_username_live = "SMARTCARD@999";
        public static String NepalPayQR_userAuth_password_live = "123R3M@U5er$m@r!@3mt";
        public static String NepalPayQR_userAuth_grant_type_live = "password";
        public static String NepalPayQR_authentication_live = "Basic c21hcnRjYXJkOkJhczFjQCRtciFjcmRAJG1y";
        #endregion



        //public static string NepalPayQR_URL_Prefix_production = "https://devnpi.connectips.com/";
        //public static string NepalPayQR_user_production = "mypaynqr";
        //public static String NepalPayQR_pass_production = "Abcd@123";

        //public static string NepalPayQR_userAuth_username_production = "MYPAYNQR@999";
        //public static String NepalPayQR_userAuth_password_production = "123Abcd@123";
        //public static String NepalPayQR_userAuth_grant_type_production = "password";


        public static string KhaltiApiUrl_Root_localhost = "https://uatservices.khalti.com/api/";
        public static string KhaltiApiUrl_Prefix_localhost = "https://uatservices.khalti.com/api/use/";
        public static string Vendor_Lookup_URL_Prefix_localhost = "https://uatservices.khalti.com/api/service/";
        public static string ServiceGroup_COUNTERS_URL_Prefix_localhost = "https://uatservices.khalti.com/api/servicegroup/";
        public static string TransactionLookup_URL_Prefix_localhost = "https://uatservices.khalti.com/api/";
        public static string KhaltiApiSchoolUrl_Root_localhost = "https://a.khalti.com/api/v2/";

        public static string KhaltiApiUrl_Root = "https://services.khalti.com/api/";
        public static string KhaltiApiUrl_Prefix = "https://services.khalti.com/api/use/";
        public static string Vendor_Lookup_URL_Prefix = "https://services.khalti.com/api/service/";
        public static string ServiceGroup_COUNTERS_URL_Prefix = "https://services.khalti.com/api/servicegroup/";
        public static string TransactionLookup_URL_Prefix = "https://services.khalti.com/api/";
        public static string KhaltiApiSchoolUrl_Root = "https://khalti.com/api/v2/";


        // ***************** FonePay Live ************************ ///
        //public static string FonePay_API_URL_Base_Root = "https://ir-external-gateway.fonepay.com/";
        //public static string FonePay_API_URL_Base_Prefix = "https://ir-external-gateway.fonepay.com/";




        public static string Organization_URL_Prefix_localhost = "https://registrationapi.mypay.com.np/api/";

        public static string FonePay_API_URL_Base_Root = "https://fonepayqrapi.mypay.com.np/proxy/";
        public static string FonePay_API_URL_Base_Prefix = "https://fonepayqrapi.mypay.com.np/proxy/";



        public static string FonePay_IssuerBin = "122221";
        public static string FonePay_Bank_UserName = "MyPay";
        public static string FonePay_Bank_Password = "G29412116@";
        public static string FonePay_Bank_Password_Encrypted = "TXlQYXk6RzI5NDEyMTE2QA==";
        public static string FonePay_UserName = "MyPay001";
        public static string FonePay_Password = "D5hn$*ixMM+9AFi0W11&WhkOM";
        public static string FonePay_UserAccountnoBank = "2844150059837002";
        public static string FonePay_MerchantPAN = "602483993";
        public static string FonePay_ProxyUserName = "mypay";
        public static string FonePay_ProxyApiKey = "@NcRfUjXn2r5u8x/A?D(G-KaPdSgVkYp3s6v9y$B&E)H@MbQeThWmZq4t7w!z%C*";
        public static string FonePay_SenderName = "SMART CARD NEPAL PVT LTD";
        public static string FonePay_SenderMobileNumber = "9851005103";


        //public static string FonePay_API_URL_Base_Root = "https://uat-api-external.fonepay.com/";
        //public static string FonePay_API_URL_Base_Prefix = "https://uat-api-external.fonepay.com/v1/";
        //public static string FonePay_IssuerBin = "777777";
        //public static string FonePay_Bank_UserName = "globalQR";
        //public static string FonePay_Bank_Password = "D65344868@";
        //public static string FonePay_Bank_Password_Encrypted = "Z2xvYmFsUVI6RDY1MzQ0ODY4QA==";
        //public static string FonePay_UserName = "globalBankQR";
        //public static string FonePay_Password = "pi+2me!DkG@QKkx";
        //public static string FonePay_UserAccountnoBank = "G429841845633";
        //public static string FonePay_MerchantPAN = "602483993";
        //public static string FonePay_ProxyUserName = "mypay";
        //public static string FonePay_ProxyApiKey = "@NcRfUjXn2r5u8x/A?D(G-KaPdSgVkYp3s6v9y$B&E)H@MbQeThWmZq4t7w!z%C*";
        //public static string FonePay_SenderName = "SMART CARD NEPAL PVT LTD";
        //public static string FonePay_SenderMobileNumber = "9851005103";

        // ***************** FonePay LOCALHOST ************************ ///
        public static string FonePay_API_URL_Base_Root_localhost = "https://uat-api-external.fonepay.com/";
        public static string FonePay_API_URL_Base_Prefix_localhost = "https://uat-api-external.fonepay.com/v1/";
        public static string FonePay_IssuerBin_localhost = "777777";
        public static string FonePay_Bank_UserName_localhost = "globalQR";
        public static string FonePay_Bank_Password_localhost = "D65344868@";
        public static string FonePay_Bank_Password_Encrypted_localhost = "Z2xvYmFsUVI6RDY1MzQ0ODY4QA==";
        public static string FonePay_UserName_localhost = "globalBankQR";
        public static string FonePay_Password_localhost = "pi+2me!DkG@QKkx";
        public static string FonePay_TestUserAccountnoBank_localhost = "G429841845633";
        public static string FonePay_MerchantPAN_localhost = "602483993";
        public static string FonePay_ProxyUserName_localhost = "mypay";
        public static string FonePay_ProxyApiKey_localhost = "@NcRfUjXn2r5u8x/A?D(G-KaPdSgVkYp3s6v9y$B&E)H@MbQeThWmZq4t7w!z%C*";
        public static string FonePay_SenderName_localhost = "SMART CARD NEPAL PVT LTD";
        public static string FonePay_SenderMobileNumber_localhost = "9851005103";

        // ***************** SERVER TOKEN ************************ ///
        public static string Req_TokenTest = "rp3ue1tppQQhvrWUqvo8";// rp3ue1tppQQhvrWUqvo8 //"yKutgSRojJTpcnxKBPOx"; //"TEST:4vVfxLDCA3d4GQmZYFea"; //"mzhbcK4rtE1P7vPEETqv"; //"rp3ue1tppQQhvrWUqvo8"; //;
        public static string Req_TokenLive = "rp3ue1tppQQhvrWUqvo8"; // "mzhbcK4rtE1P7vPEETqv";
        public static string SchoolAuthenticationKey = "Key live_secret_key_9fab30bbee074013a3f0fb804eb4e578";//"TEST:4vVfxLDCA3d4GQmZYFea";

        // ***************** LOCALHOST TOKEN ******************** ///
        public static string Req_TokenTest_localhost = "rp3ue1tppQQhvrWUqvo8"; //"TEST:4vVfxLDCA3d4GQmZYFea";//"TEST:mzhbcK4rtE1P7vPEETqv"; //"v7wLFqAgi9NLYkSxF42d";// // "TEST:bBMbfYPBtCZ6l99p9vw0";
        public static string Req_TokenLive_localhost = "rp3ue1tppQQhvrWUqvo8"; //"TEST:4vVfxLDCA3d4GQmZYFea";// "3aQN4uqeR57L0tfxrmvO";// "mzhbcK4rtE1P7vPEETqv";      //"v7wLFqAgi9NLYkSxF42d";//
        public static string SchoolAuthenticationKey_localhost = "Key live_secret_key_1b822a47b4864a538391c7490fae8cda";//"TEST:4vVfxLDCA3d4GQmZYFea";

        // ***************** ALLOY ******************** ///
        public static string ALLOY_API_URL = "https://j8oribek4b.execute-api.eu-west-2.amazonaws.com/sandbox";
        public static string ALLOY_API_KEY = "cg8MZKRBgXajBFInfOkLG1oMjKwxp5gc7kA1AAY9";
        public static string ALLOY_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21lcklkIjoiOGUzYTg2NTQtOTA3Ni00NjJkLWE3ZjUtNjVkZGNiZGQ2NWQ0IiwiaWF0IjoxNjY1OTk2NTAzfQ.7dmOIO-OPE_LTt6ECVLHXxTbvvCn0jgReDg-MuPKxac";
        // ****************************************************** ///

        // **************** EVENTS TEST ******************* ///
        public static string EVENTS_API_URL_LINK_LOCAL = "https://testeventapi.mypay.com.np";
        public static string EVENTS_API_KEY_LOCAL = "mZq4t7w!z%C*F-J@NcRfUjXn2r5u8x/A?D(G+KbPdSgVkYp3s6v9y$B&E)H@McQf";
        public static string EVENTS_USER_NAME_LOCAL = "mypaywallet";
        public static string EVENTS_API_CLIENT_CODE_LOCAL = "CL0993825";

        // **************** EVENTS LIVE ******************* ///
        public static string EVENTS_API_URL_LINK = "https://eventapi.mypay.com.np";
        //public static string EVENTS_API_KEY = "Zq4t7w!z%C*F-JaNdRfUjXn2r5u8x/A?D(G+KbPeShVkYp3s6v9y$B&E)H@McQfT";
        public static string EVENTS_API_KEY = "eShVmYq3t6w9z$C&F)J@McQfTjWnZr4u7x!A%D*G-KaPdRgUkXp2s5v8y/B?E(H+";

        public static string EVENTS_USER_NAME = "mypaywallet";
        public static string EVENTS_API_CLIENT_CODE = "CL3683171";
        // ****************************************************** ///

        //*****************Cable Car staging*********************
        public static string CableCar_URL = "https://182.93.95.45:8091/";
        public static string Cable_user = "mypay";
        public static string Cable_Pass = "manager@123";

        public static string CableCar_URL_Prefix_localhost = Environment.GetEnvironmentVariable("CableCarURL", EnvironmentVariableTarget.Machine);
        public static string CableCarAuthentication = Environment.GetEnvironmentVariable("CableCarAuthentication", EnvironmentVariableTarget.Machine);



        /// <summary>
        /// ////for live
        /// </summary>
        //public static string CableCar_URL = "  https://110.44.119.211:1111";
        //public static string Cable_user = "mypay";
        //public static string Cable_Pass = "M1p@3#2*";


        //public static string EventsAPIURL = string.Empty;
        public static string Req_UserInput = string.Empty;
        public static string Req_UserName = string.Empty;
        // public static string KhaltiAPIURL = string.Empty;
        public static string FonePayAPIURL = string.Empty;
        public static string VendorOutput = string.Empty;
        public static string RequestedToken = string.Empty;
        public static decimal[] smartcellvalidation = { 20, 50, 100, 200, 500, 1000 };
        public static decimal[] dishhome_erc_validation = { 1000, 2000, 3000, 4000, 5000, 6000, 7000, 9000, 10000 };
        public static decimal[] ntc_erc_validation = { 100, 200, 500, 1000 };
        public static decimal[] utl_erc_validation = { 100, 250, 500 };
        public static decimal[] smart_erc_validation = { 50, 100, 200 };
        public static decimal[] broadlink_erc_validation = { 570, 1300, 2600, 2260 };
        public static decimal[] nettv_erc_validation = { 50, 100, 200, 500, 1000 };
        public static decimal[] pstn_landline_validation = { 100, 150, 200, 300, 500, 1000, 1500, 2000, 2500, 3000, 4000, 5000, 10000 };
        public static decimal[] tv_dishhome_validation = { 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 9000, 10000 };
        public static decimal[] tv_simtv_validation = { 300, 400, 500, 545, 550, 600, 750, 800, 875, 1000, 1050, 2000, 5000, 7000, 10000 };
        public static decimal[] tv_prabhutv_validation = { 350, 1050, 1800, 2400, 3500, 6500, 9000, 11500, 24000 };


        public static string UniqueTransactionId = "";
        public static string Serial = "";
        public static string Pin = "";

        public static Int64 Id = 0;
        public static Int64 vendor_api_requests_Id = 0;

        public static string API_User_platform = string.Empty;
        public static string API_User_devicecode = string.Empty;
        public static string API_User_authenticationToken = string.Empty;
        public static string MERCHANT_API_KEY = string.Empty;

        // *************** Government Service TEST ****************** ///
        public static string GOVERNMENT_SERVICE_API_URL_LINK_LOCAL = "http://demo.connectips.com:6065/";

        // *************** Government Service LIVE ****************** ///
        public static string GOVERNMENT_SERVICE_API_URL_LINK = "https://182.93.93.107:7444/";

        // ****************************************************** ///
        #endregion

        #region "Enums"
        public enum KhaltiAPIName
        {
            [Display(Name = "TOPUP")]
            khalti_topup = 1,

            [Display(Name = "NTC")]
            khalti_ntc = 2,

            [Display(Name = "NCELL")]
            khalti_ncell = 3,

            [Display(Name = "SMARTCELL")]
            khalti_smartcell = 4,

            [Display(Name = "DISHHOME ERC")]
            khalti_dishhome_erc = 5,

            [Display(Name = "NTC ERC")]
            khalti_ntc_erc = 6,

            //khalti_utl_erc = 7, // Discontinued API
            [Display(Name = "SMART ERC")]
            khalti_smart_erc = 8,

            [Display(Name = "BROADLINK ERC")]
            khalti_broadlink_erc = 9,

            [Display(Name = "NETTV ERC")]
            khalti_nettv_erc = 10,

            [Display(Name = "PSTN LANDLINE")]
            khalti_pstn_landline = 11,

            [Display(Name = "NEA")]
            khalti_nea = 12,

            [Display(Name = "KHANEPANI")]
            khalti_khanepani = 13,

            [Display(Name = "TV DISHHOME")]
            khalti_tv_dishhome = 14,

            [Display(Name = "TV SIMTV")]
            khalti_tv_simtv = 15,



            [Display(Name = "TV MERO")]
            khalti_tv_mero = 16,

            [Display(Name = "REGISTER CASHBACK")]
            register_cashback = 17,

            [Display(Name = "KYC CASHBACK")]
            kyc_cashback = 18,

            [Display(Name = "DEPOSIT BY CONNECTIPS")]
            deposit_by_connectips = 19,

            [Display(Name = "CASHBACK")]
            cashback = 20,

            [Display(Name = "DEPOSIT BY DEBIT CREDIT")]
            deposit_by_debit_credit = 21,

            [Display(Name = "TRANSFER BY PHONE")]
            Transer_by_phone = 22,

            [Display(Name = "TV CLEARTV")]
            khalti_tv_cleartv = 23,

            [Display(Name = "TV MAXTV")]
            khalti_tv_maxtv = 24,

            [Display(Name = "TV PRABHUTV")]
            khalti_tv_prabhutv = 25,

            [Display(Name = "TV P&G NETWORK TV")]
            khalti_tv_png_network_tv = 26,

            [Display(Name = "TV JAGRITITV")]
            khalti_tv_jagrititv = 27,

            [Display(Name = "INTERNET ADSL")]
            khalti_internet_adsl = 28,

            [Display(Name = "INTERNET SUBISU NEW")]
            khalti_internet_subisu_new = 29,

            [Display(Name = "INTERNET VIANET")]
            khalti_internet_vianet = 31,

            [Display(Name = "INTERNET CLASSICTECH")]
            khalti_internet_classictech = 32,

            [Display(Name = "ANTIVIRUS KASPERSKY")]
            khalti_antivirus_kaspersky = 33,

            [Display(Name = "BANK TRANSFER")]
            bank_transfer = 34,

            [Display(Name = "INTERNET ARROWNET")]
            khalti_internet_Arrownet = 35,

            [Display(Name = "INTERNET VIRTUALNETWORK")]
            khalti_internet_VirtualNetwork = 36,

            [Display(Name = "INTERNET WEBNETWORK")]
            khalti_internet_WebNetwork = 37,

            [Display(Name = "INTERNET ROYALNETWORK")]
            khalti_internet_RoyalNetwork = 38,

            [Display(Name = "INTERNET WEBSURFER")]
            khalti_internet_WebSurfer = 39,

            [Display(Name = "INTERNET TECHMINDS")]
            khalti_internet_TechMinds = 40,

            [Display(Name = "INTERNET POKHARA")]
            khalti_internet_Pokhara = 41,

            [Display(Name = "DATAPACK NCELL")]
            khalti_DataPack_NCell = 42,

            [Display(Name = "RIDE TOOTLE")]
            khalti_Ride_Tootle = 43,

            [Display(Name = "DEMAT NABIL")]
            khalti_Demat_Nabil = 44,

            [Display(Name = "INSURANCE NECO")]
            khalti_Insurance_Neco = 45,

            [Display(Name = "TRANSACTION LOOKUP")]
            khalti_Transaction_Lookup = 46,

            [Display(Name = "Reedem Points")]
            Reedem_Points = 47,

            [Display(Name = "Voting")]
            Voting = 48,

            [Display(Name = "Deposit By Linked Bank")]
            Deposit_By_Linked_Bank = 49,

            [Display(Name = "Credit By Linked Bank")]
            Credit_By_Linked_Bank = 50,

            [Display(Name = "Device Inactivate")]
            Device_Inactivate = 51,

            [Display(Name = "School")]
            khalti_School = 52,

            [Display(Name = "Ticket")]
            Ticket = 53,

            [Display(Name = "KYC")]
            KYC = 54,

            [Display(Name = "WalletUpdate By Admin")]
            WalletUpdate_By_Admin = 55,

            [Display(Name = "FLIGHT AIRLINES")]
            khalti_flight_airlines = 56,

            [Display(Name = "Internet Banking")]
            Internet_Banking = 57,

            //[Display(Name = "INSURANCE SAGARMATHA")]
            //khalti_Insurance_Salico = 58, // RENAME AS SALICO API
            [Display(Name = "INSURANCE SALICO")]
            khalti_Insurance_Salico = 58,

            [Display(Name = "Mobile Banking")]
            Mobile_Banking = 59,

            [Display(Name = "TRANSACTION CASHBACK")]
            transaction_cashback = 60,

            [Display(Name = "DATAPACK NTC")]
            khalti_DataPack_NTC = 61,

            [Display(Name = "VOICEPACK NTC")]
            khalti_VoicePack_NTC = 62,

            [Display(Name = "SMSPACK NTC")]
            khalti_SMSPack_NTC = 63,

            [Display(Name = "VOICEPACK NCELL")]
            khalti_VoicePack_NCELL = 64,

            [Display(Name = "SMSPACK NCELL")]
            khalti_SMSPack_NCELL = 65,

            [Display(Name = "INTERNET P&G NETWORK")]
            khalti_internet_png_network = 66,

            [Display(Name = "INTERNET JAGRITI")]
            khalti_internet_jagriti = 67,

            [Display(Name = "INSURANCE RELIANCE")]
            khalti_Insurance_Sanima_Reliance = 68,



            //[Display(Name = "INSURANCE JYOTILIFE")]
            //khalti_Insurance_Surya_Jyoti_Life = 69, // RENAME API AS SURYAJYOTI LIFE
            [Display(Name = "INSURANCE JYOTILIFE")]
            khalti_Insurance_Surya_Jyoti_Life = 69,

            [Display(Name = "INTERNET WORLDLINK")]
            khalti_internet_Worldlink = 70,

            [Display(Name = "Gift CashBack")]
            Gift_Cashback = 71,

            [Display(Name = "Traffic Police Fine")]
            khalti_Traffic_Police_Fine = 73,

            [Display(Name = "MyPay_Notification")]
            MyPay_Notification = 74,

            [Display(Name = "INSURANCE NEPALLIFE")]
            khalti_Insurance_Nepal_Life = 75,

            //[Display(Name = "INSURANCE SURYALIFE")]
            //khalti_Insurance_Surya_Life = 76,     // MERGED WITH JYOTILIFE
            //[Display(Name = "INSURANCE SANIMALIFE")]
            //khalti_Insurance_Sanima_Life = 77,    // MERGED WITH RELIANCE
            [Display(Name = "INSURANCE SHIKHAR")]
            khalti_Insurance_Shikhar = 78,

            [Display(Name = "INSURANCE ARHANT")]
            khalti_Insurance_Arhant = 79,

            [Display(Name = "CREDIT CARD PAYMENT")]
            Credit_Card_Payment = 80,

            [Display(Name = "AMOUNT HOLD BY ADMIN")]
            Amount_Hold_By_Admin = 81,

            [Display(Name = "SIGNUP BONUS")]
            Signup_Bonus = 82,

            [Display(Name = "AMOUNT RELEASE FROM ADMIN")]
            Amount_Release_From_Admin = 83,

            [Display(Name = "MERCHANT TRANSACTIONS")]
            Merchant_CheckOut = 84,

            [Display(Name = "MPCOINS UPDATE BY ADMIN")]
            MpCoinsUpdate_By_Admin = 85,

            [Display(Name = "Excel Notification")]
            Excel_Notification = 86,

            [Display(Name = "Gift MPCoins")]
            Gift_MPCoins = 87,

            [Display(Name = "FonePay QR Payments")]
            FonePay_QR_Payments = 88,

            [Display(Name = "Merchant Payments")]
            Merchant_Load = 89,

            [Display(Name = "Coupons Cashback")]
            Coupons_Cashback = 90,

            [Display(Name = "REMITTANCE TRANSACTIONS")]
            Remittance_Transactions = 91,

            [Display(Name = "MERCHANT WALLET WITHDRAWAL")]
            Merchant_Wallet_Withdrawal = 92,

            [Display(Name = "MERCHANT WITHDRAWAL")]
            Merchant_Withdrawal = 93,

            [Display(Name = "Merchant Direct Payments")]
            Merchant_Bank_Load = 94,

            [Display(Name = "Merchant Account Validation")]
            Merchant_Account_Validation = 95,

            [Display(Name = "Merchant CreditDebit")]
            Merchant_Account_CreditDebit = 96,

            [Display(Name = "Merchant QR Payments")]
            Merchant_QR_Payments = 97,

            [Display(Name = "MyPay_Events")]
            MyPay_Events = 98,

            [Display(Name = "ANTIVIRUS ESET")]
            khalti_Antivirus_Eset = 99,

            [Display(Name = "ANTIVIRUS WARDWIZ")]
            khalti_Antivirus_Wardwiz = 100,

            [Display(Name = "ANTIVIRUS K7")]
            khalti_Antivirus_k7 = 101,

            [Display(Name = "ANTIVIRUS Mcafee")]
            khalti_Antivirus_Mcafee = 102,

            [Display(Name = "EPF Government Payments")]
            khalti_EPF_Government_Payments = 103,
            //[Display(Name = "Airlines_MyPay")]
            //Airlines_MyPay = 104,
            [Display(Name = "Airlines MyPay")]
            Airlines_MyPay = 104,

            [Display(Name = "CIT Government Payments")]
            khalti_CIT_Government_Payments = 105,

            //New added insurance services

            [Display(Name = "INSURANCE HIMALAYANLIFE")]
            khalti_Insurance_Himalayan_Life = 106,

            [Display(Name = "INSURANCE NATIONALLIFE")]
            khalti_Insurance_National_Life = 107,

            //[Display(Name = "INSURANCE PRABHULIFE")]
            //khalti_Insurance_Prabhu_Life = 108,

            [Display(Name = "INSURANCE PRABHULIFE")] 
            khalti_Insurance_Prabhu_Mahalaxmi_Life = 108,

            //[Display(Name = "INSURANCE HIMALAYANGENERAL")]
            //khalti_Insurance_Himalayan_General = 109,

            [Display(Name = "INSURANCE HIMALAYANEVEREST")] 
            khalti_Insurance_Himalayan_Everest = 109,

            [Display(Name = "INSURANCE MAHALAXMILIFE")]
            khalti_Insurance_Mahalaxmi_Life = 110,

           /* ARHANTLIFE*/
            [Display(Name = "INSURANCE IMELIFE")]
            khalti_Insurance_IME_Life = 111,
            [Display(Name = "INSURANCE ASIANLIFE")]
            khalti_Insurance_ASIAN_Life = 213,

            [Display(Name = "INSURANCE CITIZENLIFE")]
            khalti_Insurance_Citizen_Life = 112,

            [Display(Name = "INSURANCE RELIABLELIFE")]
            khalti_Insurance_Reliable_Life = 113,

            [Display(Name = "INSURANCE UNIONLIFE")]
            khalti_Insurance_Union_Life = 114,

            [Display(Name = "INSURANCE PRUDENTIAL")]
            khalti_Insurance_Prudential_Insurance = 115,
            
            //[Display(Name = "INSURANCE IMEGENERAL")]
            //khalti_Insurance_IME_General = 116,

            [Display(Name = "INSURANCE IGIPRUDENTIAL")] 
            khalti_Insurance_IGI_Prudential = 116,

            //added new insurance arhant segration 
            [Display(Name = "INSURANCE NLG")]
            khalti_Insurance_NLG = 210,

            [Display(Name = "INSURANCE SIDDHARTHA")]
            khalti_Insurance_SIDDHARTHA = 211,

            [Display(Name = "INSURANCE UNITEDAJOD")]
            khalti_Insurance_UNITEDAJOD = 212,

            [Display(Name = "INTERNET SUBISU")]
            khalti_internet_subisu = 117,

            [Display(Name = "BUS SEWA")]
            bus_sewa = 200,

            [Display(Name = "MERCHANT SETTLEMENT")]
            Merchant_Settlement = 201,
            [Display(Name = "NepalPay QR Payments")]
            NepalPay_QR_Payments = 202,
            [Display(Name = "INTERNATIONAL_VOTING")]
            International_Voting = 118,


            //Govt, non-Govt services
            [Display(Name = "CONSULAR SERVICE")]
            Consular_Service = 120,

            [Display(Name = "Company Registrar's Office")]
            Company_Registrars_Office = 121,

            [Display(Name = "DOFE")]
            DOFE = 122,

            [Display(Name = "Health Insurance Board")]
            Health_Insurance_Board = 123,

            [Display(Name = "Inland Revenue Department")]
            Inland_Revenue_Department = 124,

            [Display(Name = "Loksewa")]
            Loksewa = 125,

            [Display(Name = "Passport")]
            Passport = 126,

            [Display(Name = "Citizen Investment Trust")]
            Citizen_Investment_Trust = 127,

            [Display(Name = "Employees Provident Fund")]
            Employees_Provident_Fund = 128,

            [Display(Name = "Janak Sikshya")]
            Janak_Sikshya = 129,

            [Display(Name = "N.E.A. Loan Payment")]
            NEA_Loan_Payment = 130,

            [Display(Name = "Nepal Oil Corporation")]
            Nepal_Oil_Corporation = 131,

            [Display(Name = "Nepal Tourism Board")]
            Nepal_Tourism_Board = 132,

            [Display(Name = "Social Security Fund")]
            Social_Security_Fund = 133,

            [Display(Name = "Financial Comptroller General Office")]
            Financial_Comptroller_General_Office = 134,

            [Display(Name = "National single window")]
            National_Single_Window = 135,

            [Display(Name = "Civil Aviation Authority of Nepal")]
            Civil_Aviation_Authority_of_Nepal = 136,

            [Display(Name = "Organization Events")]
            organization_events = 400,

            [Display(Name = "Birgunj Customs Office")]
            Birgunj_Customs_Office = 137,

            [Display(Name = "Bhairahwa Customs Office")]
            Bhairahwa_Customs_Office = 138,

            [Display(Name = "Rasuwa Customs Office")]
            Rasuwa_Customs_Office = 139,

            [Display(Name = "DOFE Welfare")]
            DOFE_Welfare = 140,

            [Display(Name = "DOFE Insurance")]
            DOFE_Insurance = 141,

            [Display(Name = "DOFE Organization")]
            DOFE_Organization = 142,

            [Display(Name = "DOFE Individual")]
            DOFE_Individual = 143,

            [Display(Name = "DOFE Manpower Insurance")]
            DOFE_Manpower_Insurance = 144,

            [Display(Name = "DOFE Individual Insurance")]
            DOFE_Individual_Insurance = 145,

            [Display(Name = "Phatbari")]
            khalti_Phatbari = 146,

            [Display(Name = "Gratuity")]
            khalti_Gratuity = 147,

            [Display(Name = "Loan Repayment")]
            khalti_Loan_Repayment = 148,

            [Display(Name = "Pension")]
            khalti_Pension = 149,

            [Display(Name = "Department of Customs")]
            Department_of_Customs = 150,

            [Display(Name = "Traffic fine")]
            Traffic_Fine = 151,

            [Display(Name = "NOC")]
            NOC = 154,

            [Display(Name = "TV SKYTV")]
            khalti_tv_skytv = 155,

            [Display(Name = "VISA Master Card")]
            VISA_Master_Card = 152,

            [Display(Name = "TEST")]
            TEST_SERVICE = 193,

            [Display(Name = "DISHHOME FTTH")]
            khalti_internet_Dishhome = 156,

            [Display(Name = "NT FTTH")]
            khalti_internet_NT_FTTH = 157,

            //new add Cable Car
            [Display(Name = "Cable Car")]
            Cable_Car = 300,

            //new add URL
            [Display(Name = "URL")]
            URL = 1000,

            //new add URL for NotificationCampaign 
            [Display(Name = "Url_Link")]
            khalti_Url_Link = 1001,

            [Display(Name = "TOURIST BUS")]
            tourist_bus = 204
        }
        public enum VendorTypes
        {
            Not_Filled = 0,
            khalti = 1,
            NCHL = 2,
            NIS_Asia = 3,
            MyPay = 4,
            NPS = 5,
            Prabhu = 6,
            FonePay = 7,
            BusSewa = 8,
            CableCar = 9,
            Organization = 11,
           // CableCar = 9,
            PlasmaTech = 12,
            NCHLQR = 10,
            TouristBus = 11,
            ShreeAirlines = 13
        }

        public enum Request_Status
        {
            Success = 1,
            Pending = 2,
            Failed = 3,
            Queued = 4,
            Processing = 5,
            Expired = 6,
            Error = 7,
            Status_Error = 8,
            Refund = 9
        }
        public enum Request_Platform
        {
            Web = 1,
            Api = 2
        }
        #endregion

        #region Methods

        public static string ProcessJsonRequestToVendor_And_SaveTransaction(string KhaltiApiUrl, ref bool IsCouponUnlocked, ref string TransactionID, AddCouponsScratched resCoupon, string BankTransactionId, string WalletType, string CustomerId, string Req_ReferenceNo, string Amount, string authenticationToken,
        string UserInput, string DeviceCode, string PlatForm, AddUserLoginWithPin resGetRecord, string JsonReq, int VendorApiType, string msg, ref AddVendor_API_Requests objVendor_API_Requests)
        {

            //AddVendor_API_Requests resVendor_API_Requests = new AddVendor_API_Requests();
            decimal WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
            string MemberName = resGetRecord.FirstName + " " + resGetRecord.MiddleName + " " + resGetRecord.LastName;
            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
            if (resGetRecord == null || resGetRecord.Id == 0)
            {
                msg = "MemberId not found";
                JsonReq = String.Empty;
            }
            else
            {
                if (resGetRecord.IsActive == false)
                {
                    msg = "Your account is not active.";
                    JsonReq = String.Empty;
                }
                //else
                //{
                //    AddCalculateServiceChargeAndCashback objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, ((int)KhaltiAPIName.Transer_by_phone).ToString());
                //    if (resGetRecord.TotalAmount < Convert.ToDecimal(objOut.NetAmount))
                //    {
                //        msg = Common.Common.InsufficientBalance;
                //        JsonReq = String.Empty;
                //    }
                //}
            }

            if (!string.IsNullOrEmpty(JsonReq))
            {
                string TransactionUniqueId = string.Empty;
                if (VendorApiType <= 11)
                {
                    objVendor_API_Requests = SendDataToVendor_SaveResponse(KhaltiApiUrl, Req_ReferenceNo, resGetRecord.MemberId, MemberName, JsonReq, authenticationToken, UserInput, DeviceCode, PlatForm, VendorApiType);
                    TransactionUniqueId = UpdateWalletBalance(resCoupon, ref TransactionID, BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, "", out WalletBalance, "", "");
                    if (msg == "success")
                    {
                        objVendor_API_Requests = UpdateVendorResponse(KhaltiApiUrl, JsonReq, DeviceCode, PlatForm, VendorApiType, VendorApiTypeName, objVendor_API_Requests.Id);
                    }
                }
                if (objVendor_API_Requests.Id != 0)
                {
                    Id = objVendor_API_Requests.Id;
                }
                if (objVendor_API_Requests.Id != 0 && objVendor_API_Requests.Res_Khalti_State.ToLower() == "success")
                {
                    Common.Common.AddLogs("Transaction success for " + VendorApiTypeName + " on " + Common.Common.fnGetdatetime() + ".  " + objVendor_API_Requests.Res_Khalti_Message, false, Convert.ToInt32(AddLog.LogType.Utility), Convert.ToInt64(objVendor_API_Requests.MemberId), "", true, PlatForm, DeviceCode);
                    // UpdateWalletBalance(BankTransactionId, WalletType, CustomerId, Amount, out msg, VendorApiType, resGetRecord, objVendor_API_Requests, out WalletBalance);
                    msg = Common.Common.UpdateCompleteTransaction(ref IsCouponUnlocked, ref TransactionID, resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName);
                    if (msg.ToLower() == "success")
                    {
                        string Title = "Transaction successfull";
                        string Message = $"Bill payment of amount Rs.{Amount} for {VendorApiTypeName} has been completed successfully.";//TransactionId " + resKhalti.TransactionUniqueId + " success for " + VendorApiTypeName;
                                                                                                                                        //string Message = "TransactionId " + objVendor_API_Requests.TransactionUniqueId + " success for " + VendorApiTypeName;
                        Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resGetRecord.MemberId, Title, Message);
                    }
                }
                else
                {
                    msg = Common.Common.RefundUpdateTransaction(resGetRecord, objVendor_API_Requests, TransactionUniqueId, VendorApiTypeName, BankTransactionId, VendorApiType, WalletType, PlatForm, DeviceCode);
                }
            }
            return msg;
        }
        public static string UpdateWalletBalance(AddCouponsScratched resCoupon, ref string TransactionID, string BankTransactionId, string WalletType, string UniqueCustomerId, string Amount, out string msg, int VendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, string VendorJsonLookup, out decimal WalletBalance, string Remarks = "", string Purpose = "", int VendorType = 1, AddMerchantOrders resMerchantOrders = null, string card="", string bank="")
        //internal static void UpdateWalletBalance(AddCouponsScratched resCoupon, ref string transactionID, string bankTransactionId, string walletType, string uniqueCustomerID, string amount, out string msg, int vendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, out decimal walletBalance)

        {
            try
            {
                if (string.IsNullOrEmpty(WalletType))
                {
                    WalletType = "0";
                }
                decimal CouponDeduct = 0;
                decimal RewardPointWalletBalance = Convert.ToDecimal(resGetRecord.TotalRewardPoints);
                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                AddBankTransactions outbank = new AddBankTransactions();
                GetBankTransactions inbank = new GetBankTransactions();
                inbank.TransactionUniqueId = BankTransactionId;
                AddBankTransactions resbank = new AddBankTransactions();
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                AddCalculateServiceChargeAndCashback objOut = new AddCalculateServiceChargeAndCashback();
                if (resMerchantOrders != null)
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceChargeMerchant(resMerchantOrders.MerchantId, Amount, VendorApiType.ToString());
                    CouponDeduct = objOut.DiscountAmount; // Add Merchant Discount Also Here
                }
                else
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                }
                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Card))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount));
                }
                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - (Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct));
                    if (resCoupon != null && resCoupon.Id != 0)
                    {
                        decimal TrnCouponLimit = Convert.ToDecimal((Convert.ToDecimal(Amount) * resCoupon.CouponPercentage) / 100);
                        if (resCoupon.MinimumAmount > 0 && resCoupon.MinimumAmount > TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MinimumAmount;
                        }
                        else if (resCoupon.MaximumAmount > 0 && resCoupon.MaximumAmount < TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MaximumAmount;
                        }
                        CouponDeduct = CouponDeduct + TrnCouponLimit;
                        WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct)));
                    }
                }
                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - objOut.MPCoinsDebit - CouponDeduct)));
                    RewardPointWalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit);
                }
                if (WalletType != ((int)(WalletTransactions.WalletTypes.Bank)).ToString() || WalletType != ((int)(WalletTransactions.WalletTypes.Card)).ToString() || Common.Common.CheckBankTransactionExists(resGetRecord.MemberId, BankTransactionId) == false)
                {

                    Guid TransactionGuid = Guid.NewGuid();
                    WalletTransactions res_transaction = new WalletTransactions();
                    res_transaction.MemberId = resGetRecord.MemberId;
                    res_transaction.MemberName = resGetRecord.FirstName + " " + resGetRecord.LastName;
                    res_transaction.ContactNumber = resGetRecord.ContactNumber;
                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.Amount = Convert.ToDecimal(Amount) - objOut.MPCoinsDebit;
                    }
                    else
                    {
                        //res_transaction.Amount = Convert.ToDecimal(Amount);
                        res_transaction.Amount = Convert.ToDecimal(Amount) - Convert.ToDecimal(CouponDeduct);
                    }
                    res_transaction.VendorTransactionId = objVendor_API_Requests.Res_Khalti_Id;
                    res_transaction.ParentTransactionId = BankTransactionId;
                    res_transaction.CurrentBalance = WalletBalance;
                    res_transaction.CreatedBy = objVendor_API_Requests.CreatedBy;
                    res_transaction.CreatedByName = objVendor_API_Requests.CreatedByName;
                    res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                    res_transaction.Remarks = (Remarks == "" ? objVendor_API_Requests.Res_Khalti_Message : Remarks);
                    res_transaction.Purpose = (Purpose);
                    res_transaction.Type = VendorApiType;
                    res_transaction.Description = objVendor_API_Requests.Res_Khalti_Message;
                    res_transaction.Status = res_transaction.GetTransactionStatusEnum(objVendor_API_Requests.Res_Khalti_State);
                    res_transaction.Reference = objVendor_API_Requests.Req_ReferenceNo;
                    res_transaction.IsApprovedByAdmin = true;
                    res_transaction.IsActive = true;
                    res_transaction.Platform = objVendor_API_Requests.PlatForm;
                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Debit);
                    res_transaction.CustomerID = UniqueCustomerId;
                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                    {
                        res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.FonePay;
                    }
                    else
                    {
                        if (VendorType != 1)
                        {
                            res_transaction.VendorType = VendorType;
                            if (res_transaction.VendorType == 10)
                            {
                                res_transaction.TxnInstructionId = objVendor_API_Requests.Res_Khalti_Id;
                            }
                        }
                        else
                        {
                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.khalti;
                            
                        }
                    }
                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                    res_transaction.RewardPointBalance = resGetRecord.TotalRewardPoints;
                    res_transaction.VendorJsonLookup = VendorJsonLookup;

                    if ((WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay)))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                        res_transaction.CouponCode = resCoupon.CouponCode;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.MPCoinsDebit = objOut.MPCoinsDebit;
                        res_transaction.RewardPointBalance = (resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.MPCoins;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                    {
                        if (string.IsNullOrEmpty(BankTransactionId))
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }
                        resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
                        if (resbank.Id > 0)
                        {
                            res_transaction.TransactionAmount = objOut.Amount;
                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Bank;
                            res_transaction.RecieverName = resbank.RecieverName;
                            res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
                            res_transaction.RecieverBankCode = resbank.RecieverBankCode;
                            res_transaction.RecieverBranch = resbank.RecieverBranch;
                            res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                            res_transaction.SenderBankCode = resbank.SenderBankCode;
                            res_transaction.SenderBranch = resbank.SenderBranch;
                            res_transaction.Purpose = resbank.Purpose;
                            res_transaction.SenderBankName = resbank.SenderBankName;
                            res_transaction.SenderBranchName = resbank.SenderBranchName;
                            res_transaction.RecieverBankName = resbank.RecieverBankName;
                            res_transaction.RecieverBranchName = resbank.RecieverBranchName;
                        }
                        else
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }

                    }
                    if (resMerchantOrders != null)
                    {
                        res_transaction.MerchantId = resMerchantOrders.MerchantId;
                        res_transaction.MerchantOrganization = resMerchantOrders.OrganizationName;
                    }
                    bool IsTransactionSaved = res_transaction.Add();

                    if (IsTransactionSaved)
                    {
                        TransactionID = res_transaction.TransactionUniqueId;
                        Common.Common.AddLogs("Transaction Initiated For " + VendorApiTypeName + " (Transaction ID: " + TransactionID.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(res_transaction.MemberId), res_transaction.MemberName, true, res_transaction.Platform, res_transaction.DeviceCode);

                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                        {
                            if (resbank.Id > 0)
                            {
                                resbank.Status = (int)WalletTransactions.Statuses.Success;
                                resbank.Reference = res_transaction.TransactionUniqueId;
                                resbank.ParentTransactionId = res_transaction.TransactionUniqueId;
                                bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
                                if (bankstatus)
                                {
                                    AddDepositOrders outobject = new AddDepositOrders();
                                    GetDepositOrders inobject = new GetDepositOrders();
                                    inobject.TransactionId = BankTransactionId;
                                    AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
                                    if (resDeposit.Id > 0)
                                    {
                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Success;
                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");

                                        Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), objVendor_API_Requests.MemberId, objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                    }
                                    Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                }
                                else
                                {
                                    Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, objVendor_API_Requests.PlatForm, objVendor_API_Requests.DeviceCode);
                                }
                            }
                        }

                        msg = "success";
                        return res_transaction.TransactionUniqueId;
                    }
                    else
                    {
                        msg = "Transaction Not Saved";
                        return "";
                    }
                }
                else
                {
                    msg = "Bank Transaction Already Updated";
                    return "";
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message;
                WalletBalance = 0;

            }
            return "";
        }
        public static string UpdateDishHomeFTTHWalletBalance(AddCouponsScratched resCoupon, ref string TransactionID, string BankTransactionId, string WalletType, string UniqueCustomerId, string PackageName, string Amount, out string msg, int VendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, string VendorJsonLookup, out decimal WalletBalance, string Remarks = "", string Purpose = "", int VendorType = 1, AddMerchantOrders resMerchantOrders = null)
        {
            try
            {
                if (string.IsNullOrEmpty(WalletType))
                {
                    WalletType = "0";
                }
                decimal CouponDeduct = 0;
                decimal RewardPointWalletBalance = Convert.ToDecimal(resGetRecord.TotalRewardPoints);
                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                AddBankTransactions outbank = new AddBankTransactions();
                GetBankTransactions inbank = new GetBankTransactions();
                inbank.TransactionUniqueId = BankTransactionId;
                AddBankTransactions resbank = new AddBankTransactions();
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                AddCalculateServiceChargeAndCashback objOut = new AddCalculateServiceChargeAndCashback();
                if (resMerchantOrders != null)
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceChargeMerchant(resMerchantOrders.MerchantId, Amount, VendorApiType.ToString());
                    CouponDeduct = objOut.DiscountAmount; // Add Merchant Discount Also Here
                }
                else
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                }
                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Card))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount));
                }
                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - (Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct));
                    if (resCoupon != null && resCoupon.Id != 0)
                    {
                        decimal TrnCouponLimit = Convert.ToDecimal((Convert.ToDecimal(Amount) * resCoupon.CouponPercentage) / 100);
                        if (resCoupon.MinimumAmount > 0 && resCoupon.MinimumAmount > TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MinimumAmount;
                        }
                        else if (resCoupon.MaximumAmount > 0 && resCoupon.MaximumAmount < TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MaximumAmount;
                        }
                        CouponDeduct = CouponDeduct + TrnCouponLimit;
                        WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct)));
                    }
                }
                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - objOut.MPCoinsDebit - CouponDeduct)));
                    RewardPointWalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit);
                }
                if (WalletType != ((int)(WalletTransactions.WalletTypes.Bank)).ToString() || WalletType != ((int)(WalletTransactions.WalletTypes.Card)).ToString() || Common.Common.CheckBankTransactionExists(resGetRecord.MemberId, BankTransactionId) == false)
                {

                    Guid TransactionGuid = Guid.NewGuid();
                    WalletTransactions res_transaction = new WalletTransactions();
                    var serializedData = new
                    {
                        CustomerId = UniqueCustomerId,
                        PackageName = PackageName
                    };
                    string AdditionalInfo = JsonConvert.SerializeObject(serializedData);
                    res_transaction.MemberId = resGetRecord.MemberId;
                    res_transaction.MemberName = resGetRecord.FirstName + " " + resGetRecord.LastName;
                    res_transaction.ContactNumber = resGetRecord.ContactNumber;
                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.Amount = Convert.ToDecimal(Amount) - objOut.MPCoinsDebit;
                    }
                    else
                    {
                        //res_transaction.Amount = Convert.ToDecimal(Amount);
                        res_transaction.Amount = Convert.ToDecimal(Amount) - Convert.ToDecimal(CouponDeduct);
                    }
                    res_transaction.VendorTransactionId = objVendor_API_Requests.Res_Khalti_Id;
                    res_transaction.ParentTransactionId = BankTransactionId;
                    res_transaction.CurrentBalance = WalletBalance;
                    res_transaction.CreatedBy = objVendor_API_Requests.CreatedBy;
                    res_transaction.CreatedByName = objVendor_API_Requests.CreatedByName;
                    res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                    res_transaction.Remarks = (Remarks == "" ? objVendor_API_Requests.Res_Khalti_Message : Remarks);
                    res_transaction.Purpose = (Purpose);
                    res_transaction.Type = VendorApiType;
                    res_transaction.Description = objVendor_API_Requests.Res_Khalti_Message;
                    res_transaction.Status = res_transaction.GetTransactionStatusEnum(objVendor_API_Requests.Res_Khalti_State);
                    res_transaction.Reference = objVendor_API_Requests.Req_ReferenceNo;
                    res_transaction.IsApprovedByAdmin = true;
                    res_transaction.IsActive = true;
                    res_transaction.Platform = objVendor_API_Requests.PlatForm;
                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Debit);
                    res_transaction.CustomerID = UniqueCustomerId;
                    res_transaction.AdditionalInfo1 = AdditionalInfo;
                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                    {
                        res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.FonePay;
                    }
                    else
                    {
                        if (VendorType != 1)
                        {
                            res_transaction.VendorType = VendorType;
                        }
                        else
                        {
                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.khalti;
                        }
                    }
                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                    res_transaction.RewardPointBalance = resGetRecord.TotalRewardPoints;
                    res_transaction.VendorJsonLookup = VendorJsonLookup;

                    if ((WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay)))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                        res_transaction.CouponCode = resCoupon.CouponCode;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.MPCoinsDebit = objOut.MPCoinsDebit;
                        res_transaction.RewardPointBalance = (resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.MPCoins;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                    {
                        if (string.IsNullOrEmpty(BankTransactionId))
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }
                        resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
                        if (resbank.Id > 0)
                        {
                            res_transaction.TransactionAmount = objOut.Amount;
                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Bank;
                            res_transaction.RecieverName = resbank.RecieverName;
                            res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
                            res_transaction.RecieverBankCode = resbank.RecieverBankCode;
                            res_transaction.RecieverBranch = resbank.RecieverBranch;
                            res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                            res_transaction.SenderBankCode = resbank.SenderBankCode;
                            res_transaction.SenderBranch = resbank.SenderBranch;
                            res_transaction.Purpose = resbank.Purpose;
                            res_transaction.SenderBankName = resbank.SenderBankName;
                            res_transaction.SenderBranchName = resbank.SenderBranchName;
                            res_transaction.RecieverBankName = resbank.RecieverBankName;
                            res_transaction.RecieverBranchName = resbank.RecieverBranchName;
                        }
                        else
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }

                    }
                    if (resMerchantOrders != null)
                    {
                        res_transaction.MerchantId = resMerchantOrders.MerchantId;
                        res_transaction.MerchantOrganization = resMerchantOrders.OrganizationName;
                    }
                    bool IsTransactionSaved = res_transaction.Add();

                    if (IsTransactionSaved)
                    {
                        TransactionID = res_transaction.TransactionUniqueId;
                        Common.Common.AddLogs("Transaction Initiated For " + VendorApiTypeName + " (Transaction ID: " + TransactionID.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(res_transaction.MemberId), res_transaction.MemberName, true, res_transaction.Platform, res_transaction.DeviceCode);

                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                        {
                            if (resbank.Id > 0)
                            {
                                resbank.Status = (int)WalletTransactions.Statuses.Success;
                                resbank.Reference = res_transaction.TransactionUniqueId;
                                resbank.ParentTransactionId = res_transaction.TransactionUniqueId;
                                bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
                                if (bankstatus)
                                {
                                    AddDepositOrders outobject = new AddDepositOrders();
                                    GetDepositOrders inobject = new GetDepositOrders();
                                    inobject.TransactionId = BankTransactionId;
                                    AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
                                    if (resDeposit.Id > 0)
                                    {
                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Success;
                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");

                                        Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), objVendor_API_Requests.MemberId, objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                    }
                                    Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                }
                                else
                                {
                                    Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, objVendor_API_Requests.PlatForm, objVendor_API_Requests.DeviceCode);
                                }
                            }
                        }

                        msg = "success";
                        return res_transaction.TransactionUniqueId;
                    }
                    else
                    {
                        msg = "Transaction Not Saved";
                        return "";
                    }
                }
                else
                {
                    msg = "Bank Transaction Already Updated";
                    return "";
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message;
                WalletBalance = 0;

            }
            return "";
        }
        public static string UpdateNTFTTHWalletBalance(AddCouponsScratched resCoupon, ref string TransactionID, string BankTransactionId, string WalletType, string UniqueCustomerId, string Number, string Amount, out string msg, int VendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, string VendorJsonLookup, out decimal WalletBalance, string Remarks = "", string Purpose = "", int VendorType = 1, AddMerchantOrders resMerchantOrders = null)
        {
            try
            {
                if (string.IsNullOrEmpty(WalletType))
                {
                    WalletType = "0";
                }
                decimal CouponDeduct = 0;
                decimal RewardPointWalletBalance = Convert.ToDecimal(resGetRecord.TotalRewardPoints);
                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                AddBankTransactions outbank = new AddBankTransactions();
                GetBankTransactions inbank = new GetBankTransactions();
                inbank.TransactionUniqueId = BankTransactionId;
                AddBankTransactions resbank = new AddBankTransactions();
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                AddCalculateServiceChargeAndCashback objOut = new AddCalculateServiceChargeAndCashback();
                if (resMerchantOrders != null)
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceChargeMerchant(resMerchantOrders.MerchantId, Amount, VendorApiType.ToString());
                    CouponDeduct = objOut.DiscountAmount; // Add Merchant Discount Also Here
                }
                else
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                }
                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Card))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount));
                }
                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - (Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct));
                    if (resCoupon != null && resCoupon.Id != 0)
                    {
                        decimal TrnCouponLimit = Convert.ToDecimal((Convert.ToDecimal(Amount) * resCoupon.CouponPercentage) / 100);
                        if (resCoupon.MinimumAmount > 0 && resCoupon.MinimumAmount > TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MinimumAmount;
                        }
                        else if (resCoupon.MaximumAmount > 0 && resCoupon.MaximumAmount < TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MaximumAmount;
                        }
                        CouponDeduct = CouponDeduct + TrnCouponLimit;
                        WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct)));
                    }
                }
                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - objOut.MPCoinsDebit - CouponDeduct)));
                    RewardPointWalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit);
                }
                if (WalletType != ((int)(WalletTransactions.WalletTypes.Bank)).ToString() || WalletType != ((int)(WalletTransactions.WalletTypes.Card)).ToString() || Common.Common.CheckBankTransactionExists(resGetRecord.MemberId, BankTransactionId) == false)
                {

                    Guid TransactionGuid = Guid.NewGuid();
                    WalletTransactions res_transaction = new WalletTransactions();
                    var serializedData = new
                    {
                        Subscriber_Number = Number
                    };
                    string AdditionalInfo = JsonConvert.SerializeObject(serializedData);
                    res_transaction.MemberId = resGetRecord.MemberId;
                    res_transaction.MemberName = resGetRecord.FirstName + " " + resGetRecord.LastName;
                    res_transaction.ContactNumber = resGetRecord.ContactNumber;
                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.Amount = Convert.ToDecimal(Amount) - objOut.MPCoinsDebit;
                    }
                    else
                    {
                        //res_transaction.Amount = Convert.ToDecimal(Amount);
                        res_transaction.Amount = Convert.ToDecimal(Amount) - Convert.ToDecimal(CouponDeduct);
                    }
                    if (Convert.ToString(VendorApiType) == "202")
                    {
                        res_transaction.TxnInstructionId = objVendor_API_Requests.Res_Khalti_Id;
                    }
                    else
                    {
                        res_transaction.VendorTransactionId = objVendor_API_Requests.Res_Khalti_Id;
                    }
                    
                    res_transaction.ParentTransactionId = BankTransactionId;
                    res_transaction.CurrentBalance = WalletBalance;
                    res_transaction.CreatedBy = objVendor_API_Requests.CreatedBy;
                    res_transaction.CreatedByName = objVendor_API_Requests.CreatedByName;
                    res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                    res_transaction.Remarks = (Remarks == "" ? objVendor_API_Requests.Res_Khalti_Message : Remarks);
                    res_transaction.Purpose = (Purpose);
                    res_transaction.Type = VendorApiType;
                    res_transaction.Description = objVendor_API_Requests.Res_Khalti_Message;
                    res_transaction.Status = res_transaction.GetTransactionStatusEnum(objVendor_API_Requests.Res_Khalti_State);
                    res_transaction.Reference = objVendor_API_Requests.Req_ReferenceNo;
                    res_transaction.IsApprovedByAdmin = true;
                    res_transaction.IsActive = true;
                    res_transaction.Platform = objVendor_API_Requests.PlatForm;
                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Debit);
                    res_transaction.CustomerID = UniqueCustomerId;
                    res_transaction.AdditionalInfo1 = AdditionalInfo;

                    //if (VendorApiType == 80)
                    //{
                    //    res_transaction.CardNumber = card;
                    //    res_transaction.RecieverBankName = bank;
                    //    res_transaction.CustomerID = card;
                    //}
                    //else
                    //{
                    //    res_transaction.CustomerID = UniqueCustomerId;
                    //}

                    res_transaction.CustomerID = UniqueCustomerId;


                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                    {
                        res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.FonePay;
                    }
                    else
                    {
                        if (VendorType != 1)
                        {
                            res_transaction.VendorType = VendorType;
                        }
                        else
                        {
                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.khalti;
                        }
                    }
                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                    res_transaction.RewardPointBalance = resGetRecord.TotalRewardPoints;
                    res_transaction.VendorJsonLookup = VendorJsonLookup;

                    if ((WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay)))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                        res_transaction.CouponCode = resCoupon.CouponCode;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.MPCoinsDebit = objOut.MPCoinsDebit;
                        res_transaction.RewardPointBalance = (resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.MPCoins;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                    {
                        if (string.IsNullOrEmpty(BankTransactionId))
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }
                        resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
                        if (resbank.Id > 0)
                        {
                            res_transaction.TransactionAmount = objOut.Amount;
                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Bank;
                            res_transaction.RecieverName = resbank.RecieverName;
                            res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
                            res_transaction.RecieverBankCode = resbank.RecieverBankCode;
                            res_transaction.RecieverBranch = resbank.RecieverBranch;
                            res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                            res_transaction.SenderBankCode = resbank.SenderBankCode;
                            res_transaction.SenderBranch = resbank.SenderBranch;
                            res_transaction.Purpose = resbank.Purpose;
                            res_transaction.SenderBankName = resbank.SenderBankName;
                            res_transaction.SenderBranchName = resbank.SenderBranchName;
                            res_transaction.RecieverBankName = resbank.RecieverBankName;
                            res_transaction.RecieverBranchName = resbank.RecieverBranchName;
                        }
                        else
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }

                    }
                    if (resMerchantOrders != null)
                    {
                        res_transaction.MerchantId = resMerchantOrders.MerchantId;
                        res_transaction.MerchantOrganization = resMerchantOrders.OrganizationName;
                    }
                    bool IsTransactionSaved = res_transaction.Add();

                    if (IsTransactionSaved)
                    {
                        TransactionID = res_transaction.TransactionUniqueId;
                        Common.Common.AddLogs("Transaction Initiated For " + VendorApiTypeName + " (Transaction ID: " + TransactionID.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(res_transaction.MemberId), res_transaction.MemberName, true, res_transaction.Platform, res_transaction.DeviceCode);

                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                        {
                            if (resbank.Id > 0)
                            {
                                resbank.Status = (int)WalletTransactions.Statuses.Success;
                                resbank.Reference = res_transaction.TransactionUniqueId;
                                resbank.ParentTransactionId = res_transaction.TransactionUniqueId;
                                bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
                                if (bankstatus)
                                {
                                    AddDepositOrders outobject = new AddDepositOrders();
                                    GetDepositOrders inobject = new GetDepositOrders();
                                    inobject.TransactionId = BankTransactionId;
                                    AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
                                    if (resDeposit.Id > 0)
                                    {
                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Success;
                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");

                                        Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), objVendor_API_Requests.MemberId, objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                    }
                                    Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                }
                                else
                                {
                                    Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, objVendor_API_Requests.PlatForm, objVendor_API_Requests.DeviceCode);
                                }
                            }
                        }

                        msg = "success";
                        return res_transaction.TransactionUniqueId;
                    }
                    else
                    {
                        msg = "Transaction Not Saved";
                        return "";
                    }
                }
                else
                {
                    msg = "Bank Transaction Already Updated";
                    return "";
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message;
                WalletBalance = 0;

            }
            return "";
        }

        public static string UpdateWalletBalanceArhantLifeInsurance(AddCouponsScratched resCoupon, ref string TransactionID, string BankTransactionId, string WalletType, string UniqueCustomerId,  string Amount, out string msg, int VendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, string VendorJsonLookup, out decimal WalletBalance, string Remarks = "", string Purpose = "", int VendorType = 1, AddMerchantOrders resMerchantOrders = null)
        //internal static void UpdateWalletBalance(AddCouponsScratched resCoupon, ref string transactionID, string bankTransactionId, string walletType, string uniqueCustomerID, string amount, out string msg, int vendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, out decimal walletBalance)

        {
            try
            {
                if (string.IsNullOrEmpty(WalletType))
                {
                    WalletType = "0";
                }
                decimal CouponDeduct = 0;
                decimal RewardPointWalletBalance = Convert.ToDecimal(resGetRecord.TotalRewardPoints);
                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                AddBankTransactions outbank = new AddBankTransactions();
                GetBankTransactions inbank = new GetBankTransactions();
                inbank.TransactionUniqueId = BankTransactionId;
                AddBankTransactions resbank = new AddBankTransactions();
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                AddCalculateServiceChargeAndCashback objOut = new AddCalculateServiceChargeAndCashback();
                if (resMerchantOrders != null)
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceChargeMerchant(resMerchantOrders.MerchantId, Amount, VendorApiType.ToString());
                    CouponDeduct = objOut.DiscountAmount; // Add Merchant Discount Also Here
                }
                else
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                }
                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount));
                }
                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - (Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct));
                    if (resCoupon != null && resCoupon.Id != 0)
                    {
                        decimal TrnCouponLimit = Convert.ToDecimal((Convert.ToDecimal(Amount) * resCoupon.CouponPercentage) / 100);
                        if (resCoupon.MinimumAmount > 0 && resCoupon.MinimumAmount > TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MinimumAmount;
                        }
                        else if (resCoupon.MaximumAmount > 0 && resCoupon.MaximumAmount < TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MaximumAmount;
                        }
                        CouponDeduct = CouponDeduct + TrnCouponLimit;
                        WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct)));
                    }
                }
                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - objOut.MPCoinsDebit - CouponDeduct)));
                    RewardPointWalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit);
                }
                if (WalletType != ((int)(WalletTransactions.WalletTypes.Bank)).ToString() || Common.Common.CheckBankTransactionExists(resGetRecord.MemberId, BankTransactionId) == false)
                {

                    Guid TransactionGuid = Guid.NewGuid();
                    WalletTransactions res_transaction = new WalletTransactions();
                    res_transaction.MemberId = resGetRecord.MemberId;
                    res_transaction.MemberName = resGetRecord.FirstName + " " + resGetRecord.LastName;
                    res_transaction.ContactNumber = resGetRecord.ContactNumber;
                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.Amount = Convert.ToDecimal(Amount) - objOut.MPCoinsDebit;
                    }
                    else
                    {
                        //res_transaction.Amount = Convert.ToDecimal(Amount);
                        res_transaction.Amount = Convert.ToDecimal(Amount) - Convert.ToDecimal(CouponDeduct);
                    }
                   /*  var additional = new
                     {
                         CustomerId = UniqueCustomerId,
                         CreditsConsumed = CreditsConsumed,


                     };
                     string aaa = JsonConvert.SerializeObject(additional);
 */
                    res_transaction.VendorTransactionId = objVendor_API_Requests.Res_Khalti_Id;
                    res_transaction.ParentTransactionId = BankTransactionId;
                    res_transaction.CurrentBalance = WalletBalance;
                    res_transaction.CreatedBy = objVendor_API_Requests.CreatedBy;
                    res_transaction.CreatedByName = objVendor_API_Requests.CreatedByName;
                    res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                    res_transaction.Remarks = (Remarks == "" ? objVendor_API_Requests.Res_Khalti_Message : Remarks);
                    res_transaction.Purpose = (Purpose);
                    res_transaction.Type = VendorApiType;
                    res_transaction.Description = objVendor_API_Requests.Res_Khalti_Message;
                    res_transaction.Status = res_transaction.GetTransactionStatusEnum(objVendor_API_Requests.Res_Khalti_State);
                    res_transaction.Reference = objVendor_API_Requests.Req_ReferenceNo;
                    res_transaction.IsApprovedByAdmin = true;
                    res_transaction.IsActive = true;
                    res_transaction.Platform = objVendor_API_Requests.PlatForm;
                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Debit);
                    res_transaction.CustomerID = UniqueCustomerId;
                   /* res_transaction.AdditionalInfo1 = aaa;*/

                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                    {
                        res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.FonePay;
                    }
                    else
                    {
                        if (VendorType != 1)
                        {
                            res_transaction.VendorType = VendorType;
                        }
                        else
                        {
                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.khalti;
                        }
                    }
                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                    res_transaction.RewardPointBalance = resGetRecord.TotalRewardPoints;
                    res_transaction.VendorJsonLookup = VendorJsonLookup;

                    if ((WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay)))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                        res_transaction.CouponCode = resCoupon.CouponCode;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.MPCoinsDebit = objOut.MPCoinsDebit;
                        res_transaction.RewardPointBalance = (resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.MPCoins;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                    {
                        if (string.IsNullOrEmpty(BankTransactionId))
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }
                        resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
                        if (resbank.Id > 0)
                        {
                            res_transaction.TransactionAmount = objOut.Amount;
                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Bank;
                            res_transaction.RecieverName = resbank.RecieverName;
                            res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
                            res_transaction.RecieverBankCode = resbank.RecieverBankCode;
                            res_transaction.RecieverBranch = resbank.RecieverBranch;
                            res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                            res_transaction.SenderBankCode = resbank.SenderBankCode;
                            res_transaction.SenderBranch = resbank.SenderBranch;
                            res_transaction.Purpose = resbank.Purpose;
                            res_transaction.SenderBankName = resbank.SenderBankName;
                            res_transaction.SenderBranchName = resbank.SenderBranchName;
                            res_transaction.RecieverBankName = resbank.RecieverBankName;
                            res_transaction.RecieverBranchName = resbank.RecieverBranchName;
                        }
                        else
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }

                    }
                    if (resMerchantOrders != null)
                    {
                        res_transaction.MerchantId = resMerchantOrders.MerchantId;
                        res_transaction.MerchantOrganization = resMerchantOrders.OrganizationName;
                    }
                    bool IsTransactionSaved = res_transaction.Add();

                    if (IsTransactionSaved)
                    {
                        TransactionID = res_transaction.TransactionUniqueId;
                        Common.Common.AddLogs("Transaction Initiated For " + VendorApiTypeName + " (Transaction ID: " + TransactionID.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(res_transaction.MemberId), res_transaction.MemberName, true, res_transaction.Platform, res_transaction.DeviceCode);

                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                        {
                            if (resbank.Id > 0)
                            {
                                resbank.Status = (int)WalletTransactions.Statuses.Success;
                                resbank.Reference = res_transaction.TransactionUniqueId;
                                resbank.ParentTransactionId = res_transaction.TransactionUniqueId;
                                bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
                                if (bankstatus)
                                {
                                    AddDepositOrders outobject = new AddDepositOrders();
                                    GetDepositOrders inobject = new GetDepositOrders();
                                    inobject.TransactionId = BankTransactionId;
                                    AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
                                    if (resDeposit.Id > 0)
                                    {
                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Success;
                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");

                                        Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), objVendor_API_Requests.MemberId, objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                    }
                                    Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                }
                                else
                                {
                                    Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, objVendor_API_Requests.PlatForm, objVendor_API_Requests.DeviceCode);
                                }
                            }
                        }

                        msg = "success";
                        return res_transaction.TransactionUniqueId;
                    }
                    else
                    {
                        msg = "Transaction Not Saved";
                        return "";
                    }
                }
                else
                {
                    msg = "Bank Transaction Already Updated";
                    return "";
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message;
                WalletBalance = 0;

            }
            return "";
        }


        public static string UpdateArhantInsuranceWalletBalance(AddCouponsScratched resCoupon, ref string TransactionID, string BankTransactionId, string WalletType, string UniqueCustomerId,string Amount, out string msg, int VendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, string VendorJsonLookup, out decimal WalletBalance, string ClassName, string Remarks = "", string Purpose = "", int VendorType = 1, AddMerchantOrders resMerchantOrders = null)
        //internal static void UpdateWalletBalance(AddCouponsScratched resCoupon, ref string transactionID, string bankTransactionId, string walletType, string uniqueCustomerID, string amount, out string msg, int vendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, out decimal walletBalance)

        {
            try
            {
                if (string.IsNullOrEmpty(WalletType))
                {
                    WalletType = "0";
                }
                decimal CouponDeduct = 0;
                decimal RewardPointWalletBalance = Convert.ToDecimal(resGetRecord.TotalRewardPoints);
                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                AddBankTransactions outbank = new AddBankTransactions();
                GetBankTransactions inbank = new GetBankTransactions();
                inbank.TransactionUniqueId = BankTransactionId;
                AddBankTransactions resbank = new AddBankTransactions();
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                AddCalculateServiceChargeAndCashback objOut = new AddCalculateServiceChargeAndCashback();
                if (resMerchantOrders != null)
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceChargeMerchant(resMerchantOrders.MerchantId, Amount, VendorApiType.ToString());
                    CouponDeduct = objOut.DiscountAmount; // Add Merchant Discount Also Here
                }
                else
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                }
                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount));
                }
                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - (Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct));
                    if (resCoupon != null && resCoupon.Id != 0)
                    {
                        decimal TrnCouponLimit = Convert.ToDecimal((Convert.ToDecimal(Amount) * resCoupon.CouponPercentage) / 100);
                        if (resCoupon.MinimumAmount > 0 && resCoupon.MinimumAmount > TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MinimumAmount;
                        }
                        else if (resCoupon.MaximumAmount > 0 && resCoupon.MaximumAmount < TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MaximumAmount;
                        }
                        CouponDeduct = CouponDeduct + TrnCouponLimit;
                        WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct)));
                    }
                }
                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - objOut.MPCoinsDebit - CouponDeduct)));
                    RewardPointWalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit);
                }
                if (WalletType != ((int)(WalletTransactions.WalletTypes.Bank)).ToString() || Common.Common.CheckBankTransactionExists(resGetRecord.MemberId, BankTransactionId) == false)
                {

                    Guid TransactionGuid = Guid.NewGuid();
                    WalletTransactions res_transaction = new WalletTransactions();
                    res_transaction.MemberId = resGetRecord.MemberId;
                    res_transaction.MemberName = resGetRecord.FirstName + " " + resGetRecord.LastName;
                    res_transaction.ContactNumber = resGetRecord.ContactNumber;
                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.Amount = Convert.ToDecimal(Amount) - objOut.MPCoinsDebit;
                    }
                    else
                    {
                        //res_transaction.Amount = Convert.ToDecimal(Amount);
                        res_transaction.Amount = Convert.ToDecimal(Amount) - Convert.ToDecimal(CouponDeduct);
                    }
                    var additional = new
                    {
                        CustomerId = UniqueCustomerId,
                        Classname = ClassName,
                        Amount = Amount,
                        

                     };
                     string aaa = JsonConvert.SerializeObject(additional);
 
                    res_transaction.VendorTransactionId = objVendor_API_Requests.Res_Khalti_Id;
                    res_transaction.ParentTransactionId = BankTransactionId;
                    res_transaction.CurrentBalance = WalletBalance;
                    res_transaction.CreatedBy = objVendor_API_Requests.CreatedBy;
                    res_transaction.CreatedByName = objVendor_API_Requests.CreatedByName;
                    res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                    res_transaction.Remarks = (Remarks == "" ? objVendor_API_Requests.Res_Khalti_Message : Remarks);
                    res_transaction.Purpose = (Purpose);
                    res_transaction.Type = VendorApiType;
                    res_transaction.Description = objVendor_API_Requests.Res_Khalti_Message;
                    res_transaction.Status = res_transaction.GetTransactionStatusEnum(objVendor_API_Requests.Res_Khalti_State);
                    res_transaction.Reference = objVendor_API_Requests.Req_ReferenceNo;
                    res_transaction.IsApprovedByAdmin = true;
                    res_transaction.IsActive = true;
                    res_transaction.Platform = objVendor_API_Requests.PlatForm;
                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Debit);
                    res_transaction.CustomerID = UniqueCustomerId;
                    res_transaction.AdditionalInfo1 = aaa;

                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                    {
                        res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.FonePay;
                    }
                    else
                    {
                        if (VendorType != 1)
                        {
                            res_transaction.VendorType = VendorType;
                        }
                        else
                        {
                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.khalti;
                        }
                    }
                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                    res_transaction.RewardPointBalance = resGetRecord.TotalRewardPoints;
                    res_transaction.VendorJsonLookup = VendorJsonLookup;

                    if ((WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay)))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                        res_transaction.CouponCode = resCoupon.CouponCode;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.MPCoinsDebit = objOut.MPCoinsDebit;
                        res_transaction.RewardPointBalance = (resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.MPCoins;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                    {
                        if (string.IsNullOrEmpty(BankTransactionId))
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }
                        resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
                        if (resbank.Id > 0)
                        {
                            res_transaction.TransactionAmount = objOut.Amount;
                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Bank;
                            res_transaction.RecieverName = resbank.RecieverName;
                            res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
                            res_transaction.RecieverBankCode = resbank.RecieverBankCode;
                            res_transaction.RecieverBranch = resbank.RecieverBranch;
                            res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                            res_transaction.SenderBankCode = resbank.SenderBankCode;
                            res_transaction.SenderBranch = resbank.SenderBranch;
                            res_transaction.Purpose = resbank.Purpose;
                            res_transaction.SenderBankName = resbank.SenderBankName;
                            res_transaction.SenderBranchName = resbank.SenderBranchName;
                            res_transaction.RecieverBankName = resbank.RecieverBankName;
                            res_transaction.RecieverBranchName = resbank.RecieverBranchName;
                        }
                        else
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }

                    }
                    if (resMerchantOrders != null)
                    {
                        res_transaction.MerchantId = resMerchantOrders.MerchantId;
                        res_transaction.MerchantOrganization = resMerchantOrders.OrganizationName;
                    }
                    bool IsTransactionSaved = res_transaction.Add();

                    if (IsTransactionSaved)
                    {
                        TransactionID = res_transaction.TransactionUniqueId;
                        Common.Common.AddLogs("Transaction Initiated For " + VendorApiTypeName + " (Transaction ID: " + TransactionID.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(res_transaction.MemberId), res_transaction.MemberName, true, res_transaction.Platform, res_transaction.DeviceCode);

                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                        {
                            if (resbank.Id > 0)
                            {
                                resbank.Status = (int)WalletTransactions.Statuses.Success;
                                resbank.Reference = res_transaction.TransactionUniqueId;
                                resbank.ParentTransactionId = res_transaction.TransactionUniqueId;
                                bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
                                if (bankstatus)
                                {
                                    AddDepositOrders outobject = new AddDepositOrders();
                                    GetDepositOrders inobject = new GetDepositOrders();
                                    inobject.TransactionId = BankTransactionId;
                                    AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
                                    if (resDeposit.Id > 0)
                                    {
                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Success;
                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");

                                        Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), objVendor_API_Requests.MemberId, objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                    }
                                    Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                }
                                else
                                {
                                    Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, objVendor_API_Requests.PlatForm, objVendor_API_Requests.DeviceCode);
                                }
                            }
                        }

                        msg = "success";
                        return res_transaction.TransactionUniqueId;
                    }
                    else
                    {
                        msg = "Transaction Not Saved";
                        return "";
                    }
                }
                else
                {
                    msg = "Bank Transaction Already Updated";
                    return "";
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message;
                WalletBalance = 0;

            }
            return "";
        }


        public static string UpdateWalletBalanceWithGenericCoupon(AddCouponsScratched resCoupon, ref string TransactionID, string BankTransactionId, string WalletType, string UniqueCustomerId, string Amount, out string msg, int VendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, string VendorJsonLookup, out decimal WalletBalance, string Remarks = "", string Purpose = "", int VendorType = 1, AddMerchantOrders resMerchantOrders = null,
        decimal netAmount = 0, decimal TransactionAmount = 0, string CouponCode = "", decimal couponDiscount = 0)

        {
            try
            {
                if (string.IsNullOrEmpty(WalletType))
                {
                    WalletType = "0";
                }
                decimal CouponDeduct = 0;
                decimal RewardPointWalletBalance = Convert.ToDecimal(resGetRecord.TotalRewardPoints);
                WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
                AddBankTransactions outbank = new AddBankTransactions();
                GetBankTransactions inbank = new GetBankTransactions();
                inbank.TransactionUniqueId = BankTransactionId;
                AddBankTransactions resbank = new AddBankTransactions();
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                AddCalculateServiceChargeAndCashback objOut = new AddCalculateServiceChargeAndCashback();
                if (resMerchantOrders != null)
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceChargeMerchant(resMerchantOrders.MerchantId, Amount, VendorApiType.ToString());
                    CouponDeduct = objOut.DiscountAmount; // Add Merchant Discount Also Here
                }
                else
                {
                    objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
                }
                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount));
                }
                else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - (Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct));
                    if (resCoupon != null && resCoupon.Id != 0)
                    {
                        decimal TrnCouponLimit = Convert.ToDecimal((Convert.ToDecimal(Amount) * resCoupon.CouponPercentage) / 100);
                        if (resCoupon.MinimumAmount > 0 && resCoupon.MinimumAmount > TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MinimumAmount;
                        }
                        else if (resCoupon.MaximumAmount > 0 && resCoupon.MaximumAmount < TrnCouponLimit)
                        {
                            TrnCouponLimit = resCoupon.MaximumAmount;
                        }
                        CouponDeduct = CouponDeduct + TrnCouponLimit;
                        WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct)));
                    }
                }
                else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                {
                    WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - objOut.MPCoinsDebit - CouponDeduct)));
                    RewardPointWalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit);
                }
                if (WalletType != ((int)(WalletTransactions.WalletTypes.Bank)).ToString() || Common.Common.CheckBankTransactionExists(resGetRecord.MemberId, BankTransactionId) == false)
                {

                    Guid TransactionGuid = Guid.NewGuid();
                    WalletTransactions res_transaction = new WalletTransactions();
                    res_transaction.MemberId = resGetRecord.MemberId;
                    res_transaction.MemberName = resGetRecord.FirstName + " " + resGetRecord.LastName;
                    res_transaction.ContactNumber = resGetRecord.ContactNumber;
                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.Amount = Convert.ToDecimal(Amount) - objOut.MPCoinsDebit;
                    }
                    else
                    {
                        //res_transaction.Amount = Convert.ToDecimal(Amount);
                        res_transaction.Amount = Convert.ToDecimal(Amount) - Convert.ToDecimal(CouponDeduct);
                    }
                    res_transaction.VendorTransactionId = objVendor_API_Requests.Res_Khalti_Id;
                    res_transaction.ParentTransactionId = BankTransactionId;
                    res_transaction.CurrentBalance = WalletBalance;
                    res_transaction.CreatedBy = objVendor_API_Requests.CreatedBy;
                    res_transaction.CreatedByName = objVendor_API_Requests.CreatedByName;
                    res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                    res_transaction.Remarks = (Remarks == "" ? objVendor_API_Requests.Res_Khalti_Message : Remarks);
                    res_transaction.Purpose = (Purpose);
                    res_transaction.Type = VendorApiType;
                    res_transaction.Description = objVendor_API_Requests.Res_Khalti_Message;
                    res_transaction.Status = res_transaction.GetTransactionStatusEnum(objVendor_API_Requests.Res_Khalti_State);
                    res_transaction.Reference = objVendor_API_Requests.Req_ReferenceNo;
                    res_transaction.IsApprovedByAdmin = true;
                    res_transaction.IsActive = true;
                    res_transaction.Platform = objVendor_API_Requests.PlatForm;
                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Debit);
                    res_transaction.CustomerID = UniqueCustomerId;

                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
                    {
                        res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.FonePay;
                    }
                    else
                    {
                        if (VendorType != 1)
                        {
                            res_transaction.VendorType = VendorType;
                        }
                        else if (VendorType == 8)
                        {
                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
                        }
                        else
                        {
                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.khalti;
                        }
                    }
                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                    res_transaction.RewardPointBalance = resGetRecord.TotalRewardPoints;
                    res_transaction.VendorJsonLookup = VendorJsonLookup;

                    if ((WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay)))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                        res_transaction.CouponCode = resCoupon.CouponCode;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                    {
                        res_transaction.TransactionAmount = objOut.Amount;
                        res_transaction.MPCoinsDebit = objOut.MPCoinsDebit;
                        res_transaction.RewardPointBalance = (resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit;
                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.MPCoins;
                        res_transaction.CouponDiscount = CouponDeduct;
                    }
                    else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                    {
                        if (string.IsNullOrEmpty(BankTransactionId))
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }
                        resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
                        if (resbank.Id > 0)
                        {
                            res_transaction.TransactionAmount = objOut.Amount;
                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Bank;
                            res_transaction.RecieverName = resbank.RecieverName;
                            res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
                            res_transaction.RecieverBankCode = resbank.RecieverBankCode;
                            res_transaction.RecieverBranch = resbank.RecieverBranch;
                            res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                            res_transaction.SenderBankCode = resbank.SenderBankCode;
                            res_transaction.SenderBranch = resbank.SenderBranch;
                            res_transaction.Purpose = resbank.Purpose;
                            res_transaction.SenderBankName = resbank.SenderBankName;
                            res_transaction.SenderBranchName = resbank.SenderBranchName;
                            res_transaction.RecieverBankName = resbank.RecieverBankName;
                            res_transaction.RecieverBranchName = resbank.RecieverBranchName;
                        }
                        else
                        {
                            msg = "BankTransactionId Not Found";
                            return "";
                        }

                    }
                    if (resMerchantOrders != null)
                    {
                        res_transaction.MerchantId = resMerchantOrders.MerchantId;
                        res_transaction.MerchantOrganization = resMerchantOrders.OrganizationName;
                    }
                    if (!string.IsNullOrEmpty(CouponCode))
                    {
                        res_transaction.CouponCode = CouponCode;
                    }
                    if (couponDiscount != 0)
                    {
                        res_transaction.CouponDiscount = couponDiscount;
                    }
                    if (TransactionAmount != 0)
                    {
                        res_transaction.TransactionAmount = TransactionAmount;
                    }
                    if (netAmount != 0)
                    {
                        res_transaction.NetAmount = netAmount;
                    }



                    bool IsTransactionSaved = res_transaction.Add();

                    if (IsTransactionSaved)
                    {
                        TransactionID = res_transaction.TransactionUniqueId;
                        Common.Common.AddLogs("Transaction Initiated For " + VendorApiTypeName + " (Transaction ID: " + TransactionID.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(res_transaction.MemberId), res_transaction.MemberName, true, res_transaction.Platform, res_transaction.DeviceCode);

                        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                        {
                            if (resbank.Id > 0)
                            {
                                resbank.Status = (int)WalletTransactions.Statuses.Success;
                                resbank.Reference = res_transaction.TransactionUniqueId;
                                resbank.ParentTransactionId = res_transaction.TransactionUniqueId;
                                bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
                                if (bankstatus)
                                {
                                    AddDepositOrders outobject = new AddDepositOrders();
                                    GetDepositOrders inobject = new GetDepositOrders();
                                    inobject.TransactionId = BankTransactionId;
                                    AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
                                    if (resDeposit.Id > 0)
                                    {
                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Success;
                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");

                                        Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), objVendor_API_Requests.MemberId, objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                    }
                                    Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

                                }
                                else
                                {
                                    Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, objVendor_API_Requests.PlatForm, objVendor_API_Requests.DeviceCode);
                                }
                            }
                        }

                        msg = "success";
                        return res_transaction.TransactionUniqueId;
                    }
                    else
                    {
                        msg = "Transaction Not Saved";
                        return "";
                    }
                }
                else
                {
                    msg = "Bank Transaction Already Updated";
                    return "";
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message;
                WalletBalance = 0;

            }
            return "";
        }


        //public static string UpdateWalletBalanceWithGenericCoupon(AddCouponsScratched resCoupon, ref string TransactionID, string BankTransactionId, string WalletType, string UniqueCustomerId, string Amount, out string msg, int VendorApiType, AddUserLoginWithPin resGetRecord, AddVendor_API_Requests objVendor_API_Requests, string VendorJsonLookup, out decimal WalletBalance, string Remarks = "", string Purpose = "", int VendorType = 1, AddMerchantOrders resMerchantOrders = null,
        //decimal netAmount = 0, decimal TransactionAmount = 0, string CouponCode = "" , decimal couponDiscount = 0)

        //{
        //    try
        //    {
        //        if (string.IsNullOrEmpty(WalletType))
        //        {
        //            WalletType = "0";
        //        }
        //        decimal CouponDeduct = 0;
        //        decimal RewardPointWalletBalance = Convert.ToDecimal(resGetRecord.TotalRewardPoints);
        //        WalletBalance = Convert.ToDecimal(resGetRecord.TotalAmount);
        //        AddBankTransactions outbank = new AddBankTransactions();
        //        GetBankTransactions inbank = new GetBankTransactions();
        //        inbank.TransactionUniqueId = BankTransactionId;
        //        AddBankTransactions resbank = new AddBankTransactions();
        //        string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
        //        AddCalculateServiceChargeAndCashback objOut = new AddCalculateServiceChargeAndCashback();
        //        if (resMerchantOrders != null)
        //        {
        //            objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceChargeMerchant(resMerchantOrders.MerchantId, Amount, VendorApiType.ToString());
        //            CouponDeduct = objOut.DiscountAmount; // Add Merchant Discount Also Here
        //        }
        //        else
        //        {
        //            objOut = MyPay.Models.Common.Common.CalculateNetAmountWithServiceCharge(resGetRecord.MemberId.ToString(), Amount, VendorApiType.ToString());
        //        }
        //        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
        //        {
        //            WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount));
        //        }
        //        else if (WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
        //        {
        //            WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - (Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct));
        //            if (resCoupon != null && resCoupon.Id != 0)
        //            {
        //                decimal TrnCouponLimit = Convert.ToDecimal((Convert.ToDecimal(Amount) * resCoupon.CouponPercentage) / 100);
        //                if (resCoupon.MinimumAmount > 0 && resCoupon.MinimumAmount > TrnCouponLimit)
        //                {
        //                    TrnCouponLimit = resCoupon.MinimumAmount;
        //                }
        //                else if (resCoupon.MaximumAmount > 0 && resCoupon.MaximumAmount < TrnCouponLimit)
        //                {
        //                    TrnCouponLimit = resCoupon.MaximumAmount;
        //                }
        //                CouponDeduct = CouponDeduct + TrnCouponLimit;
        //                WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - CouponDeduct)));
        //            }
        //        }
        //        else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
        //        {
        //            WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalAmount) - ((Convert.ToDecimal(objOut.Amount) + Convert.ToDecimal(objOut.ServiceCharge) - objOut.MPCoinsDebit - CouponDeduct)));
        //            RewardPointWalletBalance = Convert.ToDecimal(Convert.ToDecimal(resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit);
        //        }
        //        if (WalletType != ((int)(WalletTransactions.WalletTypes.Bank)).ToString() || Common.Common.CheckBankTransactionExists(resGetRecord.MemberId, BankTransactionId) == false)
        //        {

        //            Guid TransactionGuid = Guid.NewGuid();
        //            WalletTransactions res_transaction = new WalletTransactions();
        //            res_transaction.MemberId = resGetRecord.MemberId;
        //            res_transaction.MemberName = resGetRecord.FirstName + " " + resGetRecord.LastName;
        //            res_transaction.ContactNumber = resGetRecord.ContactNumber;
        //            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
        //            {
        //                res_transaction.Amount = Convert.ToDecimal(Amount) - objOut.MPCoinsDebit;
        //            }
        //            else
        //            {
        //                //res_transaction.Amount = Convert.ToDecimal(Amount);
        //                res_transaction.Amount = Convert.ToDecimal(Amount) - Convert.ToDecimal(CouponDeduct);
        //            }
        //            res_transaction.VendorTransactionId = objVendor_API_Requests.Res_Khalti_Id;
        //            res_transaction.ParentTransactionId = BankTransactionId;
        //            res_transaction.CurrentBalance = WalletBalance;
        //            res_transaction.CreatedBy = objVendor_API_Requests.CreatedBy; 
        //            res_transaction.CreatedByName = objVendor_API_Requests.CreatedByName;
        //            res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
        //            res_transaction.Remarks = (Remarks == "" ? objVendor_API_Requests.Res_Khalti_Message : Remarks);
        //            res_transaction.Purpose = (Purpose);
        //            res_transaction.Type = VendorApiType;
        //            res_transaction.Description = objVendor_API_Requests.Res_Khalti_Message;
        //            res_transaction.Status = res_transaction.GetTransactionStatusEnum(objVendor_API_Requests.Res_Khalti_State);
        //            res_transaction.Reference = objVendor_API_Requests.Req_ReferenceNo;
        //            res_transaction.IsApprovedByAdmin = true;
        //            res_transaction.IsActive = true;
        //            res_transaction.Platform = objVendor_API_Requests.PlatForm;
        //            res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Debit);
        //            res_transaction.CustomerID = UniqueCustomerId;

        //            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay))
        //            {
        //                res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.FonePay;
        //            }
        //            else
        //            {
        //                if (VendorType != 1)
        //                {
        //                    res_transaction.VendorType = VendorType;
        //                }
        //                else if(VendorType==8)
        //                {
        //                    res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.BusSewa;
        //                }
        //                else
        //                {
        //                    res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.khalti;
        //                }
        //            }
        //            res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
        //            res_transaction.RewardPointBalance = resGetRecord.TotalRewardPoints;
        //            res_transaction.VendorJsonLookup = VendorJsonLookup;

        //            if ((WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay)))
        //            {
        //                res_transaction.TransactionAmount = objOut.Amount;
        //                res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
        //                res_transaction.CouponCode = resCoupon.CouponCode;
        //                res_transaction.CouponDiscount = CouponDeduct;
        //            }
        //            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
        //            {
        //                res_transaction.TransactionAmount = objOut.Amount;
        //                res_transaction.MPCoinsDebit = objOut.MPCoinsDebit;
        //                res_transaction.RewardPointBalance = (resGetRecord.TotalRewardPoints) - objOut.MPCoinsDebit;
        //                res_transaction.WalletType = (int)WalletTransactions.WalletTypes.MPCoins;
        //                res_transaction.CouponDiscount = CouponDeduct;
        //            }
        //            else if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
        //            {
        //                if (string.IsNullOrEmpty(BankTransactionId))
        //                {
        //                    msg = "BankTransactionId Not Found";
        //                    return "";
        //                }
        //                resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
        //                if (resbank.Id > 0)
        //                {
        //                    res_transaction.TransactionAmount = objOut.Amount;
        //                    res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Bank;
        //                    res_transaction.RecieverName = resbank.RecieverName;
        //                    res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
        //                    res_transaction.RecieverBankCode = resbank.RecieverBankCode;
        //                    res_transaction.RecieverBranch = resbank.RecieverBranch;
        //                    res_transaction.SenderAccountNo = resbank.SenderAccountNo;
        //                    res_transaction.SenderBankCode = resbank.SenderBankCode;
        //                    res_transaction.SenderBranch = resbank.SenderBranch;
        //                    res_transaction.Purpose = resbank.Purpose;
        //                    res_transaction.SenderBankName = resbank.SenderBankName;
        //                    res_transaction.SenderBranchName = resbank.SenderBranchName;
        //                    res_transaction.RecieverBankName = resbank.RecieverBankName;
        //                    res_transaction.RecieverBranchName = resbank.RecieverBranchName;
        //                }
        //                else
        //                {
        //                    msg = "BankTransactionId Not Found";
        //                    return "";
        //                }

        //            }
        //            if (resMerchantOrders != null)
        //            {
        //                res_transaction.MerchantId = resMerchantOrders.MerchantId;
        //                res_transaction.MerchantOrganization = resMerchantOrders.OrganizationName;
        //            }
        //            if (!string.IsNullOrEmpty(CouponCode)) {
        //                res_transaction.CouponCode = CouponCode;
        //            }
        //            if (couponDiscount != 0)
        //            {
        //                res_transaction.CouponDiscount = couponDiscount;
        //            }
        //            if (TransactionAmount != 0)
        //            {
        //                res_transaction.TransactionAmount= TransactionAmount;
        //            }
        //            if (netAmount != 0)
        //            {
        //                res_transaction.NetAmount = netAmount;
        //            }



        //            bool IsTransactionSaved = res_transaction.Add();

        //            if (IsTransactionSaved)
        //            {
        //                TransactionID = res_transaction.TransactionUniqueId;
        //                Common.Common.AddLogs("Transaction Initiated For " + VendorApiTypeName + " (Transaction ID: " + TransactionID.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Transaction), Convert.ToInt64(res_transaction.MemberId), res_transaction.MemberName, true, res_transaction.Platform, res_transaction.DeviceCode);

        //                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
        //                {
        //                    if (resbank.Id > 0)
        //                    {
        //                        resbank.Status = (int)WalletTransactions.Statuses.Success;
        //                        resbank.Reference = res_transaction.TransactionUniqueId;
        //                        resbank.ParentTransactionId = res_transaction.TransactionUniqueId;
        //                        bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
        //                        if (bankstatus)
        //                        {
        //                            AddDepositOrders outobject = new AddDepositOrders();
        //                            GetDepositOrders inobject = new GetDepositOrders();
        //                            inobject.TransactionId = BankTransactionId;
        //                            AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
        //                            if (resDeposit.Id > 0)
        //                            {
        //                                resDeposit.Status = (int)AddDepositOrders.DepositStatus.Success;
        //                                RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");

        //                                Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), objVendor_API_Requests.MemberId, objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

        //                            }
        //                            Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, resDeposit.Platform, resDeposit.DeviceCode);

        //                        }
        //                        else
        //                        {
        //                            Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + objVendor_API_Requests.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(objVendor_API_Requests.MemberId), objVendor_API_Requests.MemberName, true, objVendor_API_Requests.PlatForm, objVendor_API_Requests.DeviceCode);
        //                        }
        //                    }
        //                }

        //                msg = "success";
        //                return res_transaction.TransactionUniqueId;
        //            }
        //            else
        //            {
        //                msg = "Transaction Not Saved";
        //                return "";
        //            }
        //        }
        //        else
        //        {
        //            msg = "Bank Transaction Already Updated";
        //            return "";
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        msg = ex.Message;
        //        WalletBalance = 0;

        //    }
        //    return "";
        //}

        public static string DistributeComission(WalletTransactions res_transaction, AddUserLoginWithPin resGetRecord, string VendorApiTypeName, AddVendor_API_Requests resVendor_API_Requests)
        {
            try
            {
                // **********************************************************************************************
                // ********* GET REFEREEE OF CURRENT USER AND DISTRIBUTE TRANSACTION COMMISSION *****************
                // **********************************************************************************************
                AddUserLoginWithPin refres_Parent = new AddUserLoginWithPin();
                //if (resGetRecord.RefId != 0)
                {
                    AddUserLoginWithPin outrefobject_Parent = new AddUserLoginWithPin();
                    GetUserLoginWithPin inrefobject_Parent = new GetUserLoginWithPin();
                    inrefobject_Parent.MemberId = resGetRecord.RefId;
                    if (resGetRecord.RefId > 0)
                    {
                        refres_Parent = RepCRUD<GetUserLoginWithPin, AddUserLoginWithPin>.GetRecord(Common.Common.StoreProcedures.sp_Users_GetLoginWithPin, inrefobject_Parent, outrefobject_Parent);
                    }
                    //if (refres_Parent.Id > 0)
                    {
                        //if (refres_Parent.IsKYCApproved == (int)AddUser.kyc.Verified)
                        {
                            decimal RewardPoint = 0;
                            string platform = API_User_platform;
                            string devicecode = API_User_devicecode;
                            string authenticationToken = API_User_authenticationToken;
                            string UserInput = string.Empty;
                            bool IsCommissionDistributed = MyPay.Models.Common.Common.DistributeRegistrationCommisionPoints(platform, devicecode, true, resGetRecord.MemberId, refres_Parent, authenticationToken, UserInput, ref RewardPoint, (int)AddSettings.CommissionType.TransactionCommission, res_transaction.TransactionUniqueId);
                        }
                    }
                }

                #region SendEmailConfirmation
                string mystring = File.ReadAllText(HttpContext.Current.Server.MapPath("/Templates/ServiceTransaction.html"));
                string body = mystring;
                body = body.Replace("##Amount##", (res_transaction.Amount).ToString("0.00"));
                if (res_transaction.Type == (int)VendorApi_CommonHelper.KhaltiAPIName.Transer_by_phone)
                {
                    body = body.Replace("##TransactionId##", res_transaction.Reference);
                }
                else
                {
                    body = body.Replace("##TransactionId##", res_transaction.TransactionUniqueId);
                }
                body = body.Replace("##ConsumerTransactionId##", res_transaction.Reference);
                body = body.Replace("##Date##", Common.Common.fnGetdatetimeFromInput(res_transaction.CreatedDate));
                body = body.Replace("##Type##", WalletTransactions.Signs.Debit.ToString());
                body = body.Replace("##Service##", VendorApiTypeName);
                body = body.Replace("##Status##", WalletTransactions.Statuses.Success.ToString());
                body = body.Replace("##Cashback##", res_transaction.CashBack.ToString("0.00"));
                body = body.Replace("##ServiceCharge##", res_transaction.ServiceCharge.ToString("0.00"));
                body = body.Replace("##Purpose##", res_transaction.Description);
                body = body.Replace("##Remarks##", res_transaction.Remarks);

                string Subject = MyPay.Models.Common.Common.WebsiteName + " - Paid Successfully For " + VendorApiTypeName;
                if (!string.IsNullOrEmpty(resGetRecord.Email))
                {
                    body = body.Replace("##UserName##", resGetRecord.FirstName);
                    MyPay.Models.Common.Common.SendAsyncMail(resGetRecord.Email, Subject, body);
                }
                #endregion

                Common.Common.AddLogs("Update wallet balance after Transaction for " + VendorApiTypeName + " (Transaction ID: " + res_transaction.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Wallet), Convert.ToInt64(resVendor_API_Requests.MemberId), "", true, resVendor_API_Requests.PlatForm, resVendor_API_Requests.DeviceCode);
                return "Success";
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }


        public static string ValidateUserInputs(string Req_ReferenceNo, string Amount, string number, string MemberId, int InputNumber_Digits)
        {

            // *********************************************************************************//
            // ****** Validate API User Input Before Sending Further for Processing  ********** //
            // ********************************************************************************//
            string msg = string.Empty;
            if (string.IsNullOrEmpty(Req_ReferenceNo) || Req_ReferenceNo == "0")
            {
                msg = "Please enter Reference no.";
            }
            else if (string.IsNullOrEmpty(Amount) || Amount == "0")
            {
                msg = "Please enter Amount.";
            }
            else if (!string.IsNullOrEmpty(Amount))
            {
                decimal Num;
                bool isNum = decimal.TryParse(Amount, out Num);
                if (!isNum)
                {
                    msg = "Please enter valid Amount.";
                }
                else if (Convert.ToDecimal(Amount) <= 0)
                {
                    msg = "Please enter valid Amount.";
                }
            }
            if (string.IsNullOrEmpty(msg))
            {
                if (string.IsNullOrEmpty(MemberId) || MemberId == "0")
                {
                    msg = "Please enter MemberId.";
                }
                else if (string.IsNullOrEmpty(number))
                {
                    msg = "Please enter number.";
                }
                else if (number.Length != InputNumber_Digits)
                {
                    msg = "Please enter valid number.";
                }
            }

            if (string.IsNullOrEmpty(msg))
            {
                if (!string.IsNullOrEmpty(number))
                {
                    Int64 Num;
                    bool isNum = Int64.TryParse(number, out Num);
                    if (!isNum)
                    {
                        msg = "Please enter valid number.";
                    }
                }
                else if (!string.IsNullOrEmpty(MemberId))
                {
                    Int64 Num;
                    bool isNum = Int64.TryParse(MemberId.ToString(), out Num);
                    if (!isNum)
                    {
                        msg = "Please enter valid MemberId.";
                    }
                }
            }

            return msg;
        }

        public static AddVendor_API_Requests SendDataToVendor_SaveResponse(string KhaltiAPIURL, string Req_ReferenceNo, Int64 MemberId, string MemberName, string JsonReq,
            string authenticationToken, string UserInput, string DeviceCode, string PlatForm, int VendorApiType, string TransactionUniqueID = "", string UserMessage = "", string API_URL = "", string API_VENDOR = "", Int64 Vendor_API_RequestsID = 0)
        {

            AddVendor_API_Requests resVendor_API_Requests = new AddVendor_API_Requests();
            if (Vendor_API_RequestsID != 0)
            {
                AddVendor_API_Requests outobject = new AddVendor_API_Requests();
                GetVendor_API_Requests inobject = new GetVendor_API_Requests();
                inobject.Id = Vendor_API_RequestsID;
                resVendor_API_Requests = RepCRUD<GetVendor_API_Requests, AddVendor_API_Requests>.GetRecord(Models.Common.Common.StoreProcedures.sp_VendorAPIRequest_Get, inobject, outobject);

            }
            // ********************************************************//
            // *** Sent To Vendor API and Save Transactinon in DB **** //
            // ********************************************************//
            try
            {
                string username = string.Empty;
                string CreatedBy_MemberId = "0";

                if (!string.IsNullOrEmpty(authenticationToken))
                {
                    var handler = new JwtSecurityTokenHandler();
                    var jwtSecurityToken = handler.ReadJwtToken(authenticationToken);
                    username = jwtSecurityToken.Payload["username"].ToString();
                    CreatedBy_MemberId = jwtSecurityToken.Payload["memberid"].ToString();
                }
                else if (MemberId != 0 && MemberName != "")
                {
                    username = MemberName;
                    CreatedBy_MemberId = MemberId.ToString();
                }
                else
                {
                    username = Common.Common.CreatedByName;
                    CreatedBy_MemberId = Common.Common.CreatedBy.ToString();
                }
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();

                API_User_platform = PlatForm;
                API_User_devicecode = DeviceCode;
                API_User_authenticationToken = authenticationToken;

                resVendor_API_Requests.CreatedByName = username;
                resVendor_API_Requests.CreatedBy = Convert.ToInt64(CreatedBy_MemberId);
                resVendor_API_Requests.Req_Input = UserInput;
                resVendor_API_Requests.Req_ReferenceNo = Req_ReferenceNo;
                resVendor_API_Requests.Req_URL = HttpContext.Current.Request.Url.ToString();
                resVendor_API_Requests.IsApprovedByAdmin = true;
                resVendor_API_Requests.IsActive = true;
                resVendor_API_Requests.MemberId = MemberId;
                resVendor_API_Requests.MemberName = MemberName;
                if (string.IsNullOrEmpty(API_VENDOR))
                {
                    resVendor_API_Requests.VendorType = (int)VendorTypes.khalti;
                }
                else
                {
                    resVendor_API_Requests.VendorType = Convert.ToInt32(API_VENDOR);
                }
                resVendor_API_Requests.VendorApiType = VendorApiType;
                resVendor_API_Requests.DeviceCode = DeviceCode;
                resVendor_API_Requests.PlatForm = PlatForm;
                resVendor_API_Requests.Req_Token = RequestedToken;
                resVendor_API_Requests.IpAddress = MyPay.Models.Common.Common.GetUserIP();
                if (string.IsNullOrEmpty(TransactionUniqueID))
                {

                    resVendor_API_Requests.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                }
                else
                {
                    resVendor_API_Requests.TransactionUniqueId = TransactionUniqueID;
                }

                if (JsonReq != String.Empty)
                {
                    resVendor_API_Requests.Req_Khalti_Input = JsonReq;
                    resVendor_API_Requests.Req_Khalti_ReferenceNo = Req_ReferenceNo;
                    if (string.IsNullOrEmpty(API_URL))
                    {
                        resVendor_API_Requests.Req_Khalti_URL = KhaltiApiUrl_Prefix + KhaltiAPIURL;
                    }
                    else
                    {
                        resVendor_API_Requests.Req_Khalti_URL = API_URL;
                    }
                    resVendor_API_Requests.Res_Khalti_Status = false;
                    resVendor_API_Requests.Res_Khalti_State = Request_Status.Pending.ToString();
                }
                if (VendorApiType == 200 || VendorApiType == 400 || VendorApiType == 202|| VendorApiType == 204)   //--BusSewa--// //-- Organization--// //--NepalPay QR--// //--Tourist Bus--//
                {
                    if (JsonReq == String.Empty)
                    {
                        resVendor_API_Requests.Req_Khalti_URL = API_URL;
                    }

                }  //---Bus Sewa--// //-- Organization--//

                if (DeviceCode.ToLower() != "webservice")
                {
                    if (resVendor_API_Requests != null && resVendor_API_Requests.Id != 0)
                    {
                        RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resVendor_API_Requests, "vendor_api_requests");
                    }
                    else
                    {
                        resVendor_API_Requests.Id = RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Insert(resVendor_API_Requests, "vendor_api_requests");
                    }
                }
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        resVendor_API_Requests.Res_Khalti_Message = $"- Property: \"{ve.PropertyName}\", Error: \"{ve.ErrorMessage}\"";
                    }
                }
            }
            catch (Exception ex)
            {
                resVendor_API_Requests.Res_Khalti_Message = ex.Message;
            }


            return resVendor_API_Requests;
        }


        public static AddVendor_API_Requests SendDataToVendor_SaveResponseIME(string KhaltiAPIURL, string Req_ReferenceNo, Int64 MemberId, string MemberName, string JsonReq,
            string authenticationToken, string UserInput, string DeviceCode, string PlatForm, int VendorApiType, string TransactionUniqueID = "", string UserMessage = "", string API_URL = "", string API_VENDOR = "", Int64 Vendor_API_RequestsID = 0)
        {

            AddVendor_API_Requests resVendor_API_Requests = new AddVendor_API_Requests();
            if (Vendor_API_RequestsID != 0)
            {
                AddVendor_API_Requests outobject = new AddVendor_API_Requests();
                GetVendor_API_Requests inobject = new GetVendor_API_Requests();
                inobject.Id = Vendor_API_RequestsID;
                resVendor_API_Requests = RepCRUD<GetVendor_API_Requests, AddVendor_API_Requests>.GetRecord(Models.Common.Common.StoreProcedures.sp_VendorAPIRequest_Get, inobject, outobject);

            }
            // ********************************************************//
            // *** Sent To Vendor API and Save Transactinon in DB **** //
            // ********************************************************//
            try
            {
                string username = string.Empty;
                string CreatedBy_MemberId = "0";

                if (!string.IsNullOrEmpty(authenticationToken))
                {
                    var handler = new JwtSecurityTokenHandler();
                    var jwtSecurityToken = handler.ReadJwtToken(authenticationToken);
                    username = jwtSecurityToken.Payload["username"].ToString();
                    CreatedBy_MemberId = jwtSecurityToken.Payload["memberid"].ToString();
                }
                else if (MemberId != 0 && MemberName != "")
                {
                    username = MemberName;
                    CreatedBy_MemberId = MemberId.ToString();
                }
                else
                {
                    username = Common.Common.CreatedByName;
                    CreatedBy_MemberId = Common.Common.CreatedBy.ToString();
                }
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();

                API_User_platform = PlatForm;
                API_User_devicecode = DeviceCode;
                API_User_authenticationToken = authenticationToken;

                resVendor_API_Requests.CreatedByName = username;
                resVendor_API_Requests.CreatedBy = Convert.ToInt64(CreatedBy_MemberId);
                resVendor_API_Requests.Req_Input = UserInput;
                //resVendor_API_Requests.Req_ReferenceNo = Req_ReferenceNo;
                resVendor_API_Requests.Req_URL = HttpContext.Current.Request.Url.ToString();
                resVendor_API_Requests.IsApprovedByAdmin = true;
                resVendor_API_Requests.IsActive = true;
                resVendor_API_Requests.MemberId = MemberId;
                resVendor_API_Requests.MemberName = MemberName;
                if (string.IsNullOrEmpty(API_VENDOR))
                {
                    resVendor_API_Requests.VendorType = (int)VendorTypes.khalti;
                }
                else
                {
                    resVendor_API_Requests.VendorType = Convert.ToInt32(API_VENDOR);
                }
                resVendor_API_Requests.VendorApiType = VendorApiType;
                resVendor_API_Requests.DeviceCode = DeviceCode;
                resVendor_API_Requests.PlatForm = PlatForm;
                resVendor_API_Requests.Req_Token = RequestedToken;
                resVendor_API_Requests.IpAddress = MyPay.Models.Common.Common.GetUserIP();
                if (string.IsNullOrEmpty(TransactionUniqueID))
                {

                    resVendor_API_Requests.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                }
                else
                {
                    resVendor_API_Requests.TransactionUniqueId = TransactionUniqueID;
                }

                if (JsonReq != String.Empty)
                {
                    resVendor_API_Requests.Req_Khalti_Input = JsonReq;
                   // resVendor_API_Requests.Req_Khalti_ReferenceNo = Req_ReferenceNo;
                    if (string.IsNullOrEmpty(API_URL))
                    {
                        resVendor_API_Requests.Req_Khalti_URL = KhaltiApiUrl_Prefix + KhaltiAPIURL;
                    }
                    else
                    {
                        resVendor_API_Requests.Req_Khalti_URL = API_URL;
                    }
                    resVendor_API_Requests.Res_Khalti_Status = false;
                    resVendor_API_Requests.Res_Khalti_State = Request_Status.Pending.ToString();
                }
                if (VendorApiType == 200 || VendorApiType == 400)   //--BusSewa--// //-- Organization--//
                {
                    if (JsonReq == String.Empty)
                    {
                        resVendor_API_Requests.Req_Khalti_URL = API_URL;
                    }

                }  //---Bus Sewa--// //-- Organization--//

                if (DeviceCode.ToLower() != "webservice")
                {
                    if (resVendor_API_Requests != null && resVendor_API_Requests.Id != 0)
                    {
                        RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resVendor_API_Requests, "vendor_api_requests");
                    }
                    else
                    {
                        resVendor_API_Requests.Id = RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Insert(resVendor_API_Requests, "vendor_api_requests");
                    }
                }
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        resVendor_API_Requests.Res_Khalti_Message = $"- Property: \"{ve.PropertyName}\", Error: \"{ve.ErrorMessage}\"";
                    }
                }
            }
            catch (Exception ex)
            {
                resVendor_API_Requests.Res_Khalti_Message = ex.Message;
            }


            return resVendor_API_Requests;
        }


        // *** SAVE API REQUEST REMITTANCE
        #region SaveAPIRequest Remittance
        public static AddVendor_API_Requests SendDataToRemittance_SaveResponse(string KhaltiAPIURL, string Req_ReferenceNo, Int64 MemberId, string MemberName, string JsonReq,
            string authenticationToken, string UserInput, string DeviceCode, string PlatForm, int VendorApiType, string TransactionUniqueID = "", string UserMessage = "", string API_URL = "", string API_VENDOR = "", Int64 Vendor_API_RequestsID = 0)
        {

            AddVendor_API_Requests resVendor_API_Requests = new AddVendor_API_Requests();
            if (Vendor_API_RequestsID != 0)
            {
                AddVendor_API_Requests outobject = new AddVendor_API_Requests();
                GetVendor_API_Requests inobject = new GetVendor_API_Requests();
                inobject.Id = Vendor_API_RequestsID;
                resVendor_API_Requests = RepCRUD<GetVendor_API_Requests, AddVendor_API_Requests>.GetRecord(Models.Common.Common.StoreProcedures.sp_RemittanceAPIRequest_Get, inobject, outobject);

            }
            // ********************************************************//
            // *** Sent To Remittance Vendor API and Save Transactinon in DB **** //
            // ********************************************************//
            try
            {
                string username = string.Empty;
                string CreatedBy_MemberId = "0";

                if (!string.IsNullOrEmpty(authenticationToken))
                {
                    var handler = new JwtSecurityTokenHandler();
                    var jwtSecurityToken = handler.ReadJwtToken(authenticationToken);
                    username = jwtSecurityToken.Payload["username"].ToString();
                    CreatedBy_MemberId = jwtSecurityToken.Payload["memberid"].ToString();
                }
                else if (MemberId != 0 && MemberName != "")
                {
                    username = MemberName;
                    CreatedBy_MemberId = MemberId.ToString();
                }
                else
                {
                    username = Common.Common.CreatedByName;
                    CreatedBy_MemberId = Common.Common.CreatedBy.ToString();
                }
                string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), Convert.ToInt64(VendorApiType)).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();

                API_User_platform = PlatForm;
                API_User_devicecode = DeviceCode;
                API_User_authenticationToken = authenticationToken;

                resVendor_API_Requests.CreatedByName = username;
                resVendor_API_Requests.CreatedBy = Convert.ToInt64(CreatedBy_MemberId);
                resVendor_API_Requests.Req_Input = UserInput;
                resVendor_API_Requests.Req_ReferenceNo = Req_ReferenceNo;
                resVendor_API_Requests.Req_URL = HttpContext.Current.Request.Url.ToString();
                resVendor_API_Requests.IsApprovedByAdmin = true;
                resVendor_API_Requests.IsActive = true;
                resVendor_API_Requests.MemberId = MemberId;
                resVendor_API_Requests.MemberName = MemberName;
                if (string.IsNullOrEmpty(API_VENDOR))
                {
                    resVendor_API_Requests.VendorType = (int)VendorTypes.khalti;
                }
                else
                {
                    resVendor_API_Requests.VendorType = Convert.ToInt32(API_VENDOR);
                }
                resVendor_API_Requests.VendorApiType = VendorApiType;
                resVendor_API_Requests.DeviceCode = DeviceCode;
                resVendor_API_Requests.PlatForm = PlatForm;
                resVendor_API_Requests.Req_Token = RequestedToken;
                resVendor_API_Requests.IpAddress = MyPay.Models.Common.Common.GetUserIP();
                if (string.IsNullOrEmpty(TransactionUniqueID))
                {

                    resVendor_API_Requests.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                }
                else
                {
                    resVendor_API_Requests.TransactionUniqueId = TransactionUniqueID;
                }

                if (JsonReq != String.Empty)
                {
                    resVendor_API_Requests.Req_Khalti_Input = JsonReq;
                    resVendor_API_Requests.Req_Khalti_ReferenceNo = Req_ReferenceNo;
                    if (string.IsNullOrEmpty(API_URL))
                    {
                        resVendor_API_Requests.Req_Khalti_URL = KhaltiApiUrl_Prefix + KhaltiAPIURL;
                    }
                    else
                    {
                        resVendor_API_Requests.Req_Khalti_URL = API_URL;
                    }
                    resVendor_API_Requests.Res_Khalti_Status = false;
                    resVendor_API_Requests.Res_Khalti_State = Request_Status.Pending.ToString();
                }
                if (DeviceCode.ToLower() != "webservice")
                {
                    if (resVendor_API_Requests != null && resVendor_API_Requests.Id != 0)
                    {
                        RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resVendor_API_Requests, "Remittance_API_Requests");
                    }
                    else
                    {
                        resVendor_API_Requests.Id = RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Insert(resVendor_API_Requests, "Remittance_API_Requests");
                    }
                }
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    foreach (var ve in eve.ValidationErrors)
                    {
                        resVendor_API_Requests.Res_Khalti_Message = $"- Property: \"{ve.PropertyName}\", Error: \"{ve.ErrorMessage}\"";
                    }
                }
            }
            catch (Exception ex)
            {
                resVendor_API_Requests.Res_Khalti_Message = ex.Message;
            }


            return resVendor_API_Requests;
        }

        #endregion

        public static AddVendor_API_Requests UpdateVendorResponse(string KhaltiAPIURL, string JsonReq, string DeviceCode, string PlatForm, int VendorApiType, string VendorApiTypeName, long Id, string UserMessage = "",string VendorOutputResponse = "", string VendorURL = "")
        {

            log4net.Config.XmlConfigurator.ConfigureAndWatch(new System.IO.FileInfo(AppDomain.CurrentDomain.BaseDirectory + "log4net.config"));
            ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            log.Info("Log4Net is working at VendorAPI Helper");
            log.Info("Vendor API Type: " + VendorApiType);
            log.Info("JSON Req: " + JsonReq);
            log.Info("Vendor URL: " + VendorURL);
            log.Info("Vendor API response passed here: " + VendorOutputResponse);

            AddVendor_API_Requests resVendor_API_Request = new AddVendor_API_Requests();
            try
            {
                AddVendor_API_Requests outobject = new AddVendor_API_Requests();
                GetVendor_API_Requests inobject = new GetVendor_API_Requests();
                inobject.Id = Id;
                resVendor_API_Request = RepCRUD<GetVendor_API_Requests, AddVendor_API_Requests>.GetRecord(Models.Common.Common.StoreProcedures.sp_VendorAPIRequest_Get, inobject, outobject);

                if (Id != 0)
                {
                    if (JsonReq != String.Empty)
                    {
                        string json = string.Empty;
                        Vendor_Output_Response objRes = new Vendor_Output_Response();
                        if (VendorApiType <= 11)
                        {
                            log.Info("Sending JSONReq using POST METHOD in UpdateVendoResponse: " + KhaltiApiUrl_Prefix + KhaltiAPIURL);
                            json = PostMethod(ref resVendor_API_Request, KhaltiApiUrl_Prefix + KhaltiAPIURL, JsonReq);
                            resVendor_API_Request.Res_Khalti_Output = json;
                        }
                        else
                        {
                            json = VendorOutputResponse;
                            resVendor_API_Request.Res_Khalti_Output = json;
                            if (VendorApiType == 13) // KHANEPANI -- response is differenct format
                            {
                                JObject khanepani_output = JObject.Parse(json);
                                //khanepani_output.Property("detail").Remove();
                                json = khanepani_output.ToString();
                            }
                        }

                        if (!string.IsNullOrEmpty(json))
                        {
                            try
                            {
                                if (VendorApiType == 104) // PlasmaTech
                                {
                                    //JToken parsedJson = JToken.Parse(json);
                                    objRes.state = "success";
                                    resVendor_API_Request.Res_Khalti_Status = true;
                                    resVendor_API_Request.Res_Khalti_State = Request_Status.Success.ToString();
                                    UniqueTransactionId = resVendor_API_Request.TransactionUniqueId;
                                    resVendor_API_Request.Req_Khalti_Input = UserMessage;
                                    resVendor_API_Request.Req_Khalti_URL = VendorURL;
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(VendorURL))
                                    {
                                        resVendor_API_Request.Req_Khalti_URL = VendorURL;
                                    }

                                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<Vendor_Output_Response>(json);

                                    if (VendorApiType == (int)VendorApi_CommonHelper.KhaltiAPIName.MyPay_Events || VendorApiType == (int)VendorApi_CommonHelper.KhaltiAPIName.International_Voting)
                                    {
                                        resVendor_API_Request.Req_Khalti_Input = JsonReq;
                                        resVendor_API_Request.Res_Khalti_Output = VendorOutputResponse;
                                        resVendor_API_Request.Res_Khalti_Message = objRes.message;
                                        resVendor_API_Request.Req_Token = VendorApi_CommonHelper.EVENTS_API_KEY;
                                        if (objRes.success)
                                        {
                                            objRes.state = "success";
                                            resVendor_API_Request.Res_Khalti_Id = objRes.data.transactionId;
                                        }
                                        else
                                        {
                                            objRes.state = "failed";
                                            if (objRes.data != null)
                                            {
                                                resVendor_API_Request.Res_Khalti_Id = objRes.data.transactionId;

                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                resVendor_API_Request.Res_Khalti_Status = false;
                                resVendor_API_Request.Res_Khalti_State = Request_Status.Pending.ToString();
                                resVendor_API_Request.Res_Khalti_Message = "Json Request Error: " + ex.Message;
                                resVendor_API_Request.Res_Output = "Json Request Error: " + ex.Message;
                                resVendor_API_Request.Res_Khalti_ErrorCode = "3";
                                resVendor_API_Request.Res_Khalti_Output = json;
                            }
                            if (objRes != null)
                            {
                                if (objRes.state.ToLower() == "success")
                                {
                                    resVendor_API_Request.Res_Khalti_Status = true;
                                    resVendor_API_Request.Res_Khalti_State = Request_Status.Success.ToString();
                                    UniqueTransactionId = resVendor_API_Request.TransactionUniqueId;
                                }
                                else if (objRes.state.ToLower() == "queued")
                                {
                                    resVendor_API_Request.Res_Khalti_Status = false;
                                    resVendor_API_Request.Res_Khalti_State = Request_Status.Queued.ToString();
                                    UniqueTransactionId = resVendor_API_Request.TransactionUniqueId;
                                }
                                else if (objRes.state.ToLower() == "processing")
                                {
                                    resVendor_API_Request.Res_Khalti_Status = false;
                                    resVendor_API_Request.Res_Khalti_State = Request_Status.Processing.ToString();
                                    UniqueTransactionId = resVendor_API_Request.TransactionUniqueId;
                                }
                                else if ((objRes.state.ToLower() == "failed") || (objRes.state.ToLower() == "error") || (objRes.state.ToLower() == "status error") || (objRes.state.ToLower() == "expired"))
                                {
                                    resVendor_API_Request.Res_Khalti_Status = false;
                                    resVendor_API_Request.Res_Khalti_State = Request_Status.Failed.ToString();
                                }
                                else
                                {
                                    resVendor_API_Request.Res_Khalti_Status = false;
                                    resVendor_API_Request.Res_Khalti_State = Request_Status.Queued.ToString();
                                    UniqueTransactionId = resVendor_API_Request.TransactionUniqueId;
                                }
                                if (VendorApiType != (int)VendorApi_CommonHelper.KhaltiAPIName.MyPay_Events)
                                {
                                    if (string.IsNullOrEmpty(resVendor_API_Request.Res_Khalti_Id))
                                    {
                                        resVendor_API_Request.Res_Khalti_Id = objRes.id;
                                    }
                                }
                                if (VendorApiType == (int)VendorApi_CommonHelper.KhaltiAPIName.khalti_flight_airlines)
                                {
                                    string log_idscsv = string.Empty;
                                    for (int k = 0; k < objRes.log_ids.Count; k++)
                                    {
                                        log_idscsv = log_idscsv + objRes.log_ids[k].ToString() + (k == 0 ? "" : ",");
                                    }
                                    resVendor_API_Request.Res_Khalti_Id = log_idscsv;
                                }
                                resVendor_API_Request.Res_Khalti_Message = objRes.message;
                                resVendor_API_Request.Res_Output = objRes.message;
                                resVendor_API_Request.Res_Khalti_ErrorCode = objRes.error_code;
                                if (objRes.pin != null && objRes.pin != "")
                                {
                                    resVendor_API_Request.Res_Khalti_Pin = objRes.pin;
                                }
                                if (objRes.serial != null && objRes.serial != "")
                                {
                                    resVendor_API_Request.Res_Khalti_Serail = objRes.serial;
                                }
                                //VendorApi_CommonHelper.Pin = objRes.pin;
                                //VendorApi_CommonHelper.Serial = objRes.serial;
                            }
                            RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resVendor_API_Request, "vendor_api_requests");
                            Common.Common.AddLogs("API Requests saved for " + VendorApiTypeName + " with ReferenceNo : " + resVendor_API_Request.Req_Khalti_ReferenceNo + ". (" + resVendor_API_Request.Res_Khalti_Message + ")", false, Convert.ToInt32(AddLog.LogType.DBLogs), Convert.ToInt64(resVendor_API_Request.MemberId), "", true, PlatForm, DeviceCode, 0, Convert.ToInt64(Common.Common.GetCreatedById(Common.Common.authenticationToken)), (Common.Common.GetCreatedByName(Common.Common.authenticationToken))); vendor_api_requests_Id = Id;
                        }
                        else
                        {
                            resVendor_API_Request.Res_Khalti_Status = false;
                            resVendor_API_Request.Res_Khalti_State = Request_Status.Failed.ToString();
                            resVendor_API_Request.Res_Khalti_Message = "Json Request Not Found";
                            resVendor_API_Request.Res_Output = "Json Request Not Found";
                            resVendor_API_Request.Res_Khalti_ErrorCode = "3";
                            resVendor_API_Request.Res_Khalti_Output = json;
                        }
                    }
                    else if (!string.IsNullOrEmpty(UserMessage))
                    {
                        resVendor_API_Request.Res_Output = UserMessage;
                        RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resVendor_API_Request, "vendor_api_requests");
                        Common.Common.AddLogs("API Requests saved for " + VendorApiTypeName + " with ReferenceNo : " + resVendor_API_Request.Req_Khalti_ReferenceNo + ". (" + UserMessage + ")", false, Convert.ToInt32(AddLog.LogType.ApiRequests), Convert.ToInt64(resVendor_API_Request.MemberId), "", true, PlatForm, DeviceCode, 0, Convert.ToInt64(Common.Common.GetCreatedById(Common.Common.authenticationToken)), (Common.Common.GetCreatedByName(Common.Common.authenticationToken))); vendor_api_requests_Id = Id;
                    }
                    else if (JsonReq == String.Empty)  //---Bus Sewa and Organization for json req null --//
                    {
                        if (VendorApiType == 200 || VendorApiType == 400)
                        {
                            string json = string.Empty;
                            Vendor_Output_Response objRes = new Vendor_Output_Response();

                            //var jsonDatas = JsonConvert.DeserializeObject<paymentConfirm>(json);
                            if (VendorApiType == 200 || VendorApiType == 400)
                            {

                                json = VendorOutputResponse;
                                resVendor_API_Request.Res_Khalti_Output = json;
                            }
                            if (!string.IsNullOrEmpty(json))
                            {
                                try
                                {
                                    if (!string.IsNullOrEmpty(VendorURL))
                                    {
                                        resVendor_API_Request.Req_Khalti_URL = VendorURL;
                                    }
                                    //objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<Vendor_Output_Response>(json);

                                    if (VendorApiType == (int)VendorApi_CommonHelper.KhaltiAPIName.MyPay_Events)
                                    {
                                        resVendor_API_Request.Req_Khalti_Input = JsonReq;
                                        resVendor_API_Request.Res_Khalti_Output = VendorOutputResponse;
                                        resVendor_API_Request.Res_Khalti_Message = objRes.message;
                                        resVendor_API_Request.Req_Token = VendorApi_CommonHelper.EVENTS_API_KEY;
                                        if (objRes.success)
                                        {
                                            objRes.state = "success";
                                            resVendor_API_Request.Res_Khalti_Id = objRes.data.transactionId;
                                        }
                                        else
                                        {
                                            objRes.state = "failed";
                                            if (objRes.data != null)
                                            {
                                                resVendor_API_Request.Res_Khalti_Id = objRes.data.transactionId;

                                            }
                                        }
                                        return resVendor_API_Request;
                                    }
                                }
                                catch (Exception ex)
                                {
                                    resVendor_API_Request.Res_Khalti_Status = false;
                                    resVendor_API_Request.Res_Khalti_State = Request_Status.Pending.ToString();
                                    resVendor_API_Request.Res_Khalti_Message = "Json Request Error: " + ex.Message;
                                    resVendor_API_Request.Res_Output = "Json Request Error: " + ex.Message;
                                    resVendor_API_Request.Res_Khalti_ErrorCode = "3";
                                    resVendor_API_Request.Res_Khalti_Output = json;
                                }
                                RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resVendor_API_Request, "vendor_api_requests");
                                Common.Common.AddLogs("API Requests saved for " + VendorApiTypeName + " with ReferenceNo : " + resVendor_API_Request.Req_Khalti_ReferenceNo + ". (" + resVendor_API_Request.Res_Khalti_Message + ")", false, Convert.ToInt32(AddLog.LogType.DBLogs), Convert.ToInt64(resVendor_API_Request.MemberId), "", true, PlatForm, DeviceCode, 0, Convert.ToInt64(Common.Common.GetCreatedById(Common.Common.authenticationToken)), (Common.Common.GetCreatedByName(Common.Common.authenticationToken))); vendor_api_requests_Id = Id;
                            }
                            else
                            {
                                resVendor_API_Request.Res_Khalti_Status = false;
                                resVendor_API_Request.Res_Khalti_State = Request_Status.Failed.ToString();
                                resVendor_API_Request.Res_Khalti_Message = "Json Request Not Found";
                                resVendor_API_Request.Res_Output = "Json Request Not Found";
                                resVendor_API_Request.Res_Khalti_ErrorCode = "3";
                                resVendor_API_Request.Res_Khalti_Output = json;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                resVendor_API_Request.Res_Khalti_Status = false;
                resVendor_API_Request.Res_Khalti_State = Request_Status.Pending.ToString();
                resVendor_API_Request.Res_Khalti_Message = ex.Message;
                resVendor_API_Request.Res_Output = ex.Message;
                resVendor_API_Request.Res_Khalti_ErrorCode = "3";
            }
            return resVendor_API_Request;
        }

        public static AddVendor_API_Requests UpdateVendorResponse_FonePay(string JsonReq, string DeviceCode, string PlatForm, int VendorApiType, string VendorApiTypeName, ref GetVendor_API_FonePay_Payment_Response objResponse, long Id, string UserMessage = "", string VendorOutputResponse = "", string qrRequestMessage = "")
        {
            AddVendor_API_Requests resVendor_API_Request = new AddVendor_API_Requests();
            try
            {

                AddVendor_API_Requests outobject = new AddVendor_API_Requests();
                GetVendor_API_Requests inobject = new GetVendor_API_Requests();
                inobject.Id = Id;
                resVendor_API_Request = RepCRUD<GetVendor_API_Requests, AddVendor_API_Requests>.GetRecord(Models.Common.Common.StoreProcedures.sp_VendorAPIRequest_Get, inobject, outobject);

                if (Id != 0)
                {
                    if (JsonReq != String.Empty)
                    {
                        resVendor_API_Request.Res_Khalti_Output = VendorOutputResponse;
                        if (!string.IsNullOrEmpty(VendorOutputResponse))
                        {
                            if (objResponse != null)
                            {
                                if (objResponse.responseCode.ToUpper() == "RES000")
                                {
                                    resVendor_API_Request.Res_Khalti_Status = true;
                                    resVendor_API_Request.Res_Khalti_State = Request_Status.Success.ToString();
                                    resVendor_API_Request.Res_Khalti_Message = "Transaction completed successfully";
                                    UniqueTransactionId = resVendor_API_Request.TransactionUniqueId;
                                }
                                else
                                {
                                    resVendor_API_Request.Res_Khalti_Status = false;
                                    resVendor_API_Request.Res_Khalti_State = Request_Status.Failed.ToString();
                                    resVendor_API_Request.Res_Khalti_Message = "Transaction failed with Respose Code: " + objResponse.responseCode.ToUpper();
                                }
                                resVendor_API_Request.Req_Token = qrRequestMessage;
                                resVendor_API_Request.Res_Khalti_Id = objResponse.transactionIdentifier;
                                resVendor_API_Request.Req_Khalti_ReferenceNo = objResponse.retrievalReferenceNumber;
                                resVendor_API_Request.Res_Output = objResponse.responseMessage;
                                resVendor_API_Request.Res_TraceId = objResponse.traceId;
                                resVendor_API_Request.Res_Khalti_ErrorCode = "";
                            }
                            RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resVendor_API_Request, "vendor_api_requests");
                            Common.Common.AddLogs("API Requests saved for " + VendorApiTypeName + " with ReferenceNo : " + resVendor_API_Request.Req_Khalti_ReferenceNo + ". (" + resVendor_API_Request.Res_Khalti_Message + ")", false, Convert.ToInt32(AddLog.LogType.ApiRequests), Convert.ToInt64(resVendor_API_Request.MemberId), "", true, PlatForm, DeviceCode, 0, Convert.ToInt64(Common.Common.GetCreatedById(Common.Common.authenticationToken)), (Common.Common.GetCreatedByName(Common.Common.authenticationToken))); vendor_api_requests_Id = Id;
                        }
                        else
                        {
                            resVendor_API_Request.Res_Khalti_Status = false;
                            resVendor_API_Request.Res_Khalti_State = Request_Status.Failed.ToString();
                            resVendor_API_Request.Res_Khalti_Message = "Json Request Not Found";
                            resVendor_API_Request.Res_Output = "Json Request Not Found";
                            resVendor_API_Request.Res_Khalti_ErrorCode = "3";
                            resVendor_API_Request.Res_Khalti_Output = VendorOutputResponse;
                        }
                    }
                    else if (!string.IsNullOrEmpty(UserMessage))
                    {
                        resVendor_API_Request.Res_Output = UserMessage;
                        RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resVendor_API_Request, "vendor_api_requests");
                        Common.Common.AddLogs("API Requests saved for " + VendorApiTypeName + " with ReferenceNo : " + resVendor_API_Request.Req_Khalti_ReferenceNo + ". (" + UserMessage + ")", false, Convert.ToInt32(AddLog.LogType.ApiRequests), Convert.ToInt64(resVendor_API_Request.MemberId), "", true, PlatForm, DeviceCode, 0, Convert.ToInt64(Common.Common.GetCreatedById(Common.Common.authenticationToken)), (Common.Common.GetCreatedByName(Common.Common.authenticationToken))); vendor_api_requests_Id = Id;
                    }
                }
            }
            catch (Exception ex)
            {
                resVendor_API_Request.Res_Khalti_Status = false;
                resVendor_API_Request.Res_Khalti_State = Request_Status.Pending.ToString();
                resVendor_API_Request.Res_Khalti_Message = ex.Message;
                resVendor_API_Request.Res_Output = ex.Message;
                resVendor_API_Request.Res_Khalti_ErrorCode = "3";
            }
            return resVendor_API_Request;
        }
        public static string RefundLinkedBankTransfer(string authenticationToken, string BankTransactionId, Int32 VendorApiType, string WalletType, AddUserLoginWithPin resuser, string TransactionId = "", string SuccessDepositOrderTxnId = "")
        {
            try
            {
                string username = String.Empty;
                string CreatedBy_MemberId = String.Empty;
                if (!string.IsNullOrEmpty(authenticationToken))
                {
                    var handler = new JwtSecurityTokenHandler();
                    var jwtSecurityToken = handler.ReadJwtToken(authenticationToken);
                    username = jwtSecurityToken.Payload["username"].ToString();
                    CreatedBy_MemberId = jwtSecurityToken.Payload["memberid"].ToString();
                }
                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                {
                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), VendorApiType).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();

                    if (string.IsNullOrEmpty(BankTransactionId))
                    {
                        Common.Common.AddLogs("BankTransactionId  Not Found For " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                        return "BankTransactionId  Not Found";
                    }

                    AddDepositOrders outobject = new AddDepositOrders();
                    GetDepositOrders inobject = new GetDepositOrders();
                    inobject.TransactionId = BankTransactionId;
                    AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
                    if (resDeposit.Id > 0)
                    {

                        WalletTransactions objWalletTransCheckBankRefund = new WalletTransactions();
                        objWalletTransCheckBankRefund.ParentTransactionId = resDeposit.TransactionId;
                        objWalletTransCheckBankRefund.MemberId = Convert.ToInt64(resDeposit.MemberId);
                        objWalletTransCheckBankRefund.Sign = (int)WalletTransactions.Signs.Credit;
                        objWalletTransCheckBankRefund.Status = (int)WalletTransactions.Statuses.Refund;
                        if (!objWalletTransCheckBankRefund.GetRecordCheckExists())
                        {
                            if (resDeposit.Type == (int)AddDepositOrders.DepositType.Linked_Bank_Deposit)
                            {
                                WalletTransactions intrans = new WalletTransactions();
                                intrans.Reference = BankTransactionId;
                                //intrans.Status = (int)WalletTransactions.Statuses.Refund;
                                if (!intrans.GetRecordCheckExists())
                                {
                                    decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges));

                                    WalletTransactions res_transaction = new WalletTransactions();
                                    res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
                                    res_transaction.ContactNumber = resuser.ContactNumber;
                                    res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                    res_transaction.Amount = Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges);
                                    res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
                                    res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                    res_transaction.CurrentBalance = WalletBalance;
                                    if (string.IsNullOrEmpty(authenticationToken))
                                    {
                                        res_transaction.CreatedBy = Common.Common.CreatedBy;
                                        res_transaction.CreatedByName = Common.Common.CreatedByName;
                                    }
                                    else
                                    {
                                        res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                        res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                                    }

                                    res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                                    res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
                                    res_transaction.Reference = resDeposit.TransactionId;
                                    //res_transaction.BatchTransactionId = resbank.BatchId;
                                    
                                    //res_transaction.TxnInstructionId = resbank.InstructionId;
                                    res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
                                    res_transaction.ParentTransactionId = BankTransactionId;
                                    //res_transaction.Purpose = user.Description;
                                    res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();

                                    res_transaction.Type = (int)VendorApi_CommonHelper.KhaltiAPIName.Deposit_By_Linked_Bank;
                                    res_transaction.Description = "Wallet Credited Successfully";
                                    res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
                                    res_transaction.IsApprovedByAdmin = true;
                                    res_transaction.IsActive = true;
                                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
                                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                                    res_transaction.RecieverAccountNo = Common.Common.ConnectIPs_AccountNumber;
                                    res_transaction.RecieverBankCode = Common.Common.ConnectIps_BankId;
                                    res_transaction.RecieverBranch = Common.Common.ConnectIPs_BranchName;
                                    res_transaction.RecieverBankName = Common.Common.ConnectIPs_BankName;
                                    res_transaction.RecieverBranchName = Common.Common.ConnectIPs_BranchName;
                                    //res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                                    //res_transaction.SenderBankCode = resbank.SenderBankCode;
                                    //res_transaction.SenderBranch = resbank.SenderBranch;
                                    res_transaction.NetAmount = Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges);
                                    res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                                    res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
                                    if (res_transaction.Add())
                                    {
                                        Common.Common.AddLogs("Deposit Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Refund;
                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");
                                        Common.Common.AddLogs("Deposit Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
                                        string Title = "Transaction Refunded";
                                        string Message = "TransactionId:" + BankTransactionId + " Refunded for " + VendorApiTypeName;
                                        Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
                                        return "Success";

                                    }
                                    else
                                    {
                                        Common.Common.AddLogs("Deposit Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                        return "Refund Transaction Not Execute";
                                    }
                                }
                                else
                                {
                                    return "Already Refunded";
                                }
                            }
                            else
                            {
                                AddBankTransactions outbank = new AddBankTransactions();
                                GetBankTransactions inbank = new GetBankTransactions();
                                inbank.TransactionUniqueId = BankTransactionId;
                                AddBankTransactions resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
                                if (resbank.Id > 0)
                                {
                                    resbank.Status = (int)WalletTransactions.Statuses.Success;

                                    AddBankTransactions outbankparent = new AddBankTransactions();
                                    GetBankTransactions inbankparent = new GetBankTransactions();
                                    inbankparent.ParentTransactionId = BankTransactionId;
                                    inbankparent.Status = (int)WalletTransactions.Statuses.Refund;
                                    AddBankTransactions resbankparent = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbankparent, outbankparent);
                                    if (resbankparent.Id == 0)
                                    {
                                        decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resbank.NetAmount));

                                        WalletTransactions res_transaction = new WalletTransactions();
                                        res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
                                        res_transaction.ContactNumber = resuser.ContactNumber;
                                        res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                        res_transaction.Amount = Convert.ToDecimal(resbank.NetAmount);
                                        res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
                                        res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                        res_transaction.CurrentBalance = WalletBalance;
                                        if (string.IsNullOrEmpty(authenticationToken))
                                        {
                                            res_transaction.CreatedBy = Common.Common.CreatedBy;
                                            res_transaction.CreatedByName = Common.Common.CreatedByName;
                                        }
                                        else
                                        {
                                            res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                            res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                                        }

                                        res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                                        res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
                                        res_transaction.Reference = resbank.TransactionUniqueId;
                                        res_transaction.BatchTransactionId = resbank.BatchId;
                                        res_transaction.TxnInstructionId = resbank.InstructionId;
                                        res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
                                        res_transaction.ParentTransactionId = BankTransactionId;
                                        //res_transaction.Purpose = user.Description;
                                        res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();

                                        res_transaction.Type = resbank.Type;
                                        res_transaction.Description = "Wallet Credited Successfully";
                                        res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
                                        res_transaction.IsApprovedByAdmin = true;
                                        res_transaction.IsActive = true;
                                        res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
                                        res_transaction.RecieverName = resbank.RecieverName;
                                        res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                                        res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
                                        res_transaction.RecieverBankCode = resbank.RecieverBankCode;
                                        res_transaction.RecieverBranch = resbank.RecieverBranch;
                                        res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                                        res_transaction.SenderBankCode = resbank.SenderBankCode;
                                        res_transaction.SenderBranch = resbank.SenderBranch;
                                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                                        res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
                                        if (res_transaction.Add())
                                        {
                                            Common.Common.AddLogs("Bank Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");

                                            bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
                                            if (bankstatus)
                                            {
                                                if (resDeposit.Id > 0)
                                                {
                                                    resDeposit.Status = (int)AddDepositOrders.DepositStatus.Refund;
                                                    RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");
                                                    Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), resuser.MemberId, (resuser.FirstName + " " + resuser.LastName), true, resDeposit.Platform, resDeposit.DeviceCode);
                                                }
                                                Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
                                                string Title = "Transaction Refunded";
                                                string Message = "TransactionId:" + BankTransactionId + " Refunded for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
                                                return "Success";
                                            }
                                            else
                                            {
                                                Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                                return "Update Failed";
                                            }
                                        }
                                        else
                                        {
                                            Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                            return "Refund Transaction Not Execute";
                                        }
                                    }
                                    else
                                    {
                                        return "Already Refunded";
                                    }
                                }
                                else
                                {
                                    if (SuccessDepositOrderTxnId != "" && SuccessDepositOrderTxnId == BankTransactionId)
                                    {
                                        // Ticket No. 246 Bank Txn was manually success from nps so bank txn is created for Linked Bank Txn - "paybill_n_recharge"

                                        AddBankTransactions res_BankTransaction = new AddBankTransactions();
                                        string WalletTransactionUniqueID = new CommonHelpers().GenerateUniqueId();
                                        decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resDeposit.Amount) + Convert.ToDecimal(resDeposit.ServiceCharges));

                                        res_BankTransaction.MemberId = resuser.MemberId;
                                        res_BankTransaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                        res_BankTransaction.Amount = resDeposit.Amount;
                                        res_BankTransaction.VendorTransactionId = resDeposit.RefferalsId;
                                        res_BankTransaction.ParentTransactionId = WalletTransactionUniqueID; // THIS FIELD IS KEPT EMPTY FOR NOW -- IT SHOULD BE PARENT TRANSACTION ID AGAINST CASHBACK.
                                        res_BankTransaction.CurrentBalance = WalletBalance;

                                        if (string.IsNullOrEmpty(authenticationToken))
                                        {
                                            res_BankTransaction.CreatedBy = Common.Common.CreatedBy;
                                            res_BankTransaction.CreatedByName = Common.Common.CreatedByName;
                                        }
                                        else
                                        {
                                            res_BankTransaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                            res_BankTransaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                                        }
                                        res_BankTransaction.TransactionUniqueId = BankTransactionId;
                                        res_BankTransaction.Remarks = "Payment Successfully Received";
                                        res_BankTransaction.Type = (int)VendorApi_CommonHelper.KhaltiAPIName.Credit_By_Linked_Bank;
                                        res_BankTransaction.Purpose = resDeposit.Remarks;
                                        res_BankTransaction.Description = resDeposit.Remarks;
                                        res_BankTransaction.Status = (int)WalletTransactions.Statuses.Refund;
                                        res_BankTransaction.Reference = WalletTransactionUniqueID;
                                        res_BankTransaction.IsApprovedByAdmin = true;
                                        res_BankTransaction.CreditStatus = "Success";
                                        res_BankTransaction.DebitStatus = "Success";
                                        res_BankTransaction.GatewayStatus = "Success";
                                        res_BankTransaction.IsActive = true;
                                        res_BankTransaction.Sign = Convert.ToInt16(RewardPointTransactions.Signs.Debit);
                                        res_BankTransaction.ResponseCode = "0";
                                        res_BankTransaction.RecieverName = Common.Common.ConnectIps_AccountName;
                                        res_BankTransaction.RecieverAccountNo = Common.Common.ConnectIPs_AccountNumber;
                                        res_BankTransaction.RecieverBankCode = Common.Common.ConnectIps_BankId;
                                        res_BankTransaction.RecieverBranch = Common.Common.ConnectIPs_BranchId;
                                        res_BankTransaction.RecieverBankName = Common.Common.ConnectIPs_BankName;
                                        res_BankTransaction.RecieverBranchName = Common.Common.ConnectIPs_BranchName;
                                        //res_BankTransaction.SenderAccountNo = resobject.AccountNumber;
                                        //res_BankTransaction.SenderBankCode = resobject.BankCode;
                                        //res_BankTransaction.SenderBranch = resobject.BranchId;
                                        //res_BankTransaction.SenderBankName = resobject.BankName;
                                        //res_BankTransaction.SenderBranchName = resobject.BranchId;
                                        res_BankTransaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                                        res_BankTransaction.ServiceCharge = resDeposit.ServiceCharges;
                                        res_BankTransaction.NetAmount = Convert.ToDecimal(resDeposit.Amount);
                                        res_BankTransaction.Sno = res_BankTransaction.GetBankTransactionSno();

                                        Int64 BankDepositId = 0;
                                        BankDepositId = RepCRUD<AddBankTransactions, GetBankTransactions>.Insert(res_BankTransaction, "banktransactions");
                                        if (BankDepositId > 0)
                                        {
                                            Common.Common.AddLogs("Bank Transaction Not Found. Created New Bank Transaction because this Transaction was manually success from 3rd party vendor: " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);

                                            WalletTransactions res_transaction = new WalletTransactions();
                                            res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
                                            res_transaction.ContactNumber = resuser.ContactNumber;
                                            res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                            res_transaction.Amount = Convert.ToDecimal(res_BankTransaction.NetAmount);
                                            res_transaction.NetAmount = Convert.ToDecimal(res_BankTransaction.NetAmount);
                                            res_transaction.ServiceCharge = Convert.ToDecimal(res_BankTransaction.ServiceCharge);
                                            res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
                                            res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                            res_transaction.CurrentBalance = WalletBalance;
                                            if (string.IsNullOrEmpty(authenticationToken))
                                            {
                                                res_transaction.CreatedBy = Common.Common.CreatedBy;
                                                res_transaction.CreatedByName = Common.Common.CreatedByName;
                                            }
                                            else
                                            {
                                                res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                                res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                                            }

                                            res_transaction.TransactionUniqueId = WalletTransactionUniqueID;
                                            res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
                                            res_transaction.Reference = res_BankTransaction.TransactionUniqueId;
                                            res_transaction.BatchTransactionId = res_BankTransaction.BatchId;
                                            res_transaction.TxnInstructionId = res_BankTransaction.InstructionId;
                                            res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
                                            res_transaction.ParentTransactionId = BankTransactionId;
                                            res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();
                                            res_transaction.Type = res_BankTransaction.Type;
                                            res_transaction.Description = "Wallet Credited Successfully";
                                            res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
                                            res_transaction.IsApprovedByAdmin = true;
                                            res_transaction.IsActive = true;
                                            res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
                                            res_transaction.RecieverName = res_BankTransaction.RecieverName;
                                            res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                                            res_transaction.RecieverAccountNo = res_BankTransaction.RecieverAccountNo;
                                            res_transaction.RecieverBankCode = res_BankTransaction.RecieverBankCode;
                                            res_transaction.RecieverBranch = res_BankTransaction.RecieverBranch;
                                            res_transaction.SenderAccountNo = res_BankTransaction.SenderAccountNo;
                                            res_transaction.SenderBankCode = res_BankTransaction.SenderBankCode;
                                            res_transaction.SenderBranch = res_BankTransaction.SenderBranch;
                                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
                                            bool RefundStatus = false;
                                            RefundStatus = res_transaction.Add();
                                            if (RefundStatus)
                                            {
                                                Common.Common.AddLogs("Bank Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                                bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(res_BankTransaction, "banktransactions");
                                                if (bankstatus)
                                                {
                                                    if (resDeposit.Id > 0)
                                                    {
                                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Refund;
                                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");
                                                        Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), resuser.MemberId, (resuser.FirstName + " " + resuser.LastName), true, resDeposit.Platform, resDeposit.DeviceCode);
                                                    }
                                                    Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
                                                    string Title = "Transaction Refunded";
                                                    string Message = "TransactionId:" + BankTransactionId + " Refunded for " + VendorApiTypeName;
                                                    //Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
                                                    return "Success from 3rd party vendor";
                                                }
                                                else
                                                {
                                                    Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                                    return "Update Failed";
                                                }
                                            }
                                            else
                                            {
                                                Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                                return "Refund Transaction Not Execute";
                                            }
                                        }
                                        else
                                        {

                                            Common.Common.AddLogs("Something Went Wrong Payment Not Sent", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), resuser.MemberId, resuser.FirstName + " " + resuser.LastName, true, resDeposit.Platform, resDeposit.DeviceCode);
                                            return "Something Went Wrong Payment Not Sent";
                                        }
                                    }
                                    else
                                    {
                                        return "Transaction Not Found";
                                    }
                                }
                            }
                        }
                        else
                        {
                            return "Transaction Already Refunded";
                        }
                    }
                    else
                    {
                        return "Transaction Order Not Found";
                    }
                }
                else if ((WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins)) && TransactionId != String.Empty)
                {
                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), VendorApiType).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                    WalletTransactions inWalletTransactions = new WalletTransactions();
                    inWalletTransactions.TransactionUniqueId = TransactionId;
                    if (inWalletTransactions.GetRecord())
                    {
                        WalletTransactions outWalletTransactions = new WalletTransactions();
                        outWalletTransactions.ParentTransactionId = TransactionId;
                        outWalletTransactions.Status = (int)WalletTransactions.Statuses.Refund;
                        if (outWalletTransactions.GetRecord() == false)
                        {
                            decimal WalletBalance = Convert.ToDecimal(resuser.TotalAmount);
                            WalletTransactions res_transaction = new WalletTransactions();
                            res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
                            res_transaction.ContactNumber = resuser.ContactNumber;
                            res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                            res_transaction.Amount = Convert.ToDecimal(inWalletTransactions.NetAmount);
                            res_transaction.RewardPoint = inWalletTransactions.RewardPoint;
                            res_transaction.RewardPointBalance = inWalletTransactions.RewardPointBalance;
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                            {
                                res_transaction.Amount = Convert.ToDecimal(inWalletTransactions.Amount) + Convert.ToDecimal(inWalletTransactions.ServiceCharge);
                                res_transaction.RewardPoint = inWalletTransactions.RewardPoint;
                                res_transaction.MPCoinsDebit = inWalletTransactions.MPCoinsDebit;
                                res_transaction.RewardPointBalance = inWalletTransactions.RewardPointBalance;
                                WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount));
                            }
                            res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
                            res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                            res_transaction.CurrentBalance = WalletBalance;
                            if (string.IsNullOrEmpty(authenticationToken))
                            {
                                res_transaction.CreatedBy = Common.Common.CreatedBy;
                                res_transaction.CreatedByName = Common.Common.CreatedByName;
                            }
                            else
                            {
                                res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                            }
                            Guid TransactionGuid = Guid.NewGuid();
                            res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                            res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
                            res_transaction.Reference = inWalletTransactions.TransactionUniqueId;
                            res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{inWalletTransactions.TransactionUniqueId}";
                            res_transaction.ParentTransactionId = inWalletTransactions.TransactionUniqueId;
                            //res_transaction.Purpose = user.Description;
                            res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();

                            res_transaction.Type = VendorApiType;
                            res_transaction.Description = "Wallet Credited Successfully";
                            res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
                            res_transaction.IsApprovedByAdmin = true;
                            res_transaction.IsActive = true;
                            res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
                            res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.MyPay;
                            if (res_transaction.Add())
                            {
                                Common.Common.AddLogs("Transaction Refund For " + VendorApiTypeName + " (Transaction ID: " + inWalletTransactions.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Wallet), Convert.ToInt64(inWalletTransactions.MemberId), "", true, "", "");

                                string Title = "Transaction Refunded";
                                string Message = "TransactionId: " + inWalletTransactions.TransactionUniqueId + " Refunded for " + VendorApiTypeName;
                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
                                return "Success";
                            }
                            else
                            {
                                Common.Common.AddLogs("Transaction Refund Failed For " + VendorApiTypeName + " (Transaction ID: " + inWalletTransactions.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Wallet), Convert.ToInt64(inWalletTransactions.MemberId), "", true, "", "");
                                return "Refund Transaction Not Execute";
                            }
                        }
                        else
                        {
                            return "Already Refunded";
                        }
                    }
                    else
                    {
                        return "Transaction not found";
                    }
                }
                else
                {
                    return "Payment Mode Not Found";
                }
            }
            catch (Exception ex)
            {
                return "Refund Initiate:" + ex.Message;
            }

        }
        public static string RefundLinkedBankTransferNCHL(string username, string authenticationToken, string BankTransactionId, Int32 VendorApiType, string WalletType, AddUserLoginWithPin resuser, string TransactionId = "", string SuccessDepositOrderTxnId = "")
        {
            try
            {
                // string username = String.Empty;
                string CreatedBy_MemberId = String.Empty;


                CreatedBy_MemberId = Convert.ToString(resuser.MemberId);

                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                {
                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), VendorApiType).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();

                    if (string.IsNullOrEmpty(BankTransactionId))
                    {
                        Common.Common.AddLogs("BankTransactionId  Not Found For " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                        return "BankTransactionId  Not Found";
                    }

                    AddDepositOrders outobject = new AddDepositOrders();
                    GetDepositOrders inobject = new GetDepositOrders();
                    inobject.TransactionId = BankTransactionId;
                    AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
                    if (resDeposit.Id > 0)
                    {

                        WalletTransactions objWalletTransCheckBankRefund = new WalletTransactions();
                        objWalletTransCheckBankRefund.ParentTransactionId = resDeposit.TransactionId;
                        objWalletTransCheckBankRefund.MemberId = Convert.ToInt64(resDeposit.MemberId);
                        objWalletTransCheckBankRefund.Sign = (int)WalletTransactions.Signs.Credit;
                        objWalletTransCheckBankRefund.Status = (int)WalletTransactions.Statuses.Refund;
                        if (!objWalletTransCheckBankRefund.GetRecordCheckExists())
                        {
                            if (resDeposit.Type == (int)AddDepositOrders.DepositType.Linked_Bank_Deposit)
                            {
                                WalletTransactions intrans = new WalletTransactions();
                                intrans.Reference = BankTransactionId;
                                //intrans.Status = (int)WalletTransactions.Statuses.Refund;
                                if (!intrans.GetRecordCheckExists())
                                {
                                    decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges));

                                    WalletTransactions res_transaction = new WalletTransactions();
                                    res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
                                    res_transaction.ContactNumber = resuser.ContactNumber;
                                    res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                    res_transaction.Amount = Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges);
                                    res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
                                    res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                    res_transaction.CurrentBalance = WalletBalance;
                                    if (string.IsNullOrEmpty(authenticationToken))
                                    {
                                        res_transaction.CreatedBy = Common.Common.CreatedBy;
                                        res_transaction.CreatedByName = Common.Common.CreatedByName;
                                    }
                                    else
                                    {
                                        res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                        res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                                    }

                                    res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                                    res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
                                    res_transaction.Reference = resDeposit.TransactionId;
                                    //res_transaction.BatchTransactionId = resbank.BatchId;
                                    //res_transaction.TxnInstructionId = resbank.InstructionId;
                                    res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
                                    res_transaction.ParentTransactionId = BankTransactionId;
                                    //res_transaction.Purpose = user.Description;
                                    res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();

                                    res_transaction.Type = (int)VendorApi_CommonHelper.KhaltiAPIName.Deposit_By_Linked_Bank;
                                    res_transaction.Description = "Wallet Credited Successfully";
                                    res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
                                    res_transaction.IsApprovedByAdmin = true;
                                    res_transaction.IsActive = true;
                                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
                                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                                    res_transaction.RecieverAccountNo = Common.Common.ConnectIPs_AccountNumber;
                                    res_transaction.RecieverBankCode = Common.Common.ConnectIps_BankId;
                                    res_transaction.RecieverBranch = Common.Common.ConnectIPs_BranchName;
                                    res_transaction.RecieverBankName = Common.Common.ConnectIPs_BankName;
                                    res_transaction.RecieverBranchName = Common.Common.ConnectIPs_BranchName;
                                    //res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                                    //res_transaction.SenderBankCode = resbank.SenderBankCode;
                                    //res_transaction.SenderBranch = resbank.SenderBranch;
                                    res_transaction.NetAmount = Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges);
                                    res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                                    res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
                                    if (res_transaction.Add())
                                    {
                                        Common.Common.AddLogs("Deposit Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Refund;
                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");
                                        Common.Common.AddLogs("Deposit Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
                                        string Title = "Transaction Refunded";
                                        string Message = "TransactionId:" + BankTransactionId + " Refunded for " + VendorApiTypeName;
                                        Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
                                        return "Success";

                                    }
                                    else
                                    {
                                        Common.Common.AddLogs("Deposit Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                        return "Refund Transaction Not Execute";
                                    }
                                }
                                else
                                {
                                    return "Already Refunded";
                                }
                            }
                            else
                            {
                                AddBankTransactions outbank = new AddBankTransactions();
                                GetBankTransactions inbank = new GetBankTransactions();
                                inbank.TransactionUniqueId = BankTransactionId;
                                AddBankTransactions resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
                                if (resbank.Id > 0)
                                {
                                    resbank.Status = (int)WalletTransactions.Statuses.Success;

                                    AddBankTransactions outbankparent = new AddBankTransactions();
                                    GetBankTransactions inbankparent = new GetBankTransactions();
                                    inbankparent.ParentTransactionId = BankTransactionId;
                                    inbankparent.Status = (int)WalletTransactions.Statuses.Refund;
                                    AddBankTransactions resbankparent = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbankparent, outbankparent);
                                    if (resbankparent.Id == 0)
                                    {
                                        decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resbank.NetAmount));

                                        WalletTransactions res_transaction = new WalletTransactions();
                                        res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
                                        res_transaction.ContactNumber = resuser.ContactNumber;
                                        res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                        res_transaction.Amount = Convert.ToDecimal(resbank.NetAmount);
                                        res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
                                        res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                        res_transaction.CurrentBalance = WalletBalance;
                                        if (string.IsNullOrEmpty(authenticationToken))
                                        {
                                            res_transaction.CreatedBy = Common.Common.CreatedBy;
                                            res_transaction.CreatedByName = Common.Common.CreatedByName;
                                        }
                                        else
                                        {
                                            res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                            res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                                        }

                                        res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                                        res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
                                        res_transaction.Reference = resbank.TransactionUniqueId;
                                        res_transaction.BatchTransactionId = resbank.BatchId;
                                        res_transaction.TxnInstructionId = resbank.InstructionId;
                                        res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
                                        res_transaction.ParentTransactionId = BankTransactionId;
                                        //res_transaction.Purpose = user.Description;
                                        res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();

                                        res_transaction.Type = resbank.Type;
                                        res_transaction.Description = "Wallet Credited Successfully";
                                        res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
                                        res_transaction.IsApprovedByAdmin = true;
                                        res_transaction.IsActive = true;
                                        res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
                                        res_transaction.RecieverName = resbank.RecieverName;
                                        res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                                        res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
                                        res_transaction.RecieverBankCode = resbank.RecieverBankCode;
                                        res_transaction.RecieverBranch = resbank.RecieverBranch;
                                        res_transaction.SenderAccountNo = resbank.SenderAccountNo;
                                        res_transaction.SenderBankCode = resbank.SenderBankCode;
                                        res_transaction.SenderBranch = resbank.SenderBranch;
                                        res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                                        res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
                                        if (res_transaction.Add())
                                        {
                                            Common.Common.AddLogs("Bank Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");

                                            bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
                                            if (bankstatus)
                                            {
                                                if (resDeposit.Id > 0)
                                                {
                                                    resDeposit.Status = (int)AddDepositOrders.DepositStatus.Refund;
                                                    RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");
                                                    Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), resuser.MemberId, (resuser.FirstName + " " + resuser.LastName), true, resDeposit.Platform, resDeposit.DeviceCode);
                                                }
                                                Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
                                                string Title = "Transaction Refunded";
                                                string Message = "TransactionId:" + BankTransactionId + " Refunded for " + VendorApiTypeName;
                                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
                                                return "Success";
                                            }
                                            else
                                            {
                                                Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                                return "Update Failed";
                                            }
                                        }
                                        else
                                        {
                                            Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                            return "Refund Transaction Not Execute";
                                        }
                                    }
                                    else
                                    {
                                        return "Already Refunded";
                                    }
                                }
                                else
                                {
                                    if (SuccessDepositOrderTxnId != "" && SuccessDepositOrderTxnId == BankTransactionId)
                                    {
                                        // Ticket No. 246 Bank Txn was manually success from nps so bank txn is created for Linked Bank Txn - "paybill_n_recharge"

                                        AddBankTransactions res_BankTransaction = new AddBankTransactions();
                                        string WalletTransactionUniqueID = new CommonHelpers().GenerateUniqueId();
                                        decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resDeposit.Amount) + Convert.ToDecimal(resDeposit.ServiceCharges));

                                        res_BankTransaction.MemberId = resuser.MemberId;
                                        res_BankTransaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                        res_BankTransaction.Amount = resDeposit.Amount;
                                        res_BankTransaction.VendorTransactionId = resDeposit.RefferalsId;
                                        res_BankTransaction.ParentTransactionId = WalletTransactionUniqueID; // THIS FIELD IS KEPT EMPTY FOR NOW -- IT SHOULD BE PARENT TRANSACTION ID AGAINST CASHBACK.
                                        res_BankTransaction.CurrentBalance = WalletBalance;

                                        if (string.IsNullOrEmpty(authenticationToken))
                                        {
                                            res_BankTransaction.CreatedBy = Common.Common.CreatedBy;
                                            res_BankTransaction.CreatedByName = Common.Common.CreatedByName;
                                        }
                                        else
                                        {
                                            res_BankTransaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                            res_BankTransaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                                        }
                                        res_BankTransaction.TransactionUniqueId = BankTransactionId;
                                        res_BankTransaction.Remarks = "Payment Successfully Received";
                                        res_BankTransaction.Type = (int)VendorApi_CommonHelper.KhaltiAPIName.Credit_By_Linked_Bank;
                                        res_BankTransaction.Purpose = resDeposit.Remarks;
                                        res_BankTransaction.Description = resDeposit.Remarks;
                                        res_BankTransaction.Status = (int)WalletTransactions.Statuses.Refund;
                                        res_BankTransaction.Reference = WalletTransactionUniqueID;
                                        res_BankTransaction.IsApprovedByAdmin = true;
                                        res_BankTransaction.CreditStatus = "Success";
                                        res_BankTransaction.DebitStatus = "Success";
                                        res_BankTransaction.GatewayStatus = "Success";
                                        res_BankTransaction.IsActive = true;
                                        res_BankTransaction.Sign = Convert.ToInt16(RewardPointTransactions.Signs.Debit);
                                        res_BankTransaction.ResponseCode = "0";
                                        res_BankTransaction.RecieverName = Common.Common.ConnectIps_AccountName;
                                        res_BankTransaction.RecieverAccountNo = Common.Common.ConnectIPs_AccountNumber;
                                        res_BankTransaction.RecieverBankCode = Common.Common.ConnectIps_BankId;
                                        res_BankTransaction.RecieverBranch = Common.Common.ConnectIPs_BranchId;
                                        res_BankTransaction.RecieverBankName = Common.Common.ConnectIPs_BankName;
                                        res_BankTransaction.RecieverBranchName = Common.Common.ConnectIPs_BranchName;
                                        //res_BankTransaction.SenderAccountNo = resobject.AccountNumber;
                                        //res_BankTransaction.SenderBankCode = resobject.BankCode;
                                        //res_BankTransaction.SenderBranch = resobject.BranchId;
                                        //res_BankTransaction.SenderBankName = resobject.BankName;
                                        //res_BankTransaction.SenderBranchName = resobject.BranchId;
                                        res_BankTransaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                                        res_BankTransaction.ServiceCharge = resDeposit.ServiceCharges;
                                        res_BankTransaction.NetAmount = Convert.ToDecimal(resDeposit.Amount);
                                        res_BankTransaction.Sno = res_BankTransaction.GetBankTransactionSno();

                                        Int64 BankDepositId = 0;
                                        BankDepositId = RepCRUD<AddBankTransactions, GetBankTransactions>.Insert(res_BankTransaction, "banktransactions");
                                        if (BankDepositId > 0)
                                        {
                                            Common.Common.AddLogs("Bank Transaction Not Found. Created New Bank Transaction because this Transaction was manually success from 3rd party vendor: " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);

                                            WalletTransactions res_transaction = new WalletTransactions();
                                            res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
                                            res_transaction.ContactNumber = resuser.ContactNumber;
                                            res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                            res_transaction.Amount = Convert.ToDecimal(res_BankTransaction.NetAmount);
                                            res_transaction.NetAmount = Convert.ToDecimal(res_BankTransaction.NetAmount);
                                            res_transaction.ServiceCharge = Convert.ToDecimal(res_BankTransaction.ServiceCharge);
                                            res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
                                            res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                            res_transaction.CurrentBalance = WalletBalance;
                                            if (string.IsNullOrEmpty(authenticationToken))
                                            {
                                                res_transaction.CreatedBy = Common.Common.CreatedBy;
                                                res_transaction.CreatedByName = Common.Common.CreatedByName;
                                            }
                                            else
                                            {
                                                res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                                res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                                            }

                                            res_transaction.TransactionUniqueId = WalletTransactionUniqueID;
                                            res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
                                            res_transaction.Reference = res_BankTransaction.TransactionUniqueId;
                                            res_transaction.BatchTransactionId = res_BankTransaction.BatchId;
                                            res_transaction.TxnInstructionId = res_BankTransaction.InstructionId;
                                            res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
                                            res_transaction.ParentTransactionId = BankTransactionId;
                                            res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();
                                            res_transaction.Type = res_BankTransaction.Type;
                                            res_transaction.Description = "Wallet Credited Successfully";
                                            res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
                                            res_transaction.IsApprovedByAdmin = true;
                                            res_transaction.IsActive = true;
                                            res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
                                            res_transaction.RecieverName = res_BankTransaction.RecieverName;
                                            res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                                            res_transaction.RecieverAccountNo = res_BankTransaction.RecieverAccountNo;
                                            res_transaction.RecieverBankCode = res_BankTransaction.RecieverBankCode;
                                            res_transaction.RecieverBranch = res_BankTransaction.RecieverBranch;
                                            res_transaction.SenderAccountNo = res_BankTransaction.SenderAccountNo;
                                            res_transaction.SenderBankCode = res_BankTransaction.SenderBankCode;
                                            res_transaction.SenderBranch = res_BankTransaction.SenderBranch;
                                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
                                            bool RefundStatus = false;
                                            RefundStatus = res_transaction.Add();
                                            if (RefundStatus)
                                            {
                                                Common.Common.AddLogs("Bank Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                                bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(res_BankTransaction, "banktransactions");
                                                if (bankstatus)
                                                {
                                                    if (resDeposit.Id > 0)
                                                    {
                                                        resDeposit.Status = (int)AddDepositOrders.DepositStatus.Refund;
                                                        RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");
                                                        Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), resuser.MemberId, (resuser.FirstName + " " + resuser.LastName), true, resDeposit.Platform, resDeposit.DeviceCode);
                                                    }
                                                    Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
                                                    string Title = "Transaction Refunded";
                                                    string Message = "TransactionId:" + BankTransactionId + " Refunded for " + VendorApiTypeName;
                                                    //Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
                                                    return "Success from 3rd party vendor";
                                                }
                                                else
                                                {
                                                    Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                                    return "Update Failed";
                                                }
                                            }
                                            else
                                            {
                                                Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                                return "Refund Transaction Not Execute";
                                            }
                                        }
                                        else
                                        {

                                            Common.Common.AddLogs("Something Went Wrong Payment Not Sent", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), resuser.MemberId, resuser.FirstName + " " + resuser.LastName, true, resDeposit.Platform, resDeposit.DeviceCode);
                                            return "Something Went Wrong Payment Not Sent";
                                        }
                                    }
                                    else
                                    {
                                        return "Transaction Not Found";
                                    }
                                }
                            }
                        }
                        else
                        {
                            return "Transaction Already Refunded";
                        }
                    }
                    else
                    {
                        return "Transaction Order Not Found";
                    }
                }
                else if ((WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins)) && TransactionId != String.Empty)
                {
                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), VendorApiType).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                    WalletTransactions inWalletTransactions = new WalletTransactions();
                    inWalletTransactions.TransactionUniqueId = TransactionId;
                    if (inWalletTransactions.GetRecord())
                    {
                        WalletTransactions outWalletTransactions = new WalletTransactions();
                        outWalletTransactions.ParentTransactionId = TransactionId;
                        outWalletTransactions.Status = (int)WalletTransactions.Statuses.Refund;
                        if (outWalletTransactions.GetRecord() == false)
                        {
                            decimal WalletBalance = Convert.ToDecimal(resuser.TotalAmount);
                            WalletTransactions res_transaction = new WalletTransactions();
                            res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
                            res_transaction.ContactNumber = resuser.ContactNumber;
                            res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                            res_transaction.Amount = Convert.ToDecimal(inWalletTransactions.NetAmount);
                            res_transaction.RewardPoint = inWalletTransactions.RewardPoint;
                            res_transaction.RewardPointBalance = inWalletTransactions.RewardPointBalance;
                            if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
                            {
                                res_transaction.Amount = Convert.ToDecimal(inWalletTransactions.Amount) + Convert.ToDecimal(inWalletTransactions.ServiceCharge);
                                res_transaction.RewardPoint = inWalletTransactions.RewardPoint;
                                res_transaction.MPCoinsDebit = inWalletTransactions.MPCoinsDebit;
                                res_transaction.RewardPointBalance = inWalletTransactions.RewardPointBalance;
                                WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount));
                            }
                            res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
                            res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                            res_transaction.CurrentBalance = WalletBalance;
                            if (string.IsNullOrEmpty(authenticationToken))
                            {
                                res_transaction.CreatedBy = Common.Common.CreatedBy;
                                res_transaction.CreatedByName = Common.Common.CreatedByName;
                            }
                            else
                            {
                                res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                            }
                            Guid TransactionGuid = Guid.NewGuid();
                            res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                            res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
                            res_transaction.Reference = inWalletTransactions.TransactionUniqueId;
                            res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{inWalletTransactions.TransactionUniqueId}";
                            res_transaction.ParentTransactionId = inWalletTransactions.TransactionUniqueId;
                            //res_transaction.Purpose = user.Description;
                            res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();

                            res_transaction.Type = VendorApiType;
                            res_transaction.Description = "Wallet Credited Successfully";
                            res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
                            res_transaction.IsApprovedByAdmin = true;
                            res_transaction.IsActive = true;
                            res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
                            res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                            res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                            res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.MyPay;
                            if (res_transaction.Add())
                            {
                                Common.Common.AddLogs("Transaction Refund For " + VendorApiTypeName + " (Transaction ID: " + inWalletTransactions.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Wallet), Convert.ToInt64(inWalletTransactions.MemberId), "", true, "", "");

                                string Title = "Transaction Refunded";
                                string Message = "TransactionId: " + inWalletTransactions.TransactionUniqueId + " Refunded for " + VendorApiTypeName;
                                Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
                                return "Success";
                            }
                            else
                            {
                                Common.Common.AddLogs("Transaction Refund Failed For " + VendorApiTypeName + " (Transaction ID: " + inWalletTransactions.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Wallet), Convert.ToInt64(inWalletTransactions.MemberId), "", true, "", "");
                                return "Refund Transaction Not Execute";
                            }
                        }
                        else
                        {
                            return "Already Refunded";
                        }
                    }
                    else
                    {
                        return "Transaction not found";
                    }
                }
                else
                {
                    return "Payment Mode Not Found";
                }
            }
            catch (Exception ex)
            {
                return "Refund Initiate:" + ex.Message;
            }

        }
        //public static string RefundLinkedBankTransfer_NCHL(string username,string authenticationToken, string BankTransactionId, Int32 VendorApiType, string WalletType, AddUserLoginWithPin resuser, string TransactionId = "", string SuccessDepositOrderTxnId = "")
        //{
        //    try
        //    {
        //        //string username = String.Empty;
        //        string CreatedBy_MemberId = String.Empty;
        //        if (!string.IsNullOrEmpty(authenticationToken))
        //        {

        //            username = username;
        //            CreatedBy_MemberId =Convert.ToString( resuser.MemberId);
        //        }
        //        if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
        //        {
        //            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), VendorApiType).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();

        //            if (string.IsNullOrEmpty(BankTransactionId))
        //            {
        //                Common.Common.AddLogs("BankTransactionId  Not Found For " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
        //                return "BankTransactionId  Not Found";
        //            }

        //            AddDepositOrders outobject = new AddDepositOrders();
        //            GetDepositOrders inobject = new GetDepositOrders();
        //            inobject.TransactionId = BankTransactionId;
        //            AddDepositOrders resDeposit = RepCRUD<GetDepositOrders, AddDepositOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_DepositOrders_Get), inobject, outobject);
        //            if (resDeposit.Id > 0)
        //            {

        //                WalletTransactions objWalletTransCheckBankRefund = new WalletTransactions();
        //                objWalletTransCheckBankRefund.ParentTransactionId = resDeposit.TransactionId;
        //                objWalletTransCheckBankRefund.MemberId = Convert.ToInt64(resDeposit.MemberId);
        //                objWalletTransCheckBankRefund.Sign = (int)WalletTransactions.Signs.Credit;
        //                objWalletTransCheckBankRefund.Status = (int)WalletTransactions.Statuses.Refund;
        //                if (!objWalletTransCheckBankRefund.GetRecordCheckExists())
        //                {
        //                    if (resDeposit.Type == (int)AddDepositOrders.DepositType.Linked_Bank_Deposit)
        //                    {
        //                        WalletTransactions intrans = new WalletTransactions();
        //                        intrans.Reference = BankTransactionId;
        //                        //intrans.Status = (int)WalletTransactions.Statuses.Refund;
        //                        if (!intrans.GetRecordCheckExists())
        //                        {
        //                            if (resDeposit.Amount> Convert.ToDecimal( amount))
        //                            {
        //                                if (refundtype == "partial")
        //                                {
        //                                    resDeposit.Amount = Convert.ToDecimal(amount);
        //                                }


        //                                decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges));

        //                                WalletTransactions res_transaction = new WalletTransactions();
        //                                res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
        //                                res_transaction.ContactNumber = resuser.ContactNumber;
        //                                res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
        //                                res_transaction.Amount = Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges);
        //                                res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
        //                                res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
        //                                res_transaction.CurrentBalance = WalletBalance;
        //                                if (string.IsNullOrEmpty(authenticationToken))
        //                                {
        //                                    res_transaction.CreatedBy = Common.Common.CreatedBy;
        //                                    res_transaction.CreatedByName = Common.Common.CreatedByName;
        //                                }
        //                                else
        //                                {
        //                                    res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
        //                                    res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
        //                                }

        //                                res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
        //                                res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
        //                                res_transaction.Reference = resDeposit.TransactionId;
        //                                //res_transaction.BatchTransactionId = resbank.BatchId;
        //                                //res_transaction.TxnInstructionId = resbank.InstructionId;
        //                                res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
        //                                res_transaction.ParentTransactionId = BankTransactionId;
        //                                //res_transaction.Purpose = user.Description;
        //                                res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();

        //                                res_transaction.Type = (int)VendorApi_CommonHelper.KhaltiAPIName.Deposit_By_Linked_Bank;
        //                                res_transaction.Description = "Wallet Credited Successfully";
        //                                res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
        //                                res_transaction.IsApprovedByAdmin = true;
        //                                res_transaction.IsActive = true;
        //                                res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
        //                                res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
        //                                res_transaction.RecieverAccountNo = Common.Common.ConnectIPs_AccountNumber;
        //                                res_transaction.RecieverBankCode = Common.Common.ConnectIps_BankId;
        //                                res_transaction.RecieverBranch = Common.Common.ConnectIPs_BranchName;
        //                                res_transaction.RecieverBankName = Common.Common.ConnectIPs_BankName;
        //                                res_transaction.RecieverBranchName = Common.Common.ConnectIPs_BranchName;
        //                                //res_transaction.SenderAccountNo = resbank.SenderAccountNo;
        //                                //res_transaction.SenderBankCode = resbank.SenderBankCode;
        //                                //res_transaction.SenderBranch = resbank.SenderBranch;
        //                                res_transaction.NetAmount = Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges);
        //                                res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
        //                                res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
        //                                if (res_transaction.Add())
        //                                {
        //                                    Common.Common.AddLogs("Deposit Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
        //                                    resDeposit.Status = (int)AddDepositOrders.DepositStatus.Refund;
        //                                    RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");
        //                                    Common.Common.AddLogs("Deposit Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
        //                                    string Title = "Transaction Refunded";
        //                                    string Message = "TransactionId:" + BankTransactionId + " Refunded for " + VendorApiTypeName;
        //                                    Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
        //                                    return "Success";

        //                                }
        //                                else
        //                                {
        //                                    Common.Common.AddLogs("Deposit Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
        //                                    return "Refund Transaction Not Execute";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                return "Refund amount is more than actual amount.";
        //                            }


        //                        }
        //                        else
        //                        {
        //                            return "Already Refunded";
        //                        }
        //                    }
        //                    else
        //                    {
        //                        AddBankTransactions outbank = new AddBankTransactions();
        //                        GetBankTransactions inbank = new GetBankTransactions();
        //                        inbank.TransactionUniqueId = BankTransactionId;
        //                        AddBankTransactions resbank = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbank, outbank);
        //                        if (resbank.Id > 0)
        //                        {
        //                            resbank.Status = (int)WalletTransactions.Statuses.Success;

        //                            AddBankTransactions outbankparent = new AddBankTransactions();
        //                            GetBankTransactions inbankparent = new GetBankTransactions();
        //                            inbankparent.ParentTransactionId = BankTransactionId;
        //                            inbankparent.Status = (int)WalletTransactions.Statuses.Refund;
        //                            AddBankTransactions resbankparent = RepCRUD<GetBankTransactions, AddBankTransactions>.GetRecord(Common.Common.StoreProcedures.sp_BankTransactions_Get, inbankparent, outbankparent);
        //                            if (resbankparent.Id == 0)
        //                            {
        //                                decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resbank.NetAmount));

        //                                WalletTransactions res_transaction = new WalletTransactions();
        //                                res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
        //                                res_transaction.ContactNumber = resuser.ContactNumber;
        //                                res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
        //                                res_transaction.Amount = Convert.ToDecimal(resbank.NetAmount);
        //                                res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
        //                                res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
        //                                res_transaction.CurrentBalance = WalletBalance;
        //                                if (string.IsNullOrEmpty(authenticationToken))
        //                                {
        //                                    res_transaction.CreatedBy = Common.Common.CreatedBy;
        //                                    res_transaction.CreatedByName = Common.Common.CreatedByName;
        //                                }
        //                                else
        //                                {
        //                                    res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
        //                                    res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
        //                                }

        //                                res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
        //                                res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
        //                                res_transaction.Reference = resbank.TransactionUniqueId;
        //                                res_transaction.BatchTransactionId = resbank.BatchId;
        //                                res_transaction.TxnInstructionId = resbank.InstructionId;
        //                                res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
        //                                res_transaction.ParentTransactionId = BankTransactionId;
        //                                //res_transaction.Purpose = user.Description;
        //                                res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();

        //                                res_transaction.Type = resbank.Type;
        //                                res_transaction.Description = "Wallet Credited Successfully";
        //                                res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
        //                                res_transaction.IsApprovedByAdmin = true;
        //                                res_transaction.IsActive = true;
        //                                res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
        //                                res_transaction.RecieverName = resbank.RecieverName;
        //                                res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
        //                                res_transaction.RecieverAccountNo = resbank.RecieverAccountNo;
        //                                res_transaction.RecieverBankCode = resbank.RecieverBankCode;
        //                                res_transaction.RecieverBranch = resbank.RecieverBranch;
        //                                res_transaction.SenderAccountNo = resbank.SenderAccountNo;
        //                                res_transaction.SenderBankCode = resbank.SenderBankCode;
        //                                res_transaction.SenderBranch = resbank.SenderBranch;
        //                                res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
        //                                res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
        //                                if (res_transaction.Add())
        //                                {
        //                                    Common.Common.AddLogs("Bank Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");

        //                                    bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(resbank, "banktransactions");
        //                                    if (bankstatus)
        //                                    {
        //                                        if (resDeposit.Id > 0)
        //                                        {
        //                                            resDeposit.Status = (int)AddDepositOrders.DepositStatus.Refund;
        //                                            RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");
        //                                            Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), resuser.MemberId, (resuser.FirstName + " " + resuser.LastName), true, resDeposit.Platform, resDeposit.DeviceCode);
        //                                        }
        //                                        Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
        //                                        string Title = "Transaction Refunded";
        //                                        string Message = "TransactionId:" + BankTransactionId + " Refunded for " + VendorApiTypeName;
        //                                        Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
        //                                        return "Success";
        //                                    }
        //                                    else
        //                                    {
        //                                        Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
        //                                        return "Update Failed";
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
        //                                    return "Refund Transaction Not Execute";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                return "Already Refunded";
        //                            }
        //                        }
        //                        else
        //                        {
        //                            if (SuccessDepositOrderTxnId != "" && SuccessDepositOrderTxnId == BankTransactionId)
        //                            {
        //                                // Ticket No. 246 Bank Txn was manually success from nps so bank txn is created for Linked Bank Txn - "paybill_n_recharge"

        //                                AddBankTransactions res_BankTransaction = new AddBankTransactions();
        //                                string WalletTransactionUniqueID = new CommonHelpers().GenerateUniqueId();
        //                                decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resDeposit.Amount) + Convert.ToDecimal(resDeposit.ServiceCharges));

        //                                res_BankTransaction.MemberId = resuser.MemberId;
        //                                res_BankTransaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
        //                                res_BankTransaction.Amount = resDeposit.Amount;
        //                                res_BankTransaction.VendorTransactionId = resDeposit.RefferalsId;
        //                                res_BankTransaction.ParentTransactionId = WalletTransactionUniqueID; // THIS FIELD IS KEPT EMPTY FOR NOW -- IT SHOULD BE PARENT TRANSACTION ID AGAINST CASHBACK.
        //                                res_BankTransaction.CurrentBalance = WalletBalance;

        //                                if (string.IsNullOrEmpty(authenticationToken))
        //                                {
        //                                    res_BankTransaction.CreatedBy = Common.Common.CreatedBy;
        //                                    res_BankTransaction.CreatedByName = Common.Common.CreatedByName;
        //                                }
        //                                else
        //                                {
        //                                    res_BankTransaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
        //                                    res_BankTransaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
        //                                }
        //                                res_BankTransaction.TransactionUniqueId = BankTransactionId;
        //                                res_BankTransaction.Remarks = "Payment Successfully Received";
        //                                res_BankTransaction.Type = (int)VendorApi_CommonHelper.KhaltiAPIName.Credit_By_Linked_Bank;
        //                                res_BankTransaction.Purpose = resDeposit.Remarks;
        //                                res_BankTransaction.Description = resDeposit.Remarks;
        //                                res_BankTransaction.Status = (int)WalletTransactions.Statuses.Refund;
        //                                res_BankTransaction.Reference = WalletTransactionUniqueID;
        //                                res_BankTransaction.IsApprovedByAdmin = true;
        //                                res_BankTransaction.CreditStatus = "Success";
        //                                res_BankTransaction.DebitStatus = "Success";
        //                                res_BankTransaction.GatewayStatus = "Success";
        //                                res_BankTransaction.IsActive = true;
        //                                res_BankTransaction.Sign = Convert.ToInt16(RewardPointTransactions.Signs.Debit);
        //                                res_BankTransaction.ResponseCode = "0";
        //                                res_BankTransaction.RecieverName = Common.Common.ConnectIps_AccountName;
        //                                res_BankTransaction.RecieverAccountNo = Common.Common.ConnectIPs_AccountNumber;
        //                                res_BankTransaction.RecieverBankCode = Common.Common.ConnectIps_BankId;
        //                                res_BankTransaction.RecieverBranch = Common.Common.ConnectIPs_BranchId;
        //                                res_BankTransaction.RecieverBankName = Common.Common.ConnectIPs_BankName;
        //                                res_BankTransaction.RecieverBranchName = Common.Common.ConnectIPs_BranchName;
        //                                //res_BankTransaction.SenderAccountNo = resobject.AccountNumber;
        //                                //res_BankTransaction.SenderBankCode = resobject.BankCode;
        //                                //res_BankTransaction.SenderBranch = resobject.BranchId;
        //                                //res_BankTransaction.SenderBankName = resobject.BankName;
        //                                //res_BankTransaction.SenderBranchName = resobject.BranchId;
        //                                res_BankTransaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
        //                                res_BankTransaction.ServiceCharge = resDeposit.ServiceCharges;
        //                                res_BankTransaction.NetAmount = Convert.ToDecimal(resDeposit.Amount);
        //                                res_BankTransaction.Sno = res_BankTransaction.GetBankTransactionSno();

        //                                Int64 BankDepositId = 0;
        //                                BankDepositId = RepCRUD<AddBankTransactions, GetBankTransactions>.Insert(res_BankTransaction, "banktransactions");
        //                                if (BankDepositId > 0)
        //                                {
        //                                    Common.Common.AddLogs("Bank Transaction Not Found. Created New Bank Transaction because this Transaction was manually success from 3rd party vendor: " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);

        //                                    WalletTransactions res_transaction = new WalletTransactions();
        //                                    res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
        //                                    res_transaction.ContactNumber = resuser.ContactNumber;
        //                                    res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
        //                                    res_transaction.Amount = Convert.ToDecimal(res_BankTransaction.NetAmount);
        //                                    res_transaction.NetAmount = Convert.ToDecimal(res_BankTransaction.NetAmount);
        //                                    res_transaction.ServiceCharge = Convert.ToDecimal(res_BankTransaction.ServiceCharge);
        //                                    res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
        //                                    res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
        //                                    res_transaction.CurrentBalance = WalletBalance;
        //                                    if (string.IsNullOrEmpty(authenticationToken))
        //                                    {
        //                                        res_transaction.CreatedBy = Common.Common.CreatedBy;
        //                                        res_transaction.CreatedByName = Common.Common.CreatedByName;
        //                                    }
        //                                    else
        //                                    {
        //                                        res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
        //                                        res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
        //                                    }

        //                                    res_transaction.TransactionUniqueId = WalletTransactionUniqueID;
        //                                    res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
        //                                    res_transaction.Reference = res_BankTransaction.TransactionUniqueId;
        //                                    res_transaction.BatchTransactionId = res_BankTransaction.BatchId;
        //                                    res_transaction.TxnInstructionId = res_BankTransaction.InstructionId;
        //                                    res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
        //                                    res_transaction.ParentTransactionId = BankTransactionId;
        //                                    res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();
        //                                    res_transaction.Type = res_BankTransaction.Type;
        //                                    res_transaction.Description = "Wallet Credited Successfully";
        //                                    res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
        //                                    res_transaction.IsApprovedByAdmin = true;
        //                                    res_transaction.IsActive = true;
        //                                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
        //                                    res_transaction.RecieverName = res_BankTransaction.RecieverName;
        //                                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
        //                                    res_transaction.RecieverAccountNo = res_BankTransaction.RecieverAccountNo;
        //                                    res_transaction.RecieverBankCode = res_BankTransaction.RecieverBankCode;
        //                                    res_transaction.RecieverBranch = res_BankTransaction.RecieverBranch;
        //                                    res_transaction.SenderAccountNo = res_BankTransaction.SenderAccountNo;
        //                                    res_transaction.SenderBankCode = res_BankTransaction.SenderBankCode;
        //                                    res_transaction.SenderBranch = res_BankTransaction.SenderBranch;
        //                                    res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
        //                                    res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
        //                                    bool RefundStatus = false;
        //                                    RefundStatus = res_transaction.Add();
        //                                    if (RefundStatus)
        //                                    {
        //                                        Common.Common.AddLogs("Bank Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
        //                                        bool bankstatus = RepCRUD<AddBankTransactions, GetBankTransactions>.Update(res_BankTransaction, "banktransactions");
        //                                        if (bankstatus)
        //                                        {
        //                                            if (resDeposit.Id > 0)
        //                                            {
        //                                                resDeposit.Status = (int)AddDepositOrders.DepositStatus.Refund;
        //                                                RepCRUD<AddDepositOrders, GetDepositOrders>.Update(resDeposit, "depositorders");
        //                                                Common.Common.AddLogs($"Deposit order updated on TransactionID: {BankTransactionId}", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), resuser.MemberId, (resuser.FirstName + " " + resuser.LastName), true, resDeposit.Platform, resDeposit.DeviceCode);
        //                                            }
        //                                            Common.Common.AddLogs("Bank Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
        //                                            string Title = "Transaction Refunded";
        //                                            string Message = "TransactionId:" + BankTransactionId + " Refunded for " + VendorApiTypeName;
        //                                            //Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
        //                                            return "Success from 3rd party vendor";
        //                                        }
        //                                        else
        //                                        {
        //                                            Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
        //                                            return "Update Failed";
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        Common.Common.AddLogs("Bank Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), Convert.ToInt64(resuser.MemberId), "", true, "", "");
        //                                        return "Refund Transaction Not Execute";
        //                                    }
        //                                }
        //                                else
        //                                {

        //                                    Common.Common.AddLogs("Something Went Wrong Payment Not Sent", false, Convert.ToInt32(AddLog.LogType.Linked_BankTransfer), resuser.MemberId, resuser.FirstName + " " + resuser.LastName, true, resDeposit.Platform, resDeposit.DeviceCode);
        //                                    return "Something Went Wrong Payment Not Sent";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                return "Transaction Not Found";
        //                            }
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    return "Transaction Already Refunded";
        //                }
        //            }
        //            else
        //            {
        //                return "Transaction Order Not Found";
        //            }
        //        }
        //        else if ((WalletType == "0" || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.FonePay) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Wallet) || WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins)) && TransactionId != String.Empty)
        //        {
        //            string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), VendorApiType).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
        //            WalletTransactions inWalletTransactions = new WalletTransactions();
        //            inWalletTransactions.TransactionUniqueId = TransactionId;
        //            if (inWalletTransactions.GetRecord())
        //            {
        //                WalletTransactions outWalletTransactions = new WalletTransactions();
        //                outWalletTransactions.ParentTransactionId = TransactionId;
        //                outWalletTransactions.Status = (int)WalletTransactions.Statuses.Refund;
        //                if (outWalletTransactions.GetRecord() == false)
        //                {
        //                    decimal WalletBalance = Convert.ToDecimal(resuser.TotalAmount);
        //                    WalletTransactions res_transaction = new WalletTransactions();
        //                    res_transaction.MemberId = Convert.ToInt64(resuser.MemberId);
        //                    res_transaction.ContactNumber = resuser.ContactNumber;
        //                    res_transaction.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
        //                    res_transaction.Amount = Convert.ToDecimal(inWalletTransactions.NetAmount);
        //                    res_transaction.RewardPoint = inWalletTransactions.RewardPoint;
        //                    res_transaction.RewardPointBalance = inWalletTransactions.RewardPointBalance;
        //                    if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.MPCoins))
        //                    {
        //                        res_transaction.Amount = Convert.ToDecimal(inWalletTransactions.Amount) + Convert.ToDecimal(inWalletTransactions.ServiceCharge);
        //                        res_transaction.RewardPoint = inWalletTransactions.RewardPoint;
        //                        res_transaction.MPCoinsDebit = inWalletTransactions.MPCoinsDebit;
        //                        res_transaction.RewardPointBalance = inWalletTransactions.RewardPointBalance;
        //                        WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount));
        //                    }
        //                    res_transaction.UpdateBy = Convert.ToInt64(resuser.MemberId);
        //                    res_transaction.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
        //                    res_transaction.CurrentBalance = WalletBalance;
        //                    if (string.IsNullOrEmpty(authenticationToken))
        //                    {
        //                        res_transaction.CreatedBy = Common.Common.CreatedBy;
        //                        res_transaction.CreatedByName = Common.Common.CreatedByName;
        //                    }
        //                    else
        //                    {
        //                        res_transaction.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
        //                        res_transaction.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
        //                    }
        //                    Guid TransactionGuid = Guid.NewGuid();
        //                    res_transaction.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
        //                    res_transaction.VendorTransactionId = res_transaction.TransactionUniqueId;
        //                    res_transaction.Reference = inWalletTransactions.TransactionUniqueId;
        //                    res_transaction.Remarks = $"Wallet Credit as Refund for Txn id:{inWalletTransactions.TransactionUniqueId}";
        //                    res_transaction.ParentTransactionId = inWalletTransactions.TransactionUniqueId;
        //                    //res_transaction.Purpose = user.Description;
        //                    res_transaction.GatewayStatus = WalletTransactions.Statuses.Success.ToString();

        //                    res_transaction.Type = VendorApiType;
        //                    res_transaction.Description = "Wallet Credited Successfully";
        //                    res_transaction.Status = (int)WalletTransactions.Statuses.Refund;
        //                    res_transaction.IsApprovedByAdmin = true;
        //                    res_transaction.IsActive = true;
        //                    res_transaction.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
        //                    res_transaction.TransferType = (int)WalletTransactions.TransferTypes.Sender;
        //                    res_transaction.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
        //                    res_transaction.VendorType = (int)VendorApi_CommonHelper.VendorTypes.MyPay;
        //                    if (res_transaction.Add())
        //                    {
        //                        Common.Common.AddLogs("Transaction Refund For " + VendorApiTypeName + " (Transaction ID: " + inWalletTransactions.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Wallet), Convert.ToInt64(inWalletTransactions.MemberId), "", true, "", "");

        //                        string Title = "Transaction Refunded";
        //                        string Message = "TransactionId: " + inWalletTransactions.TransactionUniqueId + " Refunded for " + VendorApiTypeName;
        //                        Models.Common.Common.SendNotification(authenticationToken, VendorApiType, resuser.MemberId, Title, Message);
        //                        return "Success";
        //                    }
        //                    else
        //                    {
        //                        Common.Common.AddLogs("Transaction Refund Failed For " + VendorApiTypeName + " (Transaction ID: " + inWalletTransactions.TransactionUniqueId.ToString() + " )", false, Convert.ToInt32(AddLog.LogType.Wallet), Convert.ToInt64(inWalletTransactions.MemberId), "", true, "", "");
        //                        return "Refund Transaction Not Execute";
        //                    }
        //                }
        //                else
        //                {
        //                    return "Already Refunded";
        //                }
        //            }
        //            else
        //            {
        //                return "Transaction not found";
        //            }
        //        }
        //        else
        //        {
        //            return "Payment Mode Not Found";
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return "Refund Initiate:" + ex.Message;
        //    }

        //}

        public static string RefundMerchantBankTransfer(string authenticationToken, string BankTransactionId, Int32 VendorApiType, string WalletType, AddUserLoginWithPin resuser, string TransactionId = "", string SuccessDepositOrderTxnId = "", string Remarks = "")
        {
            try
            {
                string username = String.Empty;
                string CreatedBy_MemberId = String.Empty;
                if (!string.IsNullOrEmpty(authenticationToken))
                {
                    var handler = new JwtSecurityTokenHandler();
                    var jwtSecurityToken = handler.ReadJwtToken(authenticationToken);
                    username = jwtSecurityToken.Payload["username"].ToString();
                    CreatedBy_MemberId = jwtSecurityToken.Payload["memberid"].ToString();
                }
                if (WalletType == Convert.ToString((int)WalletTransactions.WalletTypes.Bank))
                {
                    string VendorApiTypeName = @Enum.GetName(typeof(MyPay.Models.VendorAPI.VendorRequest_CommonHelper.VendorApi_CommonHelper.KhaltiAPIName), VendorApiType).ToString().ToUpper().Replace("_", " ").Replace("KHALTI", " ").ToString();
                    if (!string.IsNullOrEmpty(BankTransactionId))
                    {
                        AddMerchantOrders outobject = new AddMerchantOrders();
                        GetMerchantOrders inobject = new GetMerchantOrders();
                        inobject.TransactionId = BankTransactionId;
                        AddMerchantOrders resDeposit = RepCRUD<GetMerchantOrders, AddMerchantOrders>.GetRecord(nameof(Common.Common.StoreProcedures.sp_MerchantOrders_Get), inobject, outobject);
                        if (resDeposit.Id > 0)
                        {
                            WalletTransactions intrans = new WalletTransactions();
                            intrans.Reference = BankTransactionId;
                            if (!intrans.GetRecordCheckExists())
                            {
                                // Get Update Wallet Amount
                                AddUserLoginWithPin resUserOutObject = new AddUserLoginWithPin();
                                GetUserLoginWithPin resUserInObject = new GetUserLoginWithPin();
                                resUserInObject.MemberId = resuser.MemberId;
                                resuser = RepCRUD<GetUserLoginWithPin, AddUserLoginWithPin>.GetRecord(Common.Common.StoreProcedures.sp_Users_GetLoginWithPin, resUserInObject, resUserOutObject);
                                decimal WalletBalance = Convert.ToDecimal(Convert.ToDecimal(resuser.TotalAmount) + Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges));

                                // Process Refund Txn
                                WalletTransactions res_transaction = new WalletTransactions();
                                res_transaction.TransactionUniqueId = BankTransactionId;
                                if (res_transaction.GetRecord())
                                {
                                    res_transaction.Status = (int)WalletTransactions.Statuses.Failed;
                                    res_transaction.GatewayStatus = WalletTransactions.Statuses.Failed.ToString();
                                    res_transaction.Remarks = "Bank Transfer " + WalletTransactions.Statuses.Failed.ToString();
                                    if (!string.IsNullOrEmpty(Remarks))
                                    {
                                        res_transaction.Remarks = Remarks;
                                    }
                                    res_transaction.Update();

                                    WalletTransactions res_transaction_refund = new WalletTransactions();
                                    res_transaction_refund = res_transaction;
                                    res_transaction_refund.Id = 0;
                                    res_transaction_refund.MemberId = Convert.ToInt64(resuser.MemberId);
                                    res_transaction_refund.ContactNumber = resuser.ContactNumber;
                                    res_transaction_refund.MemberName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                    res_transaction_refund.Amount = Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges);
                                    res_transaction_refund.UpdateBy = Convert.ToInt64(resuser.MemberId);
                                    res_transaction_refund.UpdateByName = resuser.FirstName + " " + resuser.MiddleName + " " + resuser.LastName;
                                    res_transaction_refund.CurrentBalance = WalletBalance;
                                    if (string.IsNullOrEmpty(authenticationToken))
                                    {
                                        res_transaction_refund.CreatedBy = Common.Common.CreatedBy;
                                        res_transaction_refund.CreatedByName = Common.Common.CreatedByName;
                                    }
                                    else
                                    {
                                        res_transaction_refund.CreatedBy = Common.Common.GetCreatedById(authenticationToken);
                                        res_transaction_refund.CreatedByName = Common.Common.GetCreatedByName(authenticationToken);
                                    }

                                    res_transaction_refund.TransactionUniqueId = new CommonHelpers().GenerateUniqueId();
                                    res_transaction_refund.VendorTransactionId = res_transaction_refund.TransactionUniqueId;
                                    res_transaction_refund.Reference = resDeposit.TransactionId;
                                    res_transaction_refund.Remarks = $"Wallet Credit as Refund for Txn id:{BankTransactionId}";
                                    res_transaction_refund.ParentTransactionId = BankTransactionId;
                                    res_transaction_refund.GatewayStatus = WalletTransactions.Statuses.Success.ToString();
                                    res_transaction_refund.Type = (int)VendorApi_CommonHelper.KhaltiAPIName.Merchant_Wallet_Withdrawal;
                                    res_transaction_refund.Description = "Wallet Credited Successfully";
                                    res_transaction_refund.Status = (int)WalletTransactions.Statuses.Refund;
                                    res_transaction_refund.IsApprovedByAdmin = true;
                                    res_transaction_refund.IsActive = true;
                                    res_transaction_refund.Sign = Convert.ToInt16(WalletTransactions.Signs.Credit);
                                    res_transaction_refund.TransferType = (int)WalletTransactions.TransferTypes.Sender;
                                    res_transaction_refund.RecieverAccountNo = Common.Common.ConnectIPs_AccountNumber;
                                    res_transaction_refund.RecieverBankCode = Common.Common.ConnectIps_BankId;
                                    res_transaction_refund.RecieverBranch = Common.Common.ConnectIPs_BranchName;
                                    res_transaction_refund.RecieverBankName = Common.Common.ConnectIPs_BankName;
                                    res_transaction_refund.RecieverBranchName = Common.Common.ConnectIPs_BranchName;
                                    res_transaction_refund.ServiceCharge = 0;

                                    res_transaction_refund.SenderAccountNo = res_transaction.RecieverAccountNo;
                                    res_transaction_refund.SenderBankCode = res_transaction.RecieverBankCode;
                                    res_transaction_refund.SenderBranch = res_transaction.RecieverBranch;
                                    res_transaction_refund.SenderBankName = res_transaction.RecieverBankName;
                                    res_transaction_refund.SenderBranchName = res_transaction.RecieverBranchName;

                                    res_transaction_refund.NetAmount = Convert.ToDecimal(resDeposit.Amount + resDeposit.ServiceCharges);
                                    res_transaction_refund.WalletType = (int)WalletTransactions.WalletTypes.Wallet;
                                    res_transaction_refund.VendorType = (int)VendorApi_CommonHelper.VendorTypes.NPS;
                                    if (res_transaction_refund.Add())
                                    {
                                        Common.Common.AddLogs("Merchant Orders Transaction Refund " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Merchant), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                        resDeposit.Status = (int)AddMerchantOrders.MerchantOrderStatus.Failed;
                                        RepCRUD<AddMerchantOrders, GetMerchantOrders>.Update(resDeposit, "merchantorders");
                                        Common.Common.AddLogs("Merchant Orders Transaction Updated " + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Merchant), Convert.ToInt64(resuser.MemberId), "", true, resDeposit.Platform, resDeposit.DeviceCode);
                                        return "Success";

                                    }
                                    else
                                    {
                                        Common.Common.AddLogs("Merchant Orders Transaction Update Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Merchant), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                        return "Refund Transaction Not Execute";
                                    }
                                }
                                else
                                {
                                    Common.Common.AddLogs("Merchant Orders Transaction Refund Failed" + VendorApiTypeName + " (Transaction ID: " + BankTransactionId + " )", false, Convert.ToInt32(AddLog.LogType.Merchant), Convert.ToInt64(resuser.MemberId), "", true, "", "");
                                    return "Refund Transaction Not Execute";
                                }
                            }
                            else
                            {
                                return "Already Refunded";
                            }
                        }
                        else
                        {
                            return "Transaction Order Not Found";
                        }
                    }
                    else
                    {
                        return "BankTransactionId Not Found";
                    }
                }
                else
                {
                    return "Payment Mode Not Found";
                }
            }
            catch (Exception ex)
            {
                return "Refund Initiate:" + ex.Message;
            }

        }

        public static string GenerateApi_Input_JsonRequest(string Req_ReferenceNo, string Amount, string number, string Remarks, int Type)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            Vendor_Input_Request objReq;
            string result = "";
            switch (Type)
            {
                case (int)KhaltiAPIName.khalti_topup:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.remarks = Remarks;
                    if (Common.Common.ApplicationEnvironment.IsProduction)
                    {
                        objReq.token = Req_TokenLive;
                    }
                    else
                    {
                        objReq.token = Req_TokenTest;
                    }
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                case (int)KhaltiAPIName.khalti_ntc:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.token = Req_TokenLive;
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                case (int)KhaltiAPIName.khalti_ncell:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.token = Req_TokenLive;
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                case (int)KhaltiAPIName.khalti_smartcell:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.token = Req_TokenLive;
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                case (int)KhaltiAPIName.khalti_dishhome_erc:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.token = Req_TokenLive;
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                case (int)KhaltiAPIName.khalti_ntc_erc:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.token = Req_TokenLive;
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                //case (int)KhaltiAPIName.khalti_utl_erc:
                //    objReq = new Vendor_Input_Request();
                //    objReq.reference = Req_ReferenceNo;
                //    objReq.amount = Amount;
                //    objReq.number = number;
                //    objReq.token = Req_TokenLive; 
                // RequestedToken = objReq.token;
                //    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                //    break;
                case (int)KhaltiAPIName.khalti_smart_erc:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.token = Req_TokenLive;
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                case (int)KhaltiAPIName.khalti_broadlink_erc:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    if (Common.Common.ApplicationEnvironment.IsProduction)
                    {
                        objReq.token = Req_TokenLive;
                    }
                    else
                    {
                        objReq.token = Req_TokenTest;
                    }
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                case (int)KhaltiAPIName.khalti_nettv_erc:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.token = Req_TokenLive;
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                case (int)KhaltiAPIName.khalti_pstn_landline:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.token = Req_TokenLive;
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;
                case (int)KhaltiAPIName.bus_sewa:
                    objReq = new Vendor_Input_Request();
                    objReq.reference = Req_ReferenceNo;
                    objReq.amount = Amount;
                    objReq.number = number;
                    objReq.token = Req_TokenLive;
                    RequestedToken = objReq.token;
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                    break;

                default:
                    break;
            }
            return result;
        }

        public static GetVendor_API_Lookup RequestLOOKUP_TRANSACTION(string Req_ReferenceNo)
        {
            GetVendor_API_Lookup objRes = new GetVendor_API_Lookup();
            try
            {
                string LookupURL = $"{Vendor_Lookup_URL_Prefix}status?token={Req_TokenLive}&reference={Req_ReferenceNo}";
                var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Lookup>(json);
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.state = "Error";
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }




        public static void addKeyValueToList(ref List<KeyValuePair<String, String>> list, String key, String value)
        {
            //ht.Add(key, value);
            list.Add(new KeyValuePair<string, string>(key, value));
        }

        //public static void saveReceipt(string ServiceID, string ServiceName, string MemberID, string txnID, string Table1JSONContent, string contactNumber, string fullName, string txnType,
        //     string PaidFor, string amount)
        //{
        //    string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

        //    using (var connection = new SqlConnection(connectionString))
        //    {
        //        var sql = "insert into reciepts(" +
        //            "table1JSONContent" + "," +
        //            "contactNumber" + "," +
        //            "fullname" + "," +
        //            "TxnID" + "," +
        //            "TxnType" + "," +
        //            "PaidFor" + "," +
        //            "amount" + "," +
        //            "serviceID" + "," +
        //            "memberID" +
        //            ") values('";

        //        sql = sql + Table1JSONContent + "','";
        //        sql = sql + contactNumber + "','";
        //        sql = sql + fullName + "','";
        //        sql = sql + txnID + "','";
        //        sql = sql + txnType + "','";
        //        sql = sql + PaidFor + "',";
        //        sql = sql +  amount + ",";
        //        sql = sql + ServiceID  + ",";
        //        sql = sql + MemberID;
        //        sql = sql + ")";

        //        var updatedRow = connection.Execute(sql, null);
        //    }
        //}

        public static void addKeyValueToHash<T>(ref Hashtable ht, string key, T value)
        {
            ht.Add(key, value);
        }

        //public static void addKeyValueToList(ref List<KeyValuePair<String, String>> list, String key, String value)
        //{
        //    //ht.Add(key, value);
        //    list.Add(new KeyValuePair<string, string>(key, value));
        //}

        public static string getJSONfromList(List<KeyValuePair<String, String>> list)
        {
            var JSONData = JsonConvert.SerializeObject(list);
            var json = "{";
            foreach (var item in list)
            {
                json = json + "\"" + item.Key + "\"" + ":" + "\"" + item.Value + "\"" + ",";
            }

            json = json.Remove(json.Length - 1);
            json = json + "}";

            return json;
        }

        public static string getJSONfromHashTable(Hashtable ht)
        {
            var JSONData = JsonConvert.SerializeObject(ht);
            return JSONData.ToString();
        }

        public static GetVendor_API_Nea_Counters RequestSERVICEGROUP_COUNTERS_NEA(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_Nea_Counters objRes = new GetVendor_API_Nea_Counters();
            try
            {

                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests vendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref vendor_API_Requests, URL, JsonReq);
                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Nea_Counters>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Nea_Counters>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_KhanePani_Counters RequestSERVICEGROUP_COUNTERS_KHANEPANI(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_KhanePani_Counters objRes = new GetVendor_API_KhanePani_Counters();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests vendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref vendor_API_Requests, URL, JsonReq);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_KhanePani_Counters>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_KhanePani_Counters>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_ServiceGroup_Nea_Details RequestSERVICEGROUP_DETAILS_NEA(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ServiceGroup_Nea_Details objRes = new GetVendor_API_ServiceGroup_Nea_Details();
            try
            {

                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests vendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref vendor_API_Requests, URL, JsonReq);
                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    if (data["details"]["consumer_id"] != null)
                    {
                        Details = data["details"]["consumer_id"].ToString();
                    }
                    else if (data["details"]["sc_no"] != null)
                    {
                        Details = data["details"]["sc_no"].ToString();
                    }
                    else if (data["details"]["office_code"] != null)
                    {
                        Details = data["details"]["office_code"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Nea_Details>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Nea_Details>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_DataPack_Payment_Request RequestSERVICEGROUP_DATAPACK(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_DataPack_Payment_Request objRes = new GetVendor_API_DataPack_Payment_Request();
            try
            {

                string URL = KhaltiApiUrl_Root + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = KhaltiApiUrl_Root_localhost + KhaltiAPIURL;
                }

                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                //string json = PostMethod(KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error" || Error.ToLower() == "invalid_parameters")
                {
                    if (data["details"]["number"] != null)
                    {
                        Details = data["details"]["number"].ToString();
                    }
                    else if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["product_code"] != null)
                    {
                        Details = data["details"]["product_code"].ToString();
                    }
                    else if (data["details"]["package_id"] != null)
                    {
                        Details = data["details"]["package_id"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_DataPack_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_DataPack_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_ServiceGroup_KhanePani_Details RequestSERVICEGROUP_DETAILS_KHANEPANI(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ServiceGroup_KhanePani_Details objRes = new GetVendor_API_ServiceGroup_KhanePani_Details();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests vendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref vendor_API_Requests, URL, JsonReq);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_KhanePani_Details>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_KhanePani_Details>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_ServiceGroup_Nea_ServiceCharge RequestSERVICEGROUP_SERVICE_CHARGE_NEA(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ServiceGroup_Nea_ServiceCharge objRes = new GetVendor_API_ServiceGroup_Nea_ServiceCharge();
            try
            {

                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests vendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref vendor_API_Requests, URL, JsonReq);
                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                var data = (JObject)JsonConvert.DeserializeObject(json);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Nea_ServiceCharge>(json);
                string Error = (String.IsNullOrEmpty(objRes.error) ? String.Empty : objRes.error);
                string Details = (String.IsNullOrEmpty(objRes.details) ? String.Empty : objRes.details);
                objRes.Message = (objRes.status ? "success" : (Details + " " + Error));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Nea_ServiceCharge>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_ServiceGroup_KhaniPani_ServiceCharge RequestSERVICEGROUP_SERVICE_CHARGE_KHANEPANI(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ServiceGroup_KhaniPani_ServiceCharge objRes = new GetVendor_API_ServiceGroup_KhaniPani_ServiceCharge();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests vendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref vendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                var data = (JObject)JsonConvert.DeserializeObject(json);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_KhaniPani_ServiceCharge>(json);
                string Error = (String.IsNullOrEmpty(objRes.error) ? String.Empty : objRes.error);
                string Details = (String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details);
                objRes.Message = (objRes.status ? "success" : (Details + " " + Error));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_KhaniPani_ServiceCharge>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_ServiceGroup_Nea_Commit RequestSERVICEGROUP_COMMIT_NEA(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_Nea_Commit objRes = new GetVendor_API_ServiceGroup_Nea_Commit();
            try
            {
                string json = PostMethod(ref objVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {

                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Nea_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Nea_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_ServiceGroup_KhanePani_Commit RequestSERVICEGROUP_COMMIT_KHANEPANI(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_KhanePani_Commit objRes = new GetVendor_API_ServiceGroup_KhanePani_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {

                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_KhanePani_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["counter"] != null)
                    {
                        Details = data["details"]["counter"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_KhanePani_Commit>(json);
                    //objRes.detailsobject = Newtonsoft.Json.JsonConvert.DeserializeObject<detail>(Details);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_KhanePani_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_Dishome_Lookup RequestDISHOME_LOOKUP(string casid, string KhaltiAPIURL)
        {
            GetVendor_API_Dishome_Lookup objRes = new GetVendor_API_Dishome_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiUrl_Root + KhaltiAPIURL}?token={Req_TokenLive}&casid={casid}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{KhaltiApiUrl_Root_localhost + KhaltiAPIURL}?token={Req_TokenTest_localhost}&casid={casid}";
                }
                var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Dishome_Lookup>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.data.customer_name) ? objRes.Message : objRes.data.customer_name)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Dishome_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_Dishhome_Payment_Request RequestDISHOME_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Dishhome_Payment_Request objRes = new GetVendor_API_Dishhome_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["casid"] != null)
                    {
                        Details = data["details"]["casid"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Dishhome_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Dishhome_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_SIMTV_Lookup RequestSIMTV_LOOKUP(string customer_id, string KhaltiAPIURL)
        {
            GetVendor_API_SIMTV_Lookup objRes = new GetVendor_API_SIMTV_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiUrl_Root + KhaltiAPIURL}?token={Req_TokenLive}&customer_id={customer_id}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{KhaltiApiUrl_Root_localhost + KhaltiAPIURL}?token={Req_TokenLive_localhost}&customer_id={customer_id}";
                }
                var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SIMTV_Lookup>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SIMTV_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_SIMTV_Payment_Request RequestSIMTV_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_SIMTV_Payment_Request objRes = new GetVendor_API_SIMTV_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SIMTV_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SIMTV_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_MEROTV_Lookup RequestMEROTV_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_MEROTV_Lookup objRes = new GetVendor_API_MEROTV_Lookup();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = $"{ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL}";
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["stb"] != null)
                    {
                        Details = data["details"]["stb"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MEROTV_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MEROTV_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_MEROTV_Packages_Lookup RequestMEROTV_PACKAGES_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_MEROTV_Packages_Lookup objRes = new GetVendor_API_MEROTV_Packages_Lookup();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = $"{ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL}";
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["stb"] != null)
                    {
                        Details = data["details"]["stb"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MEROTV_Packages_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                //objRes.status = (objRes.status ? "success" : "false");
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MEROTV_Packages_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                // objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_MEROTV_Payment_Request RequestMEROTV_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_MEROTV_Payment_Request objRes = new GetVendor_API_MEROTV_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MEROTV_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MEROTV_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_MAXTV_Lookup RequestMAXTV_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_MAXTV_Lookup objRes = new GetVendor_API_MAXTV_Lookup();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["stb"] != null)
                    {
                        Details = data["details"]["stb"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MAXTV_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MAXTV_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_MAXTV_Payment_Request RequestMAXTV_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_MAXTV_Payment_Request objRes = new GetVendor_API_MAXTV_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MAXTV_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MAXTV_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        private static string FetchErrorDetails(JObject data, string Details)
        {
            try
            {
                if (data["message"] != null)
                {
                    Details = data["message"].ToString();
                }

                if (data["details"] != null)
                {
                    if (data["details"].Type == JTokenType.String)
                    {
                        Details = Details + " " + data["details"].ToString();
                    }
                    else if (data["details"]["amount"] != null)
                    {
                        Details = Details + " " + data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["customer_id"] != null)
                    {
                        Details = Details + " " + data["details"]["customer_id"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = Details + " " + data["details"]["reference"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = Details + " " + data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["contact_number"] != null)
                    {
                        Details = Details + " " + data["details"]["contact_number"].ToString();
                    }
                    else if (data["details"]["number"] != null)
                    {
                        Details = Details + " " + data["details"]["number"].ToString();
                    }
                    else if (data["details"]["package"] != null)
                    {
                        Details = Details + " " + data["details"]["package"].ToString();
                    }
                    else if (data["details"]["username"] != null)
                    {
                        Details = Details + " " + data["details"]["username"].ToString();
                    }
                    else if (data["details"]["user"] != null)
                    {
                        Details = Details + " " + data["details"]["user"].ToString();
                    }
                    else if (data["details"]["address"] != null)
                    {
                        Details = Details + " " + data["details"]["address"].ToString();
                    }
                    else if (data["details"]["policy_number"] != null)
                    {
                        Details = Details + " " + data["details"]["policy_number"].ToString();
                    }

                }
            }
            catch (Exception)
            {

            }
            return Details;
        }

        private static string FetchErrorDetailsjson(JArray data, string Details)
        {
            //JArray jsonArray = JArray.Parse((string)data);

            // string TripType = data[Details];
            if (data["TripType"] != null)
            {
                Details = data["TripType"].ToString();
            }
            if (data["PassengerType"] != null)
            {
                Details = data["PassengerType"].ToString();
            }
            if (data["Price"] != null)
            {
                Details = data["Price"].ToString();
            }
            if (data["BaseRate"] != null)
            {
                Details = data["BaseRate"].ToString();
            }
            if (data["Vat"] != null)
            {
                Details = data["Vat"].ToString();
            }
            if (data["LC"] != null)
            {
                Details = data["LC"].ToString();
            }

            return Details;
        }


        public static GetVendor_API_CLEARTV_Lookup RequestCLEARTV_LOOKUP(string customer_id, string KhaltiAPIURL)
        {
            GetVendor_API_CLEARTV_Lookup objRes = new GetVendor_API_CLEARTV_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiUrl_Root + KhaltiAPIURL}?token={Req_TokenLive}&customer_id={customer_id}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{KhaltiApiUrl_Root_localhost + KhaltiAPIURL}?token={Req_TokenTest_localhost}&customer_id={customer_id}";
                }
                var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_CLEARTV_Lookup>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_CLEARTV_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_CLEARTV_Payment_Request RequestCLEARTV_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_CLEARTV_Payment_Request objRes = new GetVendor_API_CLEARTV_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_CLEARTV_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_CLEARTV_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_PRABHUTV_Lookup RequestPRABHUTV_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_PRABHUTV_Lookup objRes = new GetVendor_API_PRABHUTV_Lookup();
            try
            {

                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PRABHUTV_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PRABHUTV_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_PRABHUTV_Payment_Request RequestPRABHUTV_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_PRABHUTV_Payment_Request objRes = new GetVendor_API_PRABHUTV_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PRABHUTV_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PRABHUTV_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_PNGNETWORKTV_Lookup RequestPNGNETWORKTV_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_PNGNETWORKTV_Lookup objRes = new GetVendor_API_PNGNETWORKTV_Lookup();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PNGNETWORKTV_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PNGNETWORKTV_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_PNGNETWORKTV_Payment_Request RequestPNGNETWORKTV_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_PNGNETWORKTV_Payment_Request objRes = new GetVendor_API_PNGNETWORKTV_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PNGNETWORKTV_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PNGNETWORKTV_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_JAGRITITV_Lookup RequestJAGRITITV_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_JAGRITITV_Lookup objRes = new GetVendor_API_JAGRITITV_Lookup();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_JAGRITITV_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_JAGRITITV_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_JAGRITITV_Payment_Request RequestJAGRITITV_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_JAGRITITV_Payment_Request objRes = new GetVendor_API_JAGRITITV_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_JAGRITITV_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_JAGRITITV_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_ADSL_Payment_Request RequestADSL_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ADSL_Payment_Request objRes = new GetVendor_API_ADSL_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ADSL_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ADSL_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_ViaNet_Payment_Request RequestViaNet_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ViaNet_Payment_Request objRes = new GetVendor_API_ViaNet_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ViaNet_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ViaNet_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Classitech_Payment_Request RequestClassiTech_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Classitech_Payment_Request objRes = new GetVendor_API_Classitech_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Classitech_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Classitech_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Pokhara_Payment_Request RequestPokhara_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Pokhara_Payment_Request objRes = new GetVendor_API_Pokhara_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Pokhara_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Pokhara_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_WebSurfer_Payment_Request RequestWebsurfer_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_WebSurfer_Payment_Request objRes = new GetVendor_API_WebSurfer_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WebSurfer_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WebSurfer_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Techminds_Payment_Request RequestTechminds_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Techminds_Payment_Request objRes = new GetVendor_API_Techminds_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Techminds_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Techminds_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_Arrownet_Payment_Request RequestArrownet_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Arrownet_Payment_Request objRes = new GetVendor_API_Arrownet_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Arrownet_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Arrownet_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_SUBISU_Payment_Request RequestSUBISU_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_SUBISU_Payment_Request objRes = new GetVendor_API_SUBISU_Payment_Request();
            try
            {
                //string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_SUBISU_Payment_Request RequestSUBISU_INTERNET_PAYMENT_OLD(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_SUBISU_Payment_Request objRes = new GetVendor_API_SUBISU_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                //string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_VirtualNetwork_Payment_Request RequestVirtualNetwork_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_VirtualNetwork_Payment_Request objRes = new GetVendor_API_VirtualNetwork_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_VirtualNetwork_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_VirtualNetwork_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_WebNetwork_Payment_Request RequestWebNetwork_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_WebNetwork_Payment_Request objRes = new GetVendor_API_WebNetwork_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WebNetwork_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WebNetwork_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_RoyalNetwork_Payment_Request RequestRoyalNetwork_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_RoyalNetwork_Payment_Request objRes = new GetVendor_API_RoyalNetwork_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_RoyalNetwork_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_RoyalNetwork_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_Kaspersky_Payment_Request RequestKaspersky_ANTIVIRUS_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Kaspersky_Payment_Request objRes = new GetVendor_API_Kaspersky_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Kaspersky_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Kaspersky_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_EChalan_Payment_Request RequestEChalan_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_EChalan_Payment_Request objRes = new GetVendor_API_EChalan_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "service_inactive") || (Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_EChalan_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_EChalan_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_ViaNet_Lookup RequestViaNet_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ViaNet_Lookup objRes = new GetVendor_API_ViaNet_Lookup();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);


                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ViaNet_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ViaNet_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static Vendor_API_DishHome RequestDishHome_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            Vendor_API_DishHome objRes = new Vendor_API_DishHome();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);


                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<Vendor_API_DishHome>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<Vendor_API_DishHome>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_Dishhome_FTTH_Payment_Request RequestDishHome_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Dishhome_FTTH_Payment_Request objRes = new GetVendor_API_Dishhome_FTTH_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Dishhome_FTTH_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Dishhome_FTTH_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_NT_FTTH_Payment_Request RequestNT_FTTH_INTERNET_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_NT_FTTH_Payment_Request objRes = new GetVendor_API_NT_FTTH_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_NT_FTTH_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_NT_FTTH_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Classitech_Lookup RequestCLASSITECH_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_Classitech_Lookup objRes = new GetVendor_API_Classitech_Lookup();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Classitech_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Classitech_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static GetVendor_API_SUBISU_Lookup RequestSUBISU_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_SUBISU_Lookup objRes = new GetVendor_API_SUBISU_Lookup();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);

                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static GetVendor_API_SUBISU_Lookup_TV_ComboOffer RequestSUBISU_NEW_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_SUBISU_Lookup_TV_ComboOffer objRes = new GetVendor_API_SUBISU_Lookup_TV_ComboOffer();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);

                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Lookup_TV_ComboOffer>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Lookup_TV_ComboOffer>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        //public static string RequestSUBISU_NEW_LOOKUP(string JsonReq, string KhaltiAPIURL)
        //{
        //    GetVendor_API_SUBISU_Lookup objRes = new GetVendor_API_SUBISU_Lookup();
        //    try
        //    {
        //        string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
        //        if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
        //        {
        //            URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
        //        }
        //        AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
        //        string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

        //        //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
        //        VendorOutput = json;
        //        var data = (JObject)JsonConvert.DeserializeObject(json);

        //        string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
        //        string Details = String.Empty;
        //        if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
        //        {

        //            Details = FetchErrorDetails(data, Details);
        //        }
        //        else
        //        {
        //            //objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Lookup>(json);
        //            Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
        //        }
        //        Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
        //        objRes.Message = (objRes.status ? "success" : (Details));
        //        //return objRes;
        //        return VendorOutput;
        //    }
        //    catch (WebException e)
        //    {
        //        using (WebResponse response = e.Response)
        //        {
        //            HttpWebResponse httpResponse = (HttpWebResponse)response;
        //            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
        //            using (Stream data = response.GetResponseStream())
        //            using (var reader = new StreamReader(data))
        //            {
        //                var json = reader.ReadToEnd();
        //                //objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SUBISU_Lookup>(json);
        //                //return objRes;
        //                return VendorOutput;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        objRes.status = false;
        //        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
        //        //return objRes;
        //        return VendorOutput;
        //    }

        //}

        public static GetVendor_API_DataPack_Lookup RequestDataPack_LOOKUP(string JsonReq, ref string URL, string KhaltiAPIURL)
        {
            GetVendor_API_DataPack_Lookup objRes = new GetVendor_API_DataPack_Lookup();
            try
            {
                URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                VendorOutput = json;
                Common.Common.AddLogs($"getpackages/ncell-product/: Req : {JsonReq}: Res:{json}", false, (int)AddLog.LogType.DBLogs);
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_DataPack_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_DataPack_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        /// <summary>
        /// <paramref name="GetBusRoutes"/>
        /// </summary>
        /// <param name="JsonReq"></param>
        /// <param name="URL"></param>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 

        #region CableCar
        public static string RequestGetTicketTypes(string JsonReq, ref string URL, string KhaltiAPIURL)
        {
            GetVendor_API_GetTicketTypes objRes = new GetVendor_API_GetTicketTypes();
            string json = string.Empty;
            try
            {
                URL = KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = KhaltiAPIURL;
                    // URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                json = GetMethod_CableCarWeb(URL, "");

                VendorOutput = json;
                Common.Common.AddLogs($"api/ipg/TicketTypes: Req : {JsonReq}: Res:{json}", false, (int)AddLog.LogType.DBLogs);
                var data2 = json.ToString();
                var data = (JArray)JsonConvert.DeserializeObject(data2);
                var data3 = data.ToArray();
                var data4 = data3.ToString();
                object http = data;


                string Details = String.Empty;


            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    //HttpWebResponse httpResponse = (HttpWebResponse)response;
                    //Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    //using (Stream data = response.GetResponseStream())
                    //using (var reader = new StreamReader(data))
                    //{
                    //    var json = reader.ReadToEnd();
                    //    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_GetTicketTypes>(json);
                    //    return objRes;
                    //}
                }
            }
            catch (Exception ex)
            {
                //objRes.status = false;
                //objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                //return objRes;
            }

            return json;
        }

        public static string PayCableTransaction(string JsonReq, ref string URL, string KhaltiAPIURL, string transactionId, object ticketdetails, string Amount, string customerWalletId, string User, string UserInput)
        {
            GetVendor_API_GetTicketTypes objRes = new GetVendor_API_GetTicketTypes();
            string json = string.Empty;
            try
            {
                URL = KhaltiAPIURL;  //ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = KhaltiAPIURL;

                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                json = PostMethodCableCar(URL, transactionId, ticketdetails, User, Amount, customerWalletId, UserInput, "");

                VendorOutput = json;
                Common.Common.AddLogs($"api/ipg/PayTranaction: Req : {JsonReq}: Res:{json}", false, (int)AddLog.LogType.DBLogs);
                string Details = String.Empty;


            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {

                }
            }
            catch (Exception ex)
            {
                //objRes.status = false;
                //objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                //return objRes;
            }

            return json;
        }



        public static string GetTicketInvoice(string JsonReq, ref string URL, string KhaltiAPIURL, string transactionId, string User, string UserInput, object payCabledata)
        {
            GetVendor_API_GetTicketTypes objRes = new GetVendor_API_GetTicketTypes();
            string json = string.Empty;
            try
            {
                URL = KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = KhaltiAPIURL;

                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                json = PostTicketcableCar(URL, transactionId, User, UserInput, "", payCabledata);

                VendorOutput = json;
                Common.Common.AddLogs($"api/ipg/GetTicketInvoice: Req : {JsonReq}: Res:{json}", false, (int)AddLog.LogType.DBLogs);
                // VendorApi_CommonHelper.saveReceipt(ServiceId.ToString(), "", "", WalletTransactionId, jsonData, resuserdetails.ContactNumber, objVendor_API_Requests.MemberName, "Insurance Payment", "Prime Life Insurance", user.Amount.ToString());
                string Details = String.Empty;


            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {

                }
            }
            catch (Exception ex)
            {
                //objRes.status = false;
                //objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                //return objRes;
            }

            return json;
        }

        public static string GetReconcileCableCar(string JsonReq, ref string URL, string KhaltiAPIURL, string transactionId, string User, string UserInput, object payCabledata)
        {
            GetVendor_API_GetTicketTypes objRes = new GetVendor_API_GetTicketTypes();
            string json = string.Empty;
            try
            {
                URL = KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                json = PostReconcileCable(URL, transactionId, User, UserInput, "", payCabledata);
                VendorOutput = json;

                Common.Common.AddLogs($"api/ipg/PayTranaction: Req : {JsonReq}: Res:{json}", false, (int)AddLog.LogType.DBLogs);
                string Details = String.Empty;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {

                }
            }
            catch (Exception ex)
            {
                //objRes.status = false;
                //objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                //return objRes;
            }

            return json;
        }


        #endregion CableCAr



        public static GetVendor_API_WebSurfer_UserList_Lookup RequestWebSurfer_USERLIST_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_WebSurfer_UserList_Lookup objRes = new GetVendor_API_WebSurfer_UserList_Lookup();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WebSurfer_UserList_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WebSurfer_UserList_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }


        public static GetVendor_API_WebSurfer_Lookup RequestWebSurfer_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_WebSurfer_Lookup objRes = new GetVendor_API_WebSurfer_Lookup();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WebSurfer_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WebSurfer_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static GetVendor_API_Techminds_Lookup RequestTechminds_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_Techminds_Lookup objRes = new GetVendor_API_Techminds_Lookup();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    try
                    {
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Techminds_Lookup>(json);
                    }
                    catch (Exception ex)
                    {
                        objRes.Message = "Data not found";
                    }
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Techminds_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static GetVendor_API_Arrownet_Lookup RequestArrownet_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_Arrownet_Lookup objRes = new GetVendor_API_Arrownet_Lookup();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Arrownet_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Arrownet_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static GetVendor_API_TransactionLookup RequestTRANSACTION_LOOKUP(string Req_ReferenceNo, ref AddVendor_API_Requests objVendor_API_Requests)
        {
            GetVendor_API_TransactionLookup objRes = new GetVendor_API_TransactionLookup();
            try
            {
                string LookupURL = $"{Vendor_Lookup_URL_Prefix}status?token={Req_TokenLive}&reference={Req_ReferenceNo}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{Vendor_Lookup_URL_Prefix_localhost}status?token={Req_TokenLive_localhost}&reference={Req_ReferenceNo}";
                }
                var json = new WebClient().DownloadString(LookupURL);
                var data = (JObject)JsonConvert.DeserializeObject(json);
                objRes = JsonConvert.DeserializeObject<GetVendor_API_TransactionLookup>(json);
                string Details = String.Empty;
                Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? Convert.ToString(data["message"]) : Convert.ToString(data["details"]));
                objRes.details = Details;
                objRes.message = Convert.ToString(data["state"]);
                Common.Common.AddLogs($"DLR Lookup  on {Common.Common.fnGetdatetime()} with Req_ReferenceNo as : {Req_ReferenceNo}. Json Details: {json}", false, (int)AddLog.LogType.DLRLookup, Common.Common.CreatedBy, Common.Common.CreatedByName, false);

                if (objRes.jsonData != null)
                {
                    GetVendor_API_TransactionLookup_JsonData objJsonData = JsonConvert.DeserializeObject<GetVendor_API_TransactionLookup_JsonData>(objRes.jsonData);
                    if (objJsonData != null)
                    {
                        objRes.response_id = Convert.ToString(objJsonData.response_id);
                    }
                }
                if (!string.IsNullOrEmpty(objRes.response_id))
                {
                    objVendor_API_Requests.Res_Khalti_Id = objRes.response_id;
                    RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objVendor_API_Requests, "vendor_api_requests");
                }
                objRes.jsonData = json;

                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_TransactionLookup>(json);
                        Common.Common.AddLogs($"DLR Lookup  on {Common.Common.fnGetdatetime()} with Req_ReferenceNo as : {Req_ReferenceNo}. Json Details: {json}", false, (int)AddLog.LogType.DLRLookup, Common.Common.CreatedBy, Common.Common.CreatedByName, false);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        // ***********************  Antivirus  ***********************************
        public static GetVendor_API_Kaspersky_Lookup RequestKaspersky_LOOKUP(string KhaltiAPIURL)
        {
            GetVendor_API_Kaspersky_Lookup objRes = new GetVendor_API_Kaspersky_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiUrl_Root + KhaltiAPIURL}?token={Req_TokenLive}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{KhaltiApiUrl_Root_localhost + KhaltiAPIURL}?token={Req_TokenLive_localhost}";
                }
                var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Kaspersky_Lookup>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Kaspersky_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        // ********************************************************************
        // ***********************  Bussewa : LOOKUP *************************
        // ********************************************************************
        public static GetVendor_API_Bussewa_Lookup RequestBussewa_LOOKUP(string Reference, string BoardingFrom, string ArrivalTo, string ShiftDayNight, string Date, string KhaltiAPIURL)
        {
            GetVendor_API_Bussewa_Lookup objRes = new GetVendor_API_Bussewa_Lookup();
            try
            {
                string LookupURL = $"{ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL}?token={Req_TokenLive}&reference={Reference}&from={BoardingFrom}&to={ArrivalTo}&shift={ShiftDayNight}&date={Date}";
                var json = new WebClient().DownloadString(LookupURL);
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error" || Error.ToLower() == "invalid_parameters")
                {
                    if (data["details"]["date"] != null)
                    {
                        Details = data["details"]["date"].ToString();
                    }
                    else if (data["details"]["from"] != null)
                    {
                        Details = data["details"]["from"].ToString();
                    }
                    else if (data["details"]["to"] != null)
                    {
                        Details = data["details"]["to"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Bussewa_Lookup>(json);
                }
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details) + Details));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        var Exceptiondata = (JObject)JsonConvert.DeserializeObject(json);
                        string Error = ((Exceptiondata["error"] == null) ? String.Empty : Convert.ToString(Exceptiondata["error"])); string message = ((Exceptiondata["message"] == null) ? String.Empty : Convert.ToString(Exceptiondata["message"]));
                        string Details = String.Empty;
                        if (Error.ToLower() == "validation_error" || Error.ToLower() == "invalid_parameters")
                        {
                            if (Exceptiondata["details"]["date"] != null)
                            {
                                Details = Exceptiondata["details"]["date"].ToString();
                            }
                            else if (Exceptiondata["details"]["from"] != null)
                            {
                                Details = Exceptiondata["details"]["from"].ToString();
                            }
                            else if (Exceptiondata["details"]["to"] != null)
                            {
                                Details = Exceptiondata["details"]["to"].ToString();
                            }
                        }
                        else
                        {
                            objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Bussewa_Lookup>(json);
                        }
                        objRes.Message = (String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message) + " " + Details;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }


        // ***********************  Bussewa : ROUTES ***************************
        public static GetVendor_API_Bussewa_Routes_Lookup RequestBussewa_LOOKUP_ROUTES(string Reference, string KhaltiAPIURL)
        {
            GetVendor_API_Bussewa_Routes_Lookup objRes = new GetVendor_API_Bussewa_Routes_Lookup();
            try
            {
                Vendor_Input_Bussewa_Routes_Lookup_Request objReq = new Vendor_Input_Bussewa_Routes_Lookup_Request();
                objReq.token = Req_TokenLive;
                objReq.reference = Reference;
                RequestedToken = objReq.token;
                string JsonReq = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error" || Error.ToLower() == "invalid_parameters")
                {
                    if (data["details"]["date"] != null)
                    {
                        Details = data["details"]["date"].ToString();
                    }
                    else if (data["details"]["from"] != null)
                    {
                        Details = data["details"]["from"].ToString();
                    }
                    else if (data["details"]["to"] != null)
                    {
                        Details = data["details"]["to"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Bussewa_Routes_Lookup>(json);
                }
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details) + Details));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        var Exceptiondata = (JObject)JsonConvert.DeserializeObject(json);
                        string Error = ((Exceptiondata["error"] == null) ? String.Empty : Convert.ToString(Exceptiondata["error"])); string message = ((Exceptiondata["message"] == null) ? String.Empty : Convert.ToString(Exceptiondata["message"]));
                        string Details = String.Empty;
                        if (Error.ToLower() == "validation_error" || Error.ToLower() == "invalid_parameters")
                        {
                            if (Exceptiondata["details"]["date"] != null)
                            {
                                Details = Exceptiondata["details"]["date"].ToString();
                            }
                            else if (Exceptiondata["details"]["from"] != null)
                            {
                                Details = Exceptiondata["details"]["from"].ToString();
                            }
                            else if (Exceptiondata["details"]["to"] != null)
                            {
                                Details = Exceptiondata["details"]["to"].ToString();
                            }
                        }
                        else
                        {
                            objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Bussewa_Routes_Lookup>(json);
                        }
                        objRes.Message = (String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message) + " " + Details;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        // ***********************  Airlines  ***********************************
        public static GetVendor_API_Airlines_Sector_Lookup RequestAirlines_SECTORS_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_Airlines_Sector_Lookup objRes = new GetVendor_API_Airlines_Sector_Lookup();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);


                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_Sector_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_Sector_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static GetVendor_API_Airlines_Lookup RequestAirlines_LOOKUP(string Reference, string FlightType, string TripType, string FlightDate, string ReturnDate, string Adult, string Child, string FromDeparture, string ToArrival, string KhaltiAPIURL)
        {
            GetVendor_API_Airlines_Lookup objRes = new GetVendor_API_Airlines_Lookup();
            try
            {
                Reference = new CommonHelpers().GenerateUniqueId();
                string ReturnDateString = string.Empty;
                if (TripType.ToUpper() == "R")
                {
                    ReturnDateString = $"&return_date={ReturnDate}";
                }
                string LookupURL = $"{ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL}?token={Req_TokenLive}&reference={Reference}&flight_type={FlightType}&trip_type={TripType}&flight_date={FlightDate}{ReturnDateString}&adult={Adult}&child={Child}&from={FromDeparture}&to={ToArrival}";
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL}?token={Req_TokenLive_localhost}&reference={Reference}&flight_type={FlightType}&trip_type={TripType}&flight_date={FlightDate}{ReturnDateString}&adult={Adult}&child={Child}&from={FromDeparture}&to={ToArrival}";
                }

                var json = new WebClient().DownloadString(LookupURL);
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error" || Error.ToLower() == "invalid_parameters")
                {
                    if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                    else if (data["details"]["flight_type"] != null)
                    {
                        Details = data["details"]["flight_type"].ToString();
                    }
                    else if (data["details"]["trip_type"] != null)
                    {
                        Details = data["details"]["trip_type"].ToString();
                    }
                    else if (data["details"]["flight_date"] != null)
                    {
                        Details = data["details"]["flight_date"].ToString();
                    }
                    else if (data["details"]["return_date"] != null)
                    {
                        Details = data["details"]["return_date"].ToString();
                    }
                    else if (data["details"]["adult"] != null)
                    {
                        Details = data["details"]["adult"].ToString();
                    }
                    else if (data["details"]["child"] != null)
                    {
                        Details = data["details"]["child"].ToString();
                    }
                    else if (data["details"]["from"] != null)
                    {
                        Details = data["details"]["from"].ToString();
                    }
                    else if (data["details"]["to"] != null)
                    {
                        Details = data["details"]["to"].ToString();
                    }

                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_Lookup>(json);
                }
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details) + Details));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        var Exceptiondata = (JObject)JsonConvert.DeserializeObject(json);
                        string Error = ((Exceptiondata["error"] == null) ? String.Empty : Convert.ToString(Exceptiondata["error"])); string message = ((Exceptiondata["message"] == null) ? String.Empty : Convert.ToString(Exceptiondata["message"]));
                        string Details = String.Empty;
                        if (Error.ToLower() == "validation_error" || Error.ToLower() == "invalid_parameters")
                        {
                            if (Exceptiondata["details"]["reference"] != null)
                            {
                                Details = Exceptiondata["details"]["reference"].ToString();
                            }
                            else if (Exceptiondata["details"]["flight_type"] != null)
                            {
                                Details = Exceptiondata["details"]["flight_type"].ToString();
                            }
                            else if (Exceptiondata["details"]["trip_type"] != null)
                            {
                                Details = Exceptiondata["details"]["trip_type"].ToString();
                            }
                            else if (Exceptiondata["details"]["flight_date"] != null)
                            {
                                Details = Exceptiondata["details"]["flight_date"].ToString();
                            }
                            else if (Exceptiondata["details"]["return_date"] != null)
                            {
                                Details = Exceptiondata["details"]["return_date"].ToString();
                            }
                            else if (Exceptiondata["details"]["adult"] != null)
                            {
                                Details = Exceptiondata["details"]["adult"].ToString();
                            }
                            else if (Exceptiondata["details"]["child"] != null)
                            {
                                Details = Exceptiondata["details"]["child"].ToString();
                            }
                            else if (Exceptiondata["details"]["from"] != null)
                            {
                                Details = Exceptiondata["details"]["from"].ToString();
                            }
                            else if (Exceptiondata["details"]["to"] != null)
                            {
                                Details = Exceptiondata["details"]["to"].ToString();
                            }
                        }
                        else
                        {
                            objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_Lookup>(json);
                        }
                        objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details) + Details));
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_Airlines_Lookup RequestAirlines_DOWNLOAD_TICKET(string Reference, string MemberId, string LogID, string relativepath, ref string fullPath, string KhaltiAPIURL)
        {
            GetVendor_API_Airlines_Lookup objRes = new GetVendor_API_Airlines_Lookup();
            try
            {
                Reference = new CommonHelpers().GenerateUniqueId();
                string LookupURL = $"{TransactionLookup_URL_Prefix + KhaltiAPIURL}/{LogID}?token={Req_TokenLive}&reference={Reference}";
                //var json = new WebClient().DownloadString(LookupURL);
                string basepath = Common.Common.GetBasePath(relativepath);
                WebRequest request = WebRequest.Create(LookupURL);
                WebResponse response = request.GetResponse();
                string originalFileName = response.ResponseUri.AbsolutePath.Substring(response.ResponseUri.AbsolutePath.LastIndexOf("/") + 1);
                Stream streamWithFileBody = response.GetResponseStream();
                originalFileName = $"FlightTicket{System.DateTime.UtcNow.ToFileTimeUtc()}.pdf";
                fullPath = System.IO.Path.Combine(basepath, originalFileName);
                File.Create(fullPath).Dispose();
                using (Stream output = File.OpenWrite(fullPath))
                {
                    streamWithFileBody.CopyTo(output);
                }

                // Add code for New PDF ticket
                #region New Ticket PDF
                originalFileName = $"Flight_Ticket_{System.DateTime.UtcNow.ToFileTimeUtc()}.pdf";
                fullPath = System.IO.Path.Combine(basepath, originalFileName);

                //GetFlightDetail
                AddFlightBookingDetails outobject = new AddFlightBookingDetails();
                GetFlightBookingDetails inobject = new GetFlightBookingDetails();
                inobject.MemberId = Convert.ToInt64(MemberId);
                inobject.CheckFlightBooked = 1;
                inobject.LogIDs = LogID;
                inobject.CheckInbound = 0;
                AddFlightBookingDetails res = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.Common.StoreProcedures.sp_FlightBookingDetails_Get, inobject, outobject);
                if (res != null && res.Id > 0)
                {
                    string mystring = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/Templates/flight-pdf.html"));
                    if (res.TripType == "R")
                    {
                        mystring = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/Templates/flight-pdf-returnflight.html"));
                    }
                    string body = mystring;
                    //GetPassengerDetail
                    AddFlightPassengersDetails outobjectpass = new AddFlightPassengersDetails();
                    GetFlightPassengersDetails inobjectpass = new GetFlightPassengersDetails();
                    inobjectpass.BookingId = res.BookingId;
                    List<AddFlightPassengersDetails> reslist = RepCRUD<GetFlightPassengersDetails, AddFlightPassengersDetails>.GetRecordList(Common.Common.StoreProcedures.sp_FlightPassengersDetails_Get, inobjectpass, outobjectpass);
                    String str = "";
                    if (reslist != null)
                    {
                        for (int i = 0; i < reslist.Count; i++)
                        {
                            str += "<tr>";
                            str += "<td valign = 'top' >";
                            if (reslist[i].Gender == "M")
                            {
                                str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>Mr.</p>";
                            }
                            else
                            {
                                str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>Ms.</p>";
                            }
                            str += "</td>";
                            str += "<td valign='top'>";
                            str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>" + reslist[i].Firstname + " " + reslist[i].Lastname + " (" + reslist[i].Type + ")</p>";
                            str += "</td >";
                            str += "<td valign='top'>";
                            str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>" + reslist[i].Nationality + "</p>";
                            str += "</td>";
                            str += "<td valign='top'>";
                            str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>##PNRNo##</p>";
                            str += "</td>";
                            str += "<td valign='top'>";
                            str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;' >" + reslist[i].TicketNo + "</p>";
                            str += "</td></tr>";
                            //s.Append(str);
                        }
                    }
                    body = body.Replace("##tr##", str);
                    body = body.Replace("##PNRNo##", res.PnrNumber);
                    body = body.Replace("##FromPlace##", res.Departure);
                    body = body.Replace("##FromDate##", Convert.ToDateTime(res.Flightdatedt).ToString("dd-MMM-yyyy"));
                    body = body.Replace("##DepartureTime##", res.Departuretime);
                    //body = body.Replace("##TravelTime##", "");
                    body = body.Replace("##ToPlace##", res.Arrival);
                    body = body.Replace("##ToDate##", Convert.ToDateTime(res.Flightdatedt).ToString("dd-MMM-yyyy"));
                    body = body.Replace("##ArrivalTime##", res.Arrivaltime);
                    body = body.Replace("##Class##", res.Flightclasscode);
                    if (res.Refundable)
                    {
                        body = body.Replace("##Refundable##", "Refundable");
                    }
                    else
                    {
                        body = body.Replace("##Refundable##", "Non-Refundable");
                    }

                    body = body.Replace("##FreeBaggage##", res.Freebaggage);
                    body = body.Replace("##FlightNo##", res.Flightno);
                    TimeSpan span = (DateTime.Parse(Convert.ToDateTime(res.Flightdatedt).ToString("dd-MMM-yyyy") + " " + res.Arrivaltime) - DateTime.Parse(Convert.ToDateTime(res.Flightdatedt).ToString("dd-MMM-yyyy") + " " + res.Departuretime));
                    body = body.Replace("##TravelTime##", $"Time: {span.Hours}:{span.Minutes} Hour");
                    body = body.Replace("##AIRLINES-IMAGE##", res.Airlinelogo);
                    body = body.Replace("##AirlinesName##", res.Airlinename);
                    AddFlightBookingDetails res_Return = new AddFlightBookingDetails();
                    if (res.TripType == "R")
                    {
                        AddFlightBookingDetails outobject_Return = new AddFlightBookingDetails();
                        GetFlightBookingDetails inobject_Return = new GetFlightBookingDetails();
                        inobject_Return.MemberId = Convert.ToInt64(MemberId);
                        inobject_Return.LogIDs = LogID;
                        inobject_Return.CheckInbound = 1;
                        res_Return = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.Common.StoreProcedures.sp_FlightBookingDetails_Get, inobject_Return, outobject_Return);
                        if (res_Return != null && res_Return.Id > 0)
                        {
                            str = "";
                            if (reslist != null)
                            {
                                for (int i = 0; i < reslist.Count; i++)
                                {
                                    str += "<tr>";
                                    str += "<td valign = 'top' >";
                                    if (reslist[i].Gender == "M")
                                    {
                                        str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>Mr.</p>";
                                    }
                                    else
                                    {
                                        str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>Ms.</p>";
                                    }
                                    str += "</td>";
                                    str += "<td valign='top'>";
                                    str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>" + reslist[i].Firstname + " " + reslist[i].Lastname + " (" + reslist[i].Type + ")</p>";
                                    str += "</td >";
                                    str += "<td valign='top'>";
                                    str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>" + reslist[i].Nationality + "</p>";
                                    str += "</td>";
                                    str += "<td valign='top'>";
                                    str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>##PNRNo_Return##</p>";
                                    str += "</td>";
                                    str += "<td valign='top'>";
                                    str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;' >" + reslist[i].InboundTicketNo + "</p>";
                                    str += "</td></tr>";
                                    //s.Append(str);
                                }
                            }
                            body = body.Replace("##tr_return##", str);
                            body = body.Replace("##PNRNo_Return##", res_Return.PnrNumber);
                            body = body.Replace("##ReturnFromPlace##", res_Return.Departure);
                            body = body.Replace("##ReturnFromDate##", Convert.ToDateTime(res_Return.Flightdatedt).ToString("dd-MMM-yyyy"));
                            body = body.Replace("##ReturnDepartureTime##", res_Return.Departuretime);
                            //body = body.Replace("##ReturnTravelTime##", "");
                            body = body.Replace("##ReturnToPlace##", res_Return.Arrival);
                            body = body.Replace("##ReturnToDate##", Convert.ToDateTime(res_Return.Flightdatedt).ToString("dd-MMM-yyyy"));
                            body = body.Replace("##ReturnArrivalTime##", res_Return.Arrivaltime);
                            body = body.Replace("##ReturnClass##", res_Return.Flightclasscode);
                            if (res_Return.Refundable)
                            {
                                body = body.Replace("##ReturnRefundable##", "Refundable");
                            }
                            else
                            {
                                body = body.Replace("##ReturnRefundable##", "Non-Refundable");
                            }
                            body = body.Replace("##ReturnFreeBaggage##", res_Return.Freebaggage);
                            body = body.Replace("##ReturnFlightNo##", res_Return.Flightno);

                            TimeSpan span_Return = (DateTime.Parse(Convert.ToDateTime(res_Return.Flightdatedt).ToString("dd-MMM-yyyy") + " " + res_Return.Arrivaltime) - DateTime.Parse(Convert.ToDateTime(res_Return.Flightdatedt).ToString("dd-MMM-yyyy") + " " + res_Return.Departuretime));
                            body = body.Replace("##ReturnTravelTime##", $"Time: {span_Return.Hours}:{span_Return.Minutes} Hour");
                            body = body.Replace("##ReturnAIRLINES-IMAGE##", res_Return.Airlinelogo);
                            body = body.Replace("##ReturnAirlinesName##", res_Return.Airlinename);
                        }
                    }

                    //Get Total Passenger
                    int passengercount = res.Adult + res.Child;
                    body = body.Replace("##PassengerCount##", passengercount.ToString());
                    string AdultPassengerCount = res.Adult.ToString();
                    string AdultFare = (res.Adultfare * res.Adult).ToString();
                    string ChildPassengerCount = res.Child.ToString();
                    string ChildFare = (res.Childfare * res.Child).ToString();
                    body = body.Replace("##AdultPassengerCount##", AdultPassengerCount);
                    body = body.Replace("##ChildPassengerCount##", ChildPassengerCount);
                    body = body.Replace("##AdultFare##", AdultFare);
                    body = body.Replace("##ChildFare##", ChildFare);
                    body = body.Replace("##Fare##", res.Adultfare.ToString());
                    body = body.Replace("##FuelCharge##", (res.Fuelsurcharge * (res.Adult + res.Child)).ToString());
                    body = body.Replace("##Tax##", (res.Tax * passengercount).ToString());
                    body = body.Replace("##FareTotal##", res.Faretotal.ToString());

                    if (res.TripType == "R" && (res_Return.Adult > 0 || res_Return.Child > 0))
                    {

                        body = body.Replace("##PassengerCount_Return_Flight##", passengercount.ToString());
                        AdultPassengerCount = res_Return.Adult.ToString();
                        AdultFare = (res_Return.Adultfare * res_Return.Adult).ToString();
                        ChildPassengerCount = res_Return.Child.ToString();

                        int returnPaxCount = res_Return.Adult + res_Return.Child;
                        ChildFare = (res_Return.Childfare * res_Return.Child).ToString();
                        body = body.Replace("##AdultPassengerCount_Return_Flight##", AdultPassengerCount);
                        body = body.Replace("##ChildPassengerCount_Return_Flight##", ChildPassengerCount);
                        body = body.Replace("##AdultFare_Return_Flight##", AdultFare);
                        body = body.Replace("##ChildFare_Return_Flight##", ChildFare);
                        body = body.Replace("##Fare_Return_Flight##", res_Return.Adultfare.ToString());
                        body = body.Replace("##FuelCharge_Return_Flight##", (res_Return.Fuelsurcharge * (res_Return.Adult + res_Return.Child)).ToString());
                        body = body.Replace("##Tax_Return_Flight##", (res_Return.Tax * returnPaxCount).ToString());
                        body = body.Replace("##FareTotal_Return_Flight##", res_Return.Faretotal.ToString());

                    }
                    body = body.Replace("##FullName##", res.ContactName);
                    body = body.Replace("##Email##", res.ContactEmail);
                    body = body.Replace("##Contact##", res.ContactPhone);

                    //body = body.Replace("##TransactionType##", (uw.Sign == (int)MyPay.Models.Miscellaneous.WalletTransactions.Signs.Credit ? MyPay.Models.Miscellaneous.WalletTransactions.Signs.Credit.ToString() : MyPay.Models.Miscellaneous.WalletTransactions.Signs.Debit.ToString()));
                    body = body.Replace("##LogoImage##", Common.Common.LiveSiteUrl + "/Content/images/logonew.png");
                    body = body.Replace("##LiveUrl##", Common.Common.LiveSiteUrl_User);

                    body = body.Replace("##tel1##", Common.Common.tel1);
                    body = body.Replace("##tel2##", Common.Common.tel2);
                    body = body.Replace("##tel3##", Common.Common.tel3);
                    body = body.Replace("##tel4##", Common.Common.tel4);
                    body = body.Replace("##WebsiteName##", Common.Common.WebsiteName);
                    body = body.Replace("##WebsiteEmail##", Common.Common.WebsiteEmail);
                    body = body.Replace("##SupportEmail##", Common.Common.FromEmail);

                    //string filename = DateTime.Now.Ticks.ToString();

                    //Byte[] fileContent = PdfSharpConvert(body);
                    //System.IO.File.WriteAllBytes(Server.MapPath("/Content/TransactionPDF/" + filename + ".pdf"), fileContent);
                    System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName + ".html")).Dispose();
                    System.IO.File.WriteAllText(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName + ".html"), body);

                    System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName)).Dispose();

                    FileInfo htmlsource = new FileInfo(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName + ".html"));
                    FileInfo pdfDest = new FileInfo(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName));


                    // pdfHTML specific code
                    ConverterProperties converterProperties = new ConverterProperties();
                    HtmlConverter.ConvertToPdf(htmlsource, pdfDest, converterProperties);

                }
                #endregion
                //objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_Lookup>(json);
                //objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                objRes.status = true;
                objRes.Message = "success";
                objRes.FilePath = Common.Common.LiveApiUrl + relativepath + "/" + originalFileName;
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        var Exceptiondata = (JObject)JsonConvert.DeserializeObject(json);
                        string Error = ((Exceptiondata["error"] == null) ? String.Empty : Convert.ToString(Exceptiondata["error"])); string message = ((Exceptiondata["message"] == null) ? String.Empty : Convert.ToString(Exceptiondata["message"]));
                        string Details = String.Empty;
                        Details = ((Exceptiondata["details"] == null) ? String.Empty : Convert.ToString(Exceptiondata["details"]));
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ("Request Failed " + Details + " " + Error + " " + message) : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static List<AddFlightPassengersDetails> GetPassRecordList(long bookingId)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {
                var storedProcedureName = "sp_FlightPassengersDetails_Get";
                var values = new
                {
                    bookingId = bookingId,
                };

                try
                {
                    // Use Query method to get a list of results
                    List<AddFlightPassengersDetails> paxDetailsList = connection.Query<AddFlightPassengersDetails>(storedProcedureName, values, commandType: CommandType.StoredProcedure).ToList();

                    return paxDetailsList;
                }
                catch (SqlException sqlEx)
                {
                    // Handle exceptions
                    Console.WriteLine($"SQL Exception: {sqlEx.Message}");
                    return null; // or throw an exception, log, etc., based on your application's requirements
                }
            }
        }

        public static GetVendor_API_Airlines_Lookup RequestDownloadCableCar(string TransactionId, string relativepath, ref string fullPath)
        {

            //WalletTransactions uw = new WalletTransactions();
            //uw.TransactionUniqueId = TransactionId;


            //if (uw.GetRecord())
            //{
            //    switch (uw.Type)
            //    {
            //        case 300:


            //            break;
            //        default:
            //            break;
            //    }

            //}


            GetVendor_API_Airlines_Lookup objRes = new GetVendor_API_Airlines_Lookup();
            try
            {

                string originalFileName = "";

                // Add code for New PDF ticket
                #region New Ticket PDF
                originalFileName = $"CableCar_Ticket_{System.DateTime.UtcNow.ToFileTimeUtc()}.pdf";
                string jsonData = "";
                ReceiptsVendorResponse objreceiptsVendorResponse = null;
                objreceiptsVendorResponse = VendorApi_CommonHelper.GetCableCarReceipts(TransactionId);
                var CBSP = JsonConvert.DeserializeObject<TicketResult>(objreceiptsVendorResponse.table1JSONContent);
                var Tdd = new InvoiceResponse
                {
                    TicketMessage = CBSP.InvoiceResponse.TicketMessage,
                    ReferenceId = CBSP.InvoiceResponse.ReferenceId,
                    TotalAmount = CBSP.InvoiceResponse.TotalAmount.ToString(),
                    UserName = CBSP.InvoiceResponse.UserName,
                };

                // Var Ticked = JsonConvert.<InvoiceResponses>(CBSP.InvoiceResponse);
                List<TicketResponse> TR = JsonConvert.DeserializeObject<List<TicketResponse>>(JsonConvert.SerializeObject(CBSP.TicketResponse));
                List<TicketResponse> LTD = new List<TicketResponse>();
                TicketInvoiceCommon TicketCommon = new TicketInvoiceCommon();

                string tableData = "";
                tableData = "<center><table>";

                int numberOfRowsRequired = TR.Count / 2;

                var TDCount = 0;

                foreach (var item in TR)
                {
                    TicketResponse TicketResponse = new TicketResponse();
                    TicketResponse.QRCode = item.QRCode;
                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                    QRCodeData qrCodeData = qrGenerator.CreateQrCode(item.QRCode, QRCodeGenerator.ECCLevel.Q);
                    QRCode qrCode = new QRCode(qrCodeData);
                    Bitmap qrCodeImage = qrCode.GetGraphic(20);
                    string ImageUrl = "";
                    using (MemoryStream stream = new MemoryStream())
                    {
                        qrCodeImage.Save(stream, ImageFormat.Png);
                        byte[] byteImage = stream.ToArray();
                        ImageUrl = string.Format(Convert.ToBase64String(byteImage));
                    }
                    // qrCodeImage.Save(qrFilePath + qrImageName, ImageFormat.Png);
                    GeneratedBarcode barcode = IronBarCode.BarcodeWriter.CreateBarcode(item.BarCode, BarcodeWriterEncoding.Code128);
                    barcode.ResizeTo(400, 120);
                    barcode.AddBarcodeValueTextBelowBarcode();
                    barcode.ChangeBarCodeColor(Color.Black);
                    barcode.SetMargins(10);
                    var GuId1 = DateTime.Now.ToString("yyyyMMddHHmmssffff");
                    string qrFilePathbar = HttpContext.Current.Server.MapPath("~/Content/CableBarCode/");
                    string BarImageName = "BarImage" + GuId1 + ".png";
                    //string ImageUrlBar = "";
                    //string tempFilePath = "";
                    //// Save the barcode image to the temporary file
                    //barcode.SaveAsPng(qrFilePathbar+ BarImageName);

                    //// Read the file into a MemoryStream
                    //using (FileStream fileStream = new FileStream(qrFilePathbar, FileMode.Open, FileAccess.Read))
                    //using (MemoryStream stream = new MemoryStream())
                    //{
                    //    fileStream.CopyTo(stream);
                    //    byte[] barcodeImageBytes = stream.ToArray();
                    //    ImageUrlBar = Convert.ToBase64String(barcodeImageBytes);
                    //}

                    //// Delete the temporary file if needed
                    //File.Delete(tempFilePath);
                    TicketResponse.PassengerType = item.PassengerType;
                    TicketResponse.TripType = item.TripType;
                    TicketResponse.TicketNumber = item.TicketNumber;
                    TicketResponse.ValidUntil = item.ValidUntil;
                    LTD.Add(TicketResponse);
                    string mystring = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/Templates/CableCardownlod.html"));
                    string body = mystring;
                    if (TDCount % 2 == 0)
                    {
                        tableData += "<tr>";
                    }

                    tableData += "<table cellspacing=\"0\" border=\"0\" cellpadding=\"0\" width=\"100%\" bgcolor=\"#f2f3f8\" style=\"@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: 'Open Sans', sans-serif;\">\r\n " +
                        "<tr>\r\n <td>\r\n <table style=\"background-color: #fff; max-width:570px;  margin:0 auto;\" width=\"100%\" border=\"0\" align=\"center\" cellpadding=\"0\" cellspacing=\"0\">\r\n<tr>\r\n<td style=\"height:80px;\">&nbsp;</td>\r\n </tr>\r\n<tr>\r\n" +
                        "<td style=\"height:20px;\">&nbsp;</td>\r\n</tr>" +
                        "\r\n <tr>\r\n <td style=\"text-align:center;\">\r\n <img width=\"160\" src=\"\" title=\"logo\" alt=\"logo\" style=\"margin: 0;\" />\r\n  <h1 style=\"color:#1e1e2d; font-weight:500; margin:15px 0;font-size:22px;font-family:'Rubik',sans-serif;\">Ticket Information </h1>\r\n  <span style=\"display:inline-block; vertical-align:middle; margin:0px 0; border-bottom:1px solid #cecece; width:100px;\" />\r\n  <h5 style=\"color:#1e1e2d; font-weight:500; margin:15px 0;font-size:13px;font-family:'Rubik',sans-serif;\"> Transaction Id. : " + objreceiptsVendorResponse.TxnID + " </h5>\r\n </td>\r\n </tr>\r\n <tr>\r\n<td>" +
                        "\r\n<table width=\"95%\" border=\"0\" align=\"center\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width:670px; border-radius:3px;\">\r\n  <tr>\r\n <td style=\"height:20px;\">&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n  <td style=\"text-align:center;\">\r\n <img width=\"160\"" +
                        " src=\"https://annapurnacablecar.com.np/img/4ca76379-3811-4e0c-9419-af71bd471a77/footer-logo.png\" title=\"logo\" alt=\"logo\" style=\"margin: 0;\" />\r\n\r\n </td>\r\n<td style=\"padding:0 15px;\">\r\n   <p style=\"color:#000000; font-size:15px;line-height:24px; margin:0;\">\r\n <strong>Annapurna Cable Car </strong>\r\n </p>\r\n <p style=\"color:#000000; font-size:15px;line-height:24px; margin:0;\">\r\n  <strong>Passenger Type:" + item.PassengerType + "</strong>\r\n </p>\r\n <p style=\"color:#000000; font-size:15px;line-height:24px; margin:0;\">\r\n  <strong>TicketNo :" + item.TicketNumber + "</strong>\r\n </p>\r\n </td>\r\n <td style=\"padding:0 15px;\">\r\n <p style=\"color:hsl(0, 0%, 0%); font-size:15px;line-height:24px; margin:0;\">\r\n " +
                        " <strong>Rs:" + Tdd.TotalAmount + "</strong>\r\n  </p>\r\n<p style=\"color:#147900; font-size:15px;line-height:24px; margin:0;\">\r\n <strong>" + item.TripType + "</strong>\r\n  </p>\r\n <p style=\"color:#000000; font-size:15px;line-height:24px; margin:0;\">\r\n " +
                        "<strong>Valid Till : " + item.ValidUntil + "  </strong>\r\n  </p>\r\n </td>\r\n </tr>\r\n  <tr>\r\n<td style=\"height:40px;\">&nbsp;</td>\r\n</tr>\r\n </table>\r\n </td>\r\n  </tr>\r\n <tr>\r\n  <td style=\"text-align:center;\">\r\n <img width=200 height=200 src=\"data: image/png; base64," + ImageUrl + "\"\\\"/> \r\n</td>\r\n\r\n  </tr>\r\n  <tr>\r\n <td style=\"height:20px;\">&nbsp;</td>\r\n  </tr>\r\n <tr>\r\n <td style=\"text-align:center;\">\r\n <p style=\"font-size:16px; color:rgba(0, 0, 0, 0.741); line-height:24px; margin:0 0 0;\">\r\n <strong>Purchased by : " + Tdd.UserName + "</strong>\r\n  </p>\r\n <p style=\"font-size:16px; color:rgba(0, 0, 0, 0.741); line-height:24px; margin:0 0 0;\">\r\n" +
                        " <strong>Contact No. : " + objreceiptsVendorResponse.ContactNumber + " </strong>\r\n  </p>\r\n <span style=\"display:inline-block; vertical-align:middle; margin:10px 0; border-bottom:1px dashed #777777; width:500px;\" />\r\n </td>" +
                        "\r\n </tr>\r\n <tr>\r\n  <td style=\"padding:0 50px;\">\r\n <p style=\"font-size:16px; color:rgba(0, 0, 0, 0.741); line-height:24px; margin:0 0 0;\">\r\n <strong>Keep In Mind</strong>\r\n   </p>\r\n   </td>\r\n</tr>\r\n <tr>\r\n <td style=\"padding:10px 25px; font-size: 13px;\">\r\n <ul>\r\n   <li> Valid Identification required for Students and Senior Citizens (60yrs & above).</li>\r\n <li>Failure in Passenger Verification will Require New Ticket Purchase.</li>\r\n <li>This ticket is non-transferrable, non-refundable and non-exchangeable.</li>\r\n <li>This ticket may not be altered, copied, transferred or resold.</li>\r\n<li>Every passenger is insured upto NPR 5,00,000/-</li>\r\n  <li>15 KG Baggage per Person Allowed. Extra Charge for excess Baggage.  </li>\r\n </ul>\r\n  </td>\r\n  </tr>\r\n  <tr>\r\n <td style=\"text-align:center;\">\r\n <p style=\"font-style: italic;font-size:16px; color:rgba(0, 0, 0, 0.741); line-height:24px; margin:0 0 0;\">\r\n <strong>Thank You,</strong>\r\n  </p>\r\n  </td>\r\n </tr>\r\n <tr>\r\n <td style=\"text-align:center;\">\r\n" +
                        " <img width=\"160\" src=\"\" title=\"logo\" alt=\"logo\" style=\"margin: 0;\" />\r\n\r\n  </td>"
                        + "\r\n </tr>\r\n  <tr>\r\n <td style=\"text-align:center;\">\r\n  <p style=\"font-size:14px; color:rgba(69, 80, 86, 0.7411764705882353); line-height:18px; margin:0 0 0;\">\r\n  &copy; <strong>www.mypay.com.np</strong>\r\n </p>\r\n </td>\r\n  </tr>\r\n <tr>\r\n <td style=\"height:80px;\">&nbsp;</td>\r\n  </tr>\r\n </table>\r\n </td>\r\n</tr>\r\n </table>" + "</p>" + "<hr>" + "</br>" + "\r\n<tr> \r\n"
                         ;

                    TDCount += 1;

                    if (TDCount % 2 == 0)
                    {
                        tableData += "</tr>";
                    }


                };

                tableData += "</table></center>";

                if (objreceiptsVendorResponse.TxnID != null)
                {
                    string mystring = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/Templates/CableCardownlod.html"));
                    string body = mystring;
                    String str = "";
                    body = body.Replace("##tr##", str);
                    body = body.Replace("##QRTABLE##", tableData);

                    System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/CableCarTicketPDF/" + originalFileName + ".html")).Dispose();
                    System.IO.File.WriteAllText(HttpContext.Current.Server.MapPath("/Content/CableCarTicketPDF/" + originalFileName + ".html"), body);

                    System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/CableCarTicketPDF/" + originalFileName)).Dispose();

                    FileInfo htmlsource = new FileInfo(HttpContext.Current.Server.MapPath("/Content/CableCarTicketPDF/" + originalFileName + ".html"));
                    FileInfo pdfDest = new FileInfo(HttpContext.Current.Server.MapPath("/Content/CableCarTicketPDF/" + originalFileName));


                    // pdfHTML specific code
                    ConverterProperties converterProperties = new ConverterProperties();
                    HtmlConverter.ConvertToPdf(htmlsource, pdfDest, converterProperties);



                }
                #endregion
                objRes.status = true;
                objRes.Message = "success";
                objRes.FilePath = HttpContext.Current.Server.MapPath("/Content/CableCarTicketPDF/" + originalFileName);
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        var Exceptiondata = (JObject)JsonConvert.DeserializeObject(json);
                        string Error = ((Exceptiondata["error"] == null) ? String.Empty : Convert.ToString(Exceptiondata["error"])); string message = ((Exceptiondata["message"] == null) ? String.Empty : Convert.ToString(Exceptiondata["message"]));
                        string Details = String.Empty;
                        Details = ((Exceptiondata["details"] == null) ? String.Empty : Convert.ToString(Exceptiondata["details"]));
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ("Request Failed " + Details + " " + Error + " " + message) : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }



        public static GetVendor_API_Airlines_CheckStatus RequestAirlines_FLIGHT_STATUS(string Reference, string KhaltiAPIURL)
        {
            GetVendor_API_Airlines_CheckStatus objRes = new GetVendor_API_Airlines_CheckStatus();
            try
            {
                string LookupURL = $"{TransactionLookup_URL_Prefix + KhaltiAPIURL}?token={Req_TokenLive}&reference={Reference}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{TransactionLookup_URL_Prefix_localhost + KhaltiAPIURL}?token={Req_TokenLive_localhost}&reference={Reference}";
                }
                Common.Common.AddLogs($"Flight lookup called at {Common.Common.fnGetdatetime()}: URL: {LookupURL}", false, (int)AddLog.LogType.DBLogs, Common.Common.CreatedBy, Common.Common.CreatedByName, false);
                var json = new WebClient().DownloadString(LookupURL);
                Common.Common.AddLogs($"Flight lookup Json: {json}", false, (int)AddLog.LogType.DBLogs, Common.Common.CreatedBy, Common.Common.CreatedByName, false);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_CheckStatus>(json);
                if (objRes != null && objRes.detail != null)
                {
                    objRes.Message = objRes.detail.outbound_status.ToLower();
                }
                else
                {
                    objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                }
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        var Exceptiondata = (JObject)JsonConvert.DeserializeObject(json);
                        string Error = ((Exceptiondata["error"] == null) ? String.Empty : Convert.ToString(Exceptiondata["error"])); string message = ((Exceptiondata["message"] == null) ? String.Empty : Convert.ToString(Exceptiondata["message"]));
                        string Details = String.Empty;
                        Details = ((Exceptiondata["detail"] == null) ? String.Empty : Convert.ToString(Exceptiondata["detail"]));
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ("Request Failed " + Details + " " + Error + " " + message) : objRes.Message;
                        objRes.details = Details;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static GetVendor_API_Airlines_Payment_Request RequestAirlines_BOOK_FLIGHT(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_Airlines_Payment_Request objRes = new GetVendor_API_Airlines_Payment_Request();
            try
            {
                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                Common.Common.AddLogs("Flight Book API URL: " + URL + "  JSON Request" + JsonReq + ". Response received: " + json + " on " + Common.Common.fnGetdatetime() + ".  ", false, Convert.ToInt32(AddLog.LogType.DBLogs), Common.Common.CreatedBy, Common.Common.CreatedByName, true, "", "", (int)AddLog.LogActivityEnum.Flight_Airlines);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;

                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    if (data["details"]["booking_id"] != null)
                    {
                        Details = data["details"]["booking_id"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                    else if (data["details"]["flight_id"] != null)
                    {
                        Details = data["details"]["flight_id"].ToString();
                    }
                    else if (data["details"]["return_flight_id"] != null)
                    {
                        Details = data["details"]["return_flight_id"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (objRes.message));
                objRes.detail = Details;
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_Airlines_IssueFlight_Request RequestAirlines_ISSUE_FLIGHT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Airlines_IssueFlight_Request objRes = new GetVendor_API_Airlines_IssueFlight_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    if (data["details"]["booking_id"] != null)
                    {
                        Details = data["details"]["booking_id"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                    else if (data["details"]["flight_id"] != null)
                    {
                        Details = data["details"]["flight_id"].ToString();
                    }
                    else if (data["details"]["return_flight_id"] != null)
                    {
                        Details = data["details"]["return_flight_id"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_IssueFlight_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                    if (string.IsNullOrEmpty(Details))
                    {
                        Details = (String.IsNullOrEmpty(Convert.ToString(data["message"])) ? String.Empty : Convert.ToString(data["message"])); Details = Details.Replace("\r\n", "");
                    }
                }
                TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (objRes.message));
                objRes.detail = Details;
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_IssueFlight_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }


        public static GetVendor_API_Airlines_CancelFlight_Request RequestAirlines_CANCEL_FLIGHT(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_Airlines_CancelFlight_Request objRes = new GetVendor_API_Airlines_CancelFlight_Request();
            try
            {
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    if (data["details"]["booking_id"] != null)
                    {
                        Details = data["details"]["booking_id"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                    else if (data["details"]["cancel_tickets"] != null)
                    {
                        Details = data["details"]["cancel_tickets"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_CancelFlight_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_CancelFlight_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_Airlines_AddPassenger_Request RequestAirlines_ADD_PASSENGERS(string JsonReq, AddUserLoginWithPin resUser, string KhaltiAPIURL)
        {
            GetVendor_API_Airlines_AddPassenger_Request objRes = new GetVendor_API_Airlines_AddPassenger_Request();
            try
            {
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    if (data["details"]["booking_id"] != null)
                    {
                        Details = data["details"]["booking_id"].ToString();
                    }
                    else if (data["details"]["contact_name"] != null)
                    {
                        Details = data["details"]["contact_name"].ToString();
                    }
                    else if (data["details"]["contact_phone"] != null)
                    {
                        Details = data["details"]["contact_phone"].ToString();
                    }
                    else if (data["details"]["childrens"] != null)
                    {
                        Details = data["details"]["childrens"].ToString();
                    }
                    else if (data["details"]["passengers"].Count() > 0)
                    {
                        for (int i = 0; i < data["details"]["passengers"].Count(); i++)
                        {

                            if (data["details"]["passengers"][i]["firstname"] != null)
                            {
                                Details = data["details"]["passengers"][i]["firstname"].ToString();
                            }
                            else if (data["details"]["passengers"][i]["lastname"] != null)
                            {
                                Details = data["details"]["passengers"][i]["lastname"].ToString();
                            }
                            else if (data["details"]["passengers"][i]["type"] != null)
                            {
                                Details = data["details"]["passengers"][i]["type"].ToString();
                            }
                            else if (data["details"]["passengers"][i]["title"] != null)
                            {
                                Details = data["details"]["passengers"][i]["title"].ToString();
                            }
                            else if (data["details"]["passengers"][i]["gender"] != null)
                            {
                                Details = data["details"]["passengers"][i]["gender"].ToString();
                            }
                            else if (data["details"]["passengers"][i]["nationality"] != null)
                            {
                                Details = data["details"]["passengers"][i]["nationality"].ToString();
                            }
                        }

                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_AddPassenger_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                Common.Common.AddLogs("Flight Add Passengers JSON Request" + JsonReq + ". Response received: " + json + " on " + Common.Common.fnGetdatetime() + ".  ", false, Convert.ToInt32(AddLog.LogType.ApiRequests), Convert.ToInt64(resUser.MemberId), "", true, resUser.PlatForm, resUser.DeviceCode, (int)AddLog.LogActivityEnum.Flight_Airlines);

                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_AddPassenger_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_Airlines_Lookup RequestPlasmaAirlines_DOWNLOAD_TICKET(long BookingId,string MemberId, string FlightId, string FullName, string ContactNo, string Email, string relativepath, ref string fullPath)
        {
            GetVendor_API_Airlines_Lookup objRes = new GetVendor_API_Airlines_Lookup();
            try
            {
                string basepath = Common.Common.GetBasePath(relativepath);
                // Add code for New PDF ticket
                #region New Ticket PDF
                string originalFileName = $"FlightTicket{System.DateTime.UtcNow.ToFileTimeUtc()}.pdf";
                fullPath = System.IO.Path.Combine(basepath, originalFileName);
                //GetFlightDetail
                //GetFlightDetail
                AddFlightBookingDetails outobject = new AddFlightBookingDetails();
                GetFlightBookingDetails inobject = new GetFlightBookingDetails();
                inobject.MemberId = Convert.ToInt64(MemberId);
                inobject.CheckFlightBooked = 1;
                inobject.BookingId = BookingId;
                //inobject.LogIDs = LogID;
                inobject.CheckInbound = 0;
                AddFlightBookingDetails res = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.Common.StoreProcedures.sp_FlightBookingDetails_Get, inobject, outobject);
                if (res != null && res.Id > 0)
                {
                    string mystring = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/Templates/flight-pdf.html"));
                    if (res.TripType == "R")
                    {
                        mystring = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/Templates/flight-pdf-returnflight.html"));
                    }
                    string body = mystring;
                    //GetPassengerDetail
                    AddFlightPassengersDetails outobjectpass = new AddFlightPassengersDetails();
                    GetFlightPassengersDetails inobjectpass = new GetFlightPassengersDetails();
                    inobjectpass.BookingId = BookingId;
                    List<AddFlightPassengersDetails> reslist = VendorApi_CommonHelper.GetPlasmaPassengersDetailsList(inobjectpass.BookingId);
                    //List<AddFlightPassengersDetails> reslist = RepCRUD<GetFlightPassengersDetails, AddFlightPassengersDetails>.GetRecordList(Common.Common.StoreProcedures.sp_FlightPassengersDetails_Get, inobjectpass, outobjectpass);
                    String str = "";
                    if (reslist != null)
                    {
                        for (int i = 0; i < reslist.Count; i++)
                        {
                            str += "<tr>";
                            str += "<td valign = 'top' >";
                            if (reslist[i].Gender == "M")
                            {
                                str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>Mr.</p>";
                            }
                            else
                            {
                                str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>Ms.</p>";
                            }
                            str += "</td>";
                            str += "<td valign='top'>";
                            str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>" + reslist[i].Firstname + " " + reslist[i].Lastname + " (" + reslist[i].Type + ")</p>";
                            str += "</td >";
                            str += "<td valign='top'>";
                            str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>" + reslist[i].Nationality + "</p>";
                            str += "</td>";
                            str += "<td valign='top'>";
                            str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>##PNRNo##</p>";
                            str += "</td>";
                            str += "<td valign='top'>";
                            str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;' >" + reslist[i].TicketNo + "</p>";
                            str += "</td></tr>";
                            //s.Append(str);
                        }
                    }
                    body = body.Replace("##tr##", str);
                    body = body.Replace("##PNRNo##", res.PnrNumber);
                    body = body.Replace("##FromPlace##", res.Departure);
                    body = body.Replace("##FromDate##", Convert.ToDateTime(res.Flightdatedt).ToString("dd-MMM-yyyy"));
                    body = body.Replace("##DepartureTime##", res.Departuretime);
                    //body = body.Replace("##TravelTime##", "");
                    body = body.Replace("##ToPlace##", res.Arrival);
                    body = body.Replace("##ToDate##", Convert.ToDateTime(res.Flightdatedt).ToString("dd-MMM-yyyy"));
                    body = body.Replace("##ArrivalTime##", res.Arrivaltime);
                    body = body.Replace("##Class##", res.Flightclasscode);
                    if (res.Refundable)
                    {
                        body = body.Replace("##Refundable##", "Refundable");
                    }
                    else
                    {
                        body = body.Replace("##Refundable##", "Non-Refundable");
                    }

                    body = body.Replace("##FreeBaggage##", res.Freebaggage);
                    body = body.Replace("##FlightNo##", res.Flightno);
                    TimeSpan span = (DateTime.Parse(Convert.ToDateTime(res.Flightdatedt).ToString("dd-MMM-yyyy") + " " + res.Arrivaltime) - DateTime.Parse(Convert.ToDateTime(res.Flightdatedt).ToString("dd-MMM-yyyy") + " " + res.Departuretime));
                    body = body.Replace("##TravelTime##", $"Time: {span.Hours}:{span.Minutes} Hour");
                    body = body.Replace("##AIRLINES-IMAGE##", res.Airlinelogo);
                    body = body.Replace("##AirlinesName##", res.Airlinename);
                    AddFlightBookingDetails res_Return = new AddFlightBookingDetails();
                    if (res.TripType == "R")
                    {
                        AddFlightBookingDetails outobject_Return = new AddFlightBookingDetails();
                        GetFlightBookingDetails inobject_Return = new GetFlightBookingDetails();
                        inobject_Return.MemberId = Convert.ToInt64(MemberId);
                        inobject_Return.CheckFlightBooked = 1;
                        //inobject_Return.LogIDs = LogID;
                        inobject_Return.CheckInbound = 1;
                        res_Return = RepCRUD<GetFlightBookingDetails, AddFlightBookingDetails>.GetRecord(Common.Common.StoreProcedures.sp_FlightBookingDetails_Get, inobject_Return, outobject_Return);
                        if (res_Return != null && res_Return.Id > 0)
                        {
                            str = "";
                            if (reslist != null)
                            {
                                for (int i = 0; i < reslist.Count; i++)
                                {
                                    str += "<tr>";
                                    str += "<td valign = 'top' >";
                                    if (reslist[i].Gender == "M")
                                    {
                                        str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>Mr.</p>";
                                    }
                                    else
                                    {
                                        str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>Ms.</p>";
                                    }
                                    str += "</td>";
                                    str += "<td valign='top'>";
                                    str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>" + reslist[i].Firstname + " " + reslist[i].Lastname + " (" + reslist[i].Type + ")</p>";
                                    str += "</td >";
                                    str += "<td valign='top'>";
                                    str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>" + reslist[i].Nationality + "</p>";
                                    str += "</td>";
                                    str += "<td valign='top'>";
                                    str += "<p style='color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;'>##PNRNo_Return##</p>";
                                    str += "</td>";
                                    str += "<td valign='top'>";
                                    str += "<p style = 'color: #333; font-size: 16px; margin:0px; font-weight: 400; padding:0px 0px 0px 0px;' >" + reslist[i].InboundTicketNo + "</p>";
                                    str += "</td></tr>";
                                    //s.Append(str);
                                }
                            }
                            body = body.Replace("##tr_return##", str);
                            body = body.Replace("##PNRNo_Return##", res_Return.PnrNumber);
                            body = body.Replace("##ReturnFromPlace##", res_Return.Departure);
                            body = body.Replace("##ReturnFromDate##", Convert.ToDateTime(res_Return.Flightdatedt).ToString("dd-MMM-yyyy"));
                            body = body.Replace("##ReturnDepartureTime##", res_Return.Departuretime);
                            //body = body.Replace("##ReturnTravelTime##", "");
                            body = body.Replace("##ReturnToPlace##", res_Return.Arrival);
                            body = body.Replace("##ReturnToDate##", Convert.ToDateTime(res_Return.Flightdatedt).ToString("dd-MMM-yyyy"));
                            body = body.Replace("##ReturnArrivalTime##", res_Return.Arrivaltime);
                            body = body.Replace("##ReturnClass##", res_Return.Flightclasscode);
                            if (res_Return.Refundable)
                            {
                                body = body.Replace("##ReturnRefundable##", "Refundable");
                            }
                            else
                            {
                                body = body.Replace("##ReturnRefundable##", "Non-Refundable");
                            }
                            body = body.Replace("##ReturnFreeBaggage##", res_Return.Freebaggage);
                            body = body.Replace("##ReturnFlightNo##", res_Return.Flightno);

                            TimeSpan span_Return = (DateTime.Parse(Convert.ToDateTime(res_Return.Flightdatedt).ToString("dd-MMM-yyyy") + " " + res_Return.Arrivaltime) - DateTime.Parse(Convert.ToDateTime(res_Return.Flightdatedt).ToString("dd-MMM-yyyy") + " " + res_Return.Departuretime));
                            body = body.Replace("##ReturnTravelTime##", $"Time: {span_Return.Hours}:{span_Return.Minutes} Hour");
                            body = body.Replace("##ReturnAIRLINES-IMAGE##", res_Return.Airlinelogo);
                            body = body.Replace("##ReturnAirlinesName##", res_Return.Airlinename);
                        }
                    }

                    //Get Total Passenger
                    int passengercount = res.Adult + res.Child;
                    body = body.Replace("##PassengerCount##", passengercount.ToString());
                    string AdultPassengerCount = res.Adult.ToString();
                    string AdultFare = (res.Adultfare * res.Adult).ToString();
                    string ChildPassengerCount = res.Child.ToString();
                    string ChildFare = (res.Childfare * res.Child).ToString();
                    body = body.Replace("##AdultPassengerCount##", AdultPassengerCount);
                    body = body.Replace("##ChildPassengerCount##", ChildPassengerCount);
                    body = body.Replace("##AdultFare##", AdultFare);
                    body = body.Replace("##ChildFare##", ChildFare);
                    body = body.Replace("##Fare##", res.Adultfare.ToString());
                    body = body.Replace("##FuelCharge##", (res.Fuelsurcharge * (res.Adult + res.Child)).ToString());
                    body = body.Replace("##Tax##", (res.Tax * passengercount).ToString());
                    body = body.Replace("##FareTotal##", res.Faretotal.ToString());

                    if (res.TripType == "R" && (res_Return.Adult > 0 || res_Return.Child > 0))
                    {

                        body = body.Replace("##PassengerCount_Return_Flight##", passengercount.ToString());
                        AdultPassengerCount = res_Return.Adult.ToString();
                        AdultFare = (res_Return.Adultfare * res_Return.Adult).ToString();
                        ChildPassengerCount = res_Return.Child.ToString();

                        int returnPaxCount = res_Return.Adult + res_Return.Child;
                        ChildFare = (res_Return.Childfare * res_Return.Child).ToString();
                        body = body.Replace("##AdultPassengerCount_Return_Flight##", AdultPassengerCount);
                        body = body.Replace("##ChildPassengerCount_Return_Flight##", ChildPassengerCount);
                        body = body.Replace("##AdultFare_Return_Flight##", AdultFare);
                        body = body.Replace("##ChildFare_Return_Flight##", ChildFare);
                        body = body.Replace("##Fare_Return_Flight##", res_Return.Adultfare.ToString());
                        body = body.Replace("##FuelCharge_Return_Flight##", (res_Return.Fuelsurcharge * (res_Return.Adult + res_Return.Child)).ToString());
                        body = body.Replace("##Tax_Return_Flight##", (res_Return.Tax * returnPaxCount).ToString());
                        body = body.Replace("##FareTotal_Return_Flight##", res_Return.Faretotal.ToString());

                    }
                    body = body.Replace("##FullName##", FullName);
                    body = body.Replace("##Email##", Email);
                    body = body.Replace("##Contact##", ContactNo);

                    //body = body.Replace("##TransactionType##", (uw.Sign == (int)MyPay.Models.Miscellaneous.WalletTransactions.Signs.Credit ? MyPay.Models.Miscellaneous.WalletTransactions.Signs.Credit.ToString() : MyPay.Models.Miscellaneous.WalletTransactions.Signs.Debit.ToString()));
                    body = body.Replace("##LogoImage##", Common.Common.LiveSiteUrl + "/Content/images/logonew.png");
                    body = body.Replace("##LiveUrl##", Common.Common.LiveSiteUrl_User);

                    body = body.Replace("##tel1##", Common.Common.tel1);
                    body = body.Replace("##tel2##", Common.Common.tel2);
                    body = body.Replace("##tel3##", Common.Common.tel3);
                    body = body.Replace("##tel4##", Common.Common.tel4);
                    body = body.Replace("##WebsiteName##", Common.Common.WebsiteName);
                    body = body.Replace("##WebsiteEmail##", Common.Common.WebsiteEmail);
                    body = body.Replace("##SupportEmail##", Common.Common.FromEmail);

                    //string filename = DateTime.Now.Ticks.ToString();

                    //Byte[] fileContent = PdfSharpConvert(body);
                    //System.IO.File.WriteAllBytes(Server.MapPath("/Content/TransactionPDF/" + filename + ".pdf"), fileContent);
                    System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName + ".html")).Dispose();
                    System.IO.File.WriteAllText(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName + ".html"), body);

                    System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName)).Dispose();

                    FileInfo htmlsource = new FileInfo(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName + ".html"));
                    FileInfo pdfDest = new FileInfo(HttpContext.Current.Server.MapPath("/Content/FlightTicketPDF/" + originalFileName));


                    // pdfHTML specific code
                    ConverterProperties converterProperties = new ConverterProperties();
                    HtmlConverter.ConvertToPdf(htmlsource, pdfDest, converterProperties);

                }
                #endregion
                //objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Airlines_Lookup>(json);
                //objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                objRes.status = true;
                objRes.Message = "success";
                objRes.FilePath = relativepath + "/" + originalFileName;
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        var Exceptiondata = (JObject)JsonConvert.DeserializeObject(json);
                        string Error = ((Exceptiondata["error"] == null) ? String.Empty : Convert.ToString(Exceptiondata["error"])); string message = ((Exceptiondata["message"] == null) ? String.Empty : Convert.ToString(Exceptiondata["message"]));
                        string Details = String.Empty;
                        Details = ((Exceptiondata["details"] == null) ? String.Empty : Convert.ToString(Exceptiondata["details"]));
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ("Request Failed " + Details + " " + Error + " " + message) : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public class MyPassengerCount
        {
            public long Id { get; set; }
            public string AdultPaxCount { get; set; }
            public string ChildPaxCount { get; set; }
            public string Fare { get; set; }
            public bool IsActive { get; set; }

        }
        // ***********************  EChalan  ***********************************


        public static GetVendor_API_EChalan_Lookup_DistrictCode RequestEChalan_LOOKUP_DISTRICT_CODES(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_EChalan_Lookup_DistrictCode objRes = new GetVendor_API_EChalan_Lookup_DistrictCode();
            try
            {

                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "unknown_error") || (Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_EChalan_Lookup_DistrictCode>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_EChalan_Lookup_DistrictCode>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static GetVendor_API_EChalan_Lookup RequestEChalan_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_EChalan_Lookup objRes = new GetVendor_API_EChalan_Lookup();
            try
            {

                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "unknown_error") || (Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_EChalan_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_EChalan_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }


        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COUNTERS_NEA()
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Counter_Nea_Request objReq = new Vendor_Input_Counter_Nea_Request();
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COUNTERS_KHANEPANI()
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Counter_Nea_Request objReq = new Vendor_Input_Counter_Nea_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COUNTERS_DEMAT()
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Kaspersky_Lookup_Request objReq = new Vendor_Input_Kaspersky_Lookup_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_DETAILS_NEA(string sc_no, string consumer_id, string reference, string office_code)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_ServiceGroup_Details_Nea_Request objReq = new Vendor_Input_ServiceGroup_Details_Nea_Request();
            objReq.sc_no = sc_no;
            objReq.consumer_id = consumer_id;
            objReq.reference = reference;
            objReq.office_code = office_code;
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_DATAPACK_COMMIT(string amount, string number, string reference, string product_code, string package_id)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_DataPack_Request objReq = new Vendor_Input_DataPack_Request();
            objReq.amount = amount;
            objReq.number = number;
            objReq.reference = reference;
            objReq.product_code = product_code;
            objReq.package_id = package_id;
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_DETAILS_KHANEPANI(string month_id, string consumer_code, string counter)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_ServiceGroup_Details_KhanePani_Request objReq = new Vendor_Input_ServiceGroup_Details_KhanePani_Request();
            objReq.month_id = month_id;
            objReq.customer_code = consumer_code;
            objReq.counter = counter;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_SERVICE_CHARGE_NEA(string Amount, string SessionId)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_ServiceGroup_ServiceCharge_Nea_Request objReq = new Vendor_Input_ServiceGroup_ServiceCharge_Nea_Request();
            objReq.amount = Amount;
            objReq.session_id = SessionId;
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_SERVICE_CHARGE_KHANEPANI(string Amount, string Counter)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_ServiceGroup_ServiceCharge_KhanePani_Request objReq = new Vendor_Input_ServiceGroup_ServiceCharge_KhanePani_Request();
            objReq.amount = Amount;
            objReq.counter = Counter;
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_NEA(string Amount, string SessionId, string ReferenceNo)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_ServiceGroup_Commit_Nea_Request objReq = new Vendor_Input_ServiceGroup_Commit_Nea_Request();
            objReq.amount = Amount;
            objReq.session_id = SessionId;
            objReq.reference = ReferenceNo;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_KHANEPANI(string Amount, string CustomerId, string ReferenceNo, string Counter)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_ServiceGroup_Commit_KhanePani_Request objReq = new Vendor_Input_ServiceGroup_Commit_KhanePani_Request();
            objReq.amount = Amount;
            objReq.customer_code = CustomerId;
            objReq.reference = ReferenceNo;
            objReq.counter = Counter;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static string GenerateApi_Input_JsonRequest_DISHOME_LOOKUP(string casid)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Dishome_FTTH_Lookup_Request objReq = new Vendor_Input_Dishome_FTTH_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.casid = casid;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_DISHOME_PAYMENT(string casid, string amount, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Dishome_Lookup_Request objReq = new Vendor_Input_Dishome_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.casid = casid;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_SIMTV_LOOKUP(string customer_id)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_SIMTV_Lookup_Request objReq = new Vendor_Input_SIMTV_Lookup_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.customer_id = customer_id;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SIMTV_PAYMENT(string customer_id, string amount, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_SIMTV_Payment_Request objReq = new Vendor_Input_SIMTV_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.customer_id = customer_id;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }


        public static string GenerateApi_Input_JsonRequest_MEROTV_LOOKUP(string customerID, string reference, string serviceSlug)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_MEROTV_Lookup_Request objReq = new Vendor_Input_MEROTV_Lookup_Request();
            objReq.customer_id = customerID;
            objReq.reference = reference;
            objReq.service_slug = serviceSlug;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_MEROTV_PACKAGES_LOOKUP(string sessionID, string serviceSlug, string stb)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_MEROTV_Packages_Lookup_Request objReq = new Vendor_Input_MEROTV_Packages_Lookup_Request();
            objReq.session_id = sessionID;
            objReq.stb = stb;
            // objReq.reference = reference;
            objReq.service_slug = serviceSlug;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_MEROTV_PAYMENT(string session_id, string amount, string reference, string package_id)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_MEROTV_Payment_Request objReq = new Vendor_Input_MEROTV_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.session_id = session_id;
            objReq.amount = amount;
            objReq.reference = reference;
            objReq.package_id = package_id;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }


        public static string GenerateApi_Input_JsonRequest_MAXTV_LOOKUP(string customer_id, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_MAXTV_Lookup_Request objReq = new Vendor_Input_MAXTV_Lookup_Request();
            objReq.customer_id = customer_id;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            };
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_MAXTV_PAYMENT(string customer_id, string amount, string sessionid, string reference)
        {
            // ********************************************
            // ************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_MAXTV_Payment_Request objReq = new Vendor_Input_MAXTV_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.customer_id = customer_id;
            objReq.session_id = sessionid;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_CLEARTV_LOOKUP(string customer_id)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_CLEARTV_Lookup_Request objReq = new Vendor_Input_CLEARTV_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.customer_id = customer_id;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_CLEARTV_PAYMENT(string customer_id, string number, string amount, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_CLEARTV_Payment_Request objReq = new Vendor_Input_CLEARTV_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.customer_id = customer_id;
            objReq.amount = amount;
            objReq.number = number;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_PRABHUTV_LOOKUP(string casid, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_PRABHUTV_Lookup_Request objReq = new Vendor_Input_PRABHUTV_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.cas_id = casid;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_PRABHUTV_PAYMENT(string CASID, string amount, string session_id, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_PRABHUTV_Payment_Request objReq = new Vendor_Input_PRABHUTV_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.cas_id = CASID;
            objReq.amount = amount;
            objReq.session_id = session_id;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_JAGRITITV_LOOKUP(string package_type)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_JAGRITITV_Lookup_Request objReq = new Vendor_Input_JAGRITITV_Lookup_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.package_type = package_type;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_JAGRITITV_PAYMENT(string CustomerId, string CustomerName, string Package, string STB_OR_CAS_ID, string Old_Ward_Number, string Mobile_Number_1, string amount, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_JAGRITITV_Payment_Request objReq = new Vendor_Input_JAGRITITV_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.customer_id = CustomerId;
            objReq.customer_name = CustomerName;
            objReq.package = Package;
            objReq.stb_or_cas_id = STB_OR_CAS_ID;
            objReq.old_ward_number = Old_Ward_Number;
            objReq.mobile_number_1 = Mobile_Number_1;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_PNGNETWORKTV_LOOKUP(string customer_id)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_PNGNETWORKTV_Lookup_Request objReq = new Vendor_Input_PNGNETWORKTV_Lookup_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.customer_id = customer_id;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_PNGNETWORKTV_PAYMENT(string package, string amount, string username, string customername, string contactnumber, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_PNGNETWORKTV_Payment_Request objReq = new Vendor_Input_PNGNETWORKTV_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.package = package;
            objReq.amount = amount;
            objReq.user_name = username;
            objReq.customer_name = customername;
            objReq.contact_number = contactnumber;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }


        public static string GenerateApi_Input_JsonRequest_INTERNET_ADSL(string Number, string amount, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_ADSL_Payment_Request objReq = new Vendor_Input_ADSL_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.number = Number;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_ViaNet_LOOKUP(string customer_id, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_ViaNet_Lookup_Request objReq = new Vendor_Input_ViaNet_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }

            RequestedToken = objReq.token;
            objReq.customer_id = customer_id;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_DishHome_LOOKUP(string customer_id, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            request_dishhome objReq = new request_dishhome();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }

            RequestedToken = objReq.token;
            objReq.customer_id = customer_id;
            objReq.reference = reference;
            objReq.service_slug = "dishhome-ftth";
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_CLASSITECH_LOOKUP(string username, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Classitech_Lookup_Request objReq = new Vendor_Input_Classitech_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.username = username;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }


        public static string GenerateApi_Input_JsonRequest_Datapack_LOOKUP(string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_DataPack_Lookup_Request objReq = new Vendor_Input_DataPack_Lookup_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_PlasmaTech_LOOKUP(string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Plasma_Lookup_Request objReq = new Vendor_Input_Plasma_Lookup_Request();
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_WebSurfer_UserList_LOOKUP(string customerId, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_WebSurfer_Lookup_UserList_Request objReq = new Vendor_Input_WebSurfer_Lookup_UserList_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.customer_id = customerId;
            objReq.reference = reference;
            objReq.service_slug = "websurfer-internet";
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SUBISU_LOOKUP(string reference, string username)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_SUBISU_Lookup_Request objReq = new Vendor_Input_SUBISU_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.reference = reference;
            objReq.username = username;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_WebSurfer_LOOKUP(string username, string SessionId, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_WebSurfer_Lookup_Request objReq = new Vendor_Input_WebSurfer_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.username = username;
            objReq.session_id = SessionId;
            objReq.reference = reference;
            objReq.service_slug = "websurfer-internet";
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_Techminds_LOOKUP(string request_id, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Techminds_Lookup_Request objReq = new Vendor_Input_Techminds_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.request_id = request_id;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_Arrownet_LOOKUP(string username, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Arrownet_Lookup_Request objReq = new Vendor_Input_Arrownet_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.username = username;
            //objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_ViaNet(string CustomerID, string SessionID, string PaymentID, string amount, string reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO VIANET -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_ViaNet_Payment_Request objReq = new Vendor_Input_ViaNet_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.customer_id = CustomerID;
            objReq.session_id = SessionID;
            objReq.payment_id = PaymentID;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_ClassiTech(string SessionID, string amount, string Month, string Package, string reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO ClassiTech -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_Classitech_Payment_Request objReq = new Vendor_Input_Classitech_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.amount = amount;
            objReq.session_id = SessionID;
            objReq.month = Month;
            objReq.package = Package;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_DISHHOME_FTTH(string SessionID, string amount, string reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO ClassiTech -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_Dishhome_FTTH_Payment_Request objReq = new Vendor_Input_Dishhome_FTTH_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.amount = amount;
            objReq.session_id = SessionID;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_NT_FTTH(string Number, string amount, string reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO NT -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_NT_FTTH_Payment_Request objReq = new Vendor_Input_NT_FTTH_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.amount = amount;
            objReq.number = Number;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_Techminds(string SessionID, string amount, string request_id, string reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO Techminds -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_Techminds_Payment_Request objReq = new Vendor_Input_Techminds_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.amount = amount;
            objReq.request_id = request_id;
            objReq.session_id = SessionID;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_WebSurfer(string SessionID, string amount, string package_id, string Service, string reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO Websurfer -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_WebSurfer_Payment_Request objReq = new Vendor_Input_WebSurfer_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.amount = amount;
            objReq.session_id = SessionID;
            objReq.package_id = package_id;
            objReq.service = Service;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_Arrownet(string UserName, string amount, string Duration, string reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO Arrownet -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_Arrownet_Payment_Request objReq = new Vendor_Input_Arrownet_Payment_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.amount = amount;
            objReq.username = UserName;
            objReq.duration = Duration;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_SUBISU(string SessionID, string OfferName, string amount, string PlanType, string stb)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            if (PlanType == "outstanding_payment")
            {
                Vendor_Input_SUBISU_Outstanding_Payment_Request objReq = new Vendor_Input_SUBISU_Outstanding_Payment_Request();
                objReq.token = Req_TokenLive;
                RequestedToken = objReq.token;
                objReq.session_id = SessionID;
                objReq.amount = amount;
                objReq.renew_type = PlanType;

                result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            }
            else if (PlanType == "internet")
            {
                Vendor_Input_SUBISU_Payment_Request objReq = new Vendor_Input_SUBISU_Payment_Request();
                objReq.token = Req_TokenLive;
                RequestedToken = objReq.token;
                objReq.session_id = SessionID;
                objReq.amount = amount;
                objReq.offer_name = OfferName;

                result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            }
            else
            {
                Vendor_Input_SUBISU_Payment_Request_tv_Internet objReq = new Vendor_Input_SUBISU_Payment_Request_tv_Internet();
                objReq.token = Req_TokenLive;
                RequestedToken = objReq.token;
                objReq.session_id = SessionID;
                objReq.amount = amount;
                objReq.offer_name = OfferName;
                objReq.stb = stb;

                result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            }

            return result;

        }

        public static string GenerateApi_Input_JsonRequest_INTERNET_SUBISU_OLD(string CustomerId, string Number, string amount, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_SUBISU_Payment_Request_Old objReq = new Vendor_Input_SUBISU_Payment_Request_Old();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.number = Number;
            objReq.amount = amount;
            objReq.customer_id = CustomerId;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_Pokhara(string CustomerId, string UserName, string Number, string amount, string Address, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Pokhara_Payment_Request objReq = new Vendor_Input_Pokhara_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.username = UserName;
            objReq.number = Number;
            objReq.amount = amount;
            objReq.address = Address;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_VirtualNetwork(string UserName, string Number, string amount, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_VirtualNetwork_Payment_Request objReq = new Vendor_Input_VirtualNetwork_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.mobile_number = Number;
            objReq.amount = amount;
            objReq.username = UserName;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_INTERNET_WebNetwork(string UserName, string Number, string amount, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_WebNetwork_Payment_Request objReq = new Vendor_Input_WebNetwork_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.mobile_number = Number;
            objReq.amount = amount;
            objReq.username = UserName;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_INTERNET_RoyalNetwork(string UserName, string Number, string amount, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_RoyalNetwork_Payment_Request objReq = new Vendor_Input_RoyalNetwork_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.mobile_number = Number;
            objReq.amount = amount;
            objReq.username = UserName;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_Kaspersky_LOOKUP(string customer_id, string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Kaspersky_Lookup_Request objReq = new Vendor_Input_Kaspersky_Lookup_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.customer_id = customer_id;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_KasperSky(string value, string amount, string reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO Kaspersky -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_Kaspersky_Payment_Request objReq = new Vendor_Input_Kaspersky_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.value = value;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_EChalan_DISTRICT_CODE_LOOKUP(string reference, string service)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_EChalan_Lookup_Request objReq = new Vendor_Input_EChalan_Lookup_Request();
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            objReq.reference = reference;
            objReq.service = service;
            //objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_EChalan_LOOKUP(string reference, string app_id, string voucher_no, string service, string fiscal_year, string province_code, string district_code)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_EChalan_Lookup_Request objReq = new Vendor_Input_EChalan_Lookup_Request();
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            objReq.reference = reference;
            objReq.app_id = app_id;
            objReq.voucher_no = voucher_no;
            objReq.service = service;
            objReq.fiscal_year = fiscal_year;
            objReq.province_code = province_code;
            objReq.district_code = district_code;
            //objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_EChalan(string session_id, string amount, string Reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO EChalan -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_EChalan_Payment_Request objReq = new Vendor_Input_EChalan_Payment_Request();
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            objReq.session_id = session_id;
            objReq.amount = amount;
            objReq.reference = Reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_Transaction_Lookup(string reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_TransactionLookup_Request objReq = new Vendor_Input_TransactionLookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenLive_localhost;
            }
            RequestedToken = objReq.token;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_DematNabil(string value, string amount, string reference)
        {
            // ***********************************************************************************************************//
            // ************************* Generate JSON String from Input Object ********************************************* //
            // ************** AMOUNT IS READONLY AND NOT TO BE PASSED TO Kaspersky -- IT IS AUTO FETCH FROM PAYMENT_ID ************ //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_Demat_Payment_Request objReq = new Vendor_Input_Demat_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.value = value;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_Ride_LOOKUP(string app, string phonenumber)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Ride_Lookup_Request objReq = new Vendor_Input_Ride_Lookup_Request();
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            objReq.app = app;
            objReq.number = phonenumber;
            //objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string GenerateApi_Input_JsonRequest_WorldLink_LOOKUP(string Reference, string Username)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_WorldLink_Lookup_Request objReq = new Vendor_Input_WorldLink_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.reference = Reference;
            objReq.username = Username;
            //objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_FLIGHT_LOOKUP()
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Airlines_Lookup_Request objReq = new Vendor_Input_Airlines_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_FLIGHT_AIRLINES_PAYMENT(string BookingID, string FlightID, string ReturnFlightID)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Airlines_Book_Request objReq = new Vendor_Input_Airlines_Book_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.booking_id = BookingID;
            objReq.flight_id = FlightID;
            objReq.return_flight_id = ReturnFlightID;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            if (string.IsNullOrEmpty(ReturnFlightID))
            {
                JObject jo = JObject.Parse(result);
                jo.Property("return_flight_id").Remove();
                result = jo.ToString();
            }
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_FLIGHT_AIRLINES_ISSUE_FLIGHT(string BookingID, string FlightID, string ReturnFlightID, string Reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Airlines_IssueFlight_Request objReq = new Vendor_Input_Airlines_IssueFlight_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.booking_id = BookingID;
            objReq.flight_id = FlightID;
            objReq.return_flight_id = ReturnFlightID;
            objReq.reference = Reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            if (string.IsNullOrEmpty(ReturnFlightID))
            {
                JObject jo = JObject.Parse(result);
                jo.Property("return_flight_id").Remove();
                result = jo.ToString();
            }
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_FLIGHT_AIRLINES_CANCEL_FLIGHT(string BookingID, string CancelTickets, string Reference)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Airlines_CancelFlight_Request objReq = new Vendor_Input_Airlines_CancelFlight_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.booking_id = BookingID;
            objReq.cancel_tickets = CancelTickets;
            objReq.reference = Reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_FLIGHT_AIRLINES_PASSENGER_ADD(string BookingID, string ContactName, string ContactPhone, List<FlightPassenger> PassengerList)
        {
            // ********************************************************//
            // *** Generate JSON String from Input Object ************ //
            // ********************************************************//
            string result = "";
            Vendor_Input_Airlines_Add_Passengers_Request objReq = new Vendor_Input_Airlines_Add_Passengers_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.booking_id = BookingID;
            objReq.contact_name = ContactName;
            objReq.contact_phone = ContactPhone;
            List<Passenger> passengers_list = new List<Passenger>();
            for (int i = 0; i < PassengerList.Count; i++)
            {
                Passenger objpassengers = new Passenger();
                objpassengers.firstname = PassengerList[i].FirstName;
                objpassengers.lastname = PassengerList[i].LastName;
                objpassengers.type = PassengerList[i].Type;
                objpassengers.title = PassengerList[i].Title;
                objpassengers.gender = PassengerList[i].Gender;
                objpassengers.nationality = PassengerList[i].Nationality;
                passengers_list.Add(objpassengers);
            }
            objReq.passengers = passengers_list;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static GetVendor_API_Demat_Lookup RequestDemat_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_Demat_Lookup objRes = new GetVendor_API_Demat_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiUrl_Root + KhaltiAPIURL}?token={Req_TokenLive}";
                string json = string.Empty;
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Prefix + KhaltiAPIURL, JsonReq);
                //var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Demat_Lookup>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Demat_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static GetVendor_API_Demat_Payment_Request RequestDemat_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Demat_Payment_Request objRes = new GetVendor_API_Demat_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Demat_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Demat_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Ride_Lookup RequestRide_LOOKUP(string JsonReq, ref String VendorURL, ref string VendorJSON, string KhaltiAPIURL)
        {
            GetVendor_API_Ride_Lookup objRes = new GetVendor_API_Ride_Lookup();
            try
            {

                VendorURL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    VendorURL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, VendorURL, JsonReq);
                VendorJSON = json;
                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Ride_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Ride_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_RIDE(string productidentity, string Amount, string number, string ReferenceNo)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Ride_Payment_Request objReq = new Vendor_Input_Ride_Payment_Request();
            objReq.amount = Amount;
            objReq.product_identity = productidentity;
            objReq.reference = ReferenceNo;
            objReq.number = number;
            objReq.token = Req_TokenTest;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_Ride_Commit RequestSERVICEGROUP_COMMIT_RIDE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_Ride_Commit objRes = new GetVendor_API_ServiceGroup_Ride_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {

                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Ride_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["counter"] != null)
                    {
                        Details = data["details"]["counter"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Ride_Commit>(json);
                    //objRes.detailsobject = Newtonsoft.Json.JsonConvert.DeserializeObject<detail>(Details);
                    Details = (String.IsNullOrEmpty(Details) ? objRes.detail.message : Details);
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Ride_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_WorldLink_Lookup RequestWorldLink_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_WorldLink_Lookup objRes = new GetVendor_API_WorldLink_Lookup();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WorldLink_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_WorldLink_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_WorldLink(string session_id, string Amount, string package_id, string ReferenceNo)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_WorldLink_Payment_Request objReq = new Vendor_Input_WorldLink_Payment_Request();
            objReq.amount = Amount;
            objReq.session_id = session_id;
            objReq.reference = ReferenceNo;
            objReq.package_id = package_id;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }
        public static GetVendor_API_ServiceGroup_WorldLink_Commit RequestSERVICEGROUP_COMMIT_WorldLink(ref AddVendor_API_Requests objAddVendor_API_Requests, string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL)
        {
            GetVendor_API_ServiceGroup_WorldLink_Commit objRes = new GetVendor_API_ServiceGroup_WorldLink_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {

                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_WorldLink_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["counter"] != null)
                    {
                        Details = data["details"]["counter"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_WorldLink_Commit>(json);
                    //objRes.detailsobject = Newtonsoft.Json.JsonConvert.DeserializeObject<detail>(Details);
                    Details = (String.IsNullOrEmpty(Details) ? objRes.message : Details);
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_WorldLink_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_NecoInsurance_LOOKUP(string InsuranceSlug)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_NecoInsurance_Lookup_Request objReq = new Vendor_Input_NecoInsurance_Lookup_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SagarmathaInsurance_LOOKUP(string DebitNote, string Reference)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_SagarmathaInsurance_Lookup_Request objReq = new Vendor_Input_SagarmathaInsurance_Lookup_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.debit_note_no = DebitNote;
            objReq.reference = Reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static GetVendor_API_NecoInsurance_Lookup RequestNecoInsurance_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_NecoInsurance_Lookup objRes = new GetVendor_API_NecoInsurance_Lookup();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_NecoInsurance_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_NecoInsurance_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_SagarmathaInsurance_Lookup RequestSagarmathaInsurance_LOOKUP(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_SagarmathaInsurance_Lookup objRes = new GetVendor_API_SagarmathaInsurance_Lookup();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SagarmathaInsurance_Lookup>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SagarmathaInsurance_Lookup>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_NecoInsurance(string policytype, string customername, string policycategory, string amount, string ReferenceNo, string policynumber, string mobilenumber, string servicename, string insuranceslug)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_NecoInsurance_Payment_Request objReq = new Vendor_Input_NecoInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.policy_category = policycategory;
            objReq.reference = ReferenceNo;
            objReq.mobile_number = mobilenumber;
            objReq.customer_name = customername;
            objReq.insurance_slug = insuranceslug;
            objReq.policy_number = policynumber;
            objReq.policy_type = policytype;
            objReq.service_name = servicename;
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_NecoInsurance_Commit RequestSERVICEGROUP_COMMIT_NECOINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_NecoInsurance_Commit objRes = new GetVendor_API_ServiceGroup_NecoInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {

                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_NecoInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["policy_number"] != null)
                    {
                        Details = data["details"]["policy_number"].ToString();
                    }
                    else if (data["details"]["policy_category"] != null)
                    {
                        Details = data["details"]["policy_category"].ToString();
                    }
                    else if (data["details"]["policy_type"] != null)
                    {
                        Details = data["details"]["policy_type"].ToString();
                    }
                    else if (data["details"]["mobile_number"] != null)
                    {
                        Details = data["details"]["mobile_number"].ToString();
                    }
                    else if (data["details"]["service_name"] != null)
                    {
                        Details = data["details"]["service_name"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_NecoInsurance_Commit>(json);
                    //objRes.detailsobject = Newtonsoft.Json.JsonConvert.DeserializeObject<detail>(Details);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_NecoInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_SagarmathaInsurance(string amount, string sessionid, string reference)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_SagarmathaInsurance_Payment_Request objReq = new Vendor_Input_SagarmathaInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = sessionid;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }
        public static GetVendor_API_ServiceGroup_SagarmathaInsurance_Commit RequestSERVICEGROUP_COMMIT_SAGARMATHAINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_SagarmathaInsurance_Commit objRes = new GetVendor_API_ServiceGroup_SagarmathaInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {

                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_SagarmathaInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_SagarmathaInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_SagarmathaInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_RelianceInsurance_Detail(string PolicyNo, string DOB)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_RelianceInsurance_Detail_Request objReq = new Vendor_Input_RelianceInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_RelianceInsurance_Detail RequestRelianceInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_RelianceInsurance_Detail objRes = new GetVendor_API_RelianceInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_RelianceInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_RelianceInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_RelianceInsurance(string amount, string PolicyNo, string TransactionId, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_RelianceInsurance_Payment_Request objReq = new Vendor_Input_RelianceInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.policy_no = PolicyNo;
            objReq.transaction_id = TransactionId;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_RelianceInsurance_Commit RequestSERVICEGROUP_COMMIT_RELIANCEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_RelianceInsurance_Commit objRes = new GetVendor_API_ServiceGroup_RelianceInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_RelianceInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["policy_no"] != null)
                    {
                        Details = data["details"]["policy_no"].ToString();
                    }
                    else if (data["details"]["transaction_id"] != null)
                    {
                        Details = data["details"]["transaction_id"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_RelianceInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_RelianceInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_JyotiLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_JyotiLifeInsurance_Detail_Request objReq = new Vendor_Input_JyotiLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_JyotiLifeInsurance_Detail RequestJyotiLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_JyotiLifeInsurance_Detail objRes = new GetVendor_API_JyotiLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_JyotiLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_JyotiLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_JyotiLifeInsurance(string amount, string SessionId, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_JyotiLifeInsurance_Payment_Request objReq = new Vendor_Input_JyotiLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_JyotiLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_JYOTILIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_JyotiLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_JyotiLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_JyotiLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_JyotiLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_JyotiLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        /// <summary>
        /// Prime Life Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_PrimeLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_PrimeLifeInsurance_Detail_Request objReq = new Vendor_Input_PrimeLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_PrimeLifeInsurance_Detail RequestPrimeLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_PrimeLifeInsurance_Detail objRes = new GetVendor_API_PrimeLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PrimeLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PrimeLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_PrimeLifeInsurance(string amount, string SessionId, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_PrimeLifeInsurance_Payment_Request objReq = new Vendor_Input_PrimeLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_PrimeLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_PRIMELIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_PrimeLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_PrimeLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_PrimeLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_PrimeLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_PrimeLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// End of prime life


        /// <summary>
        /// Prabhu Life Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_PrabhuLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_PrabhuLifeInsurance_Detail_Request objReq = new Vendor_Input_PrabhuLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_PrabhuLifeInsurance_Detail RequestPrabhuLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_PrabhuLifeInsurance_Detail objRes = new GetVendor_API_PrabhuLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PrabhuLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PrabhuLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_PrabhuLifeInsurance(string amount, string SessionId, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_PrabhuLifeInsurance_Payment_Request objReq = new Vendor_Input_PrabhuLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_PrabhuLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_PRABHULIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_PrabhuLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_PrabhuLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_PrabhuLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_PrabhuLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_PrabhuLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        ///End of prabhu life

        /// <summary>
        /// National Life Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_NationalLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_NationalLifeInsurance_Detail_Request objReq = new Vendor_Input_NationalLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_NationalLifeInsurance_Detail RequestNationalLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_NationalLifeInsurance_Detail objRes = new GetVendor_API_NationalLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_NationalLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_NationalLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_NationalLifeInsurance(string amount, string SessionId, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_NationalLifeInsurance_Payment_Request objReq = new Vendor_Input_NationalLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_NationalLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_NATIONALLIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_NationalLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_NationalLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_NationalLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_NationalLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_NationalLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        ///End of NATIONAL LIFE


        /// <summary>
        /// Himalayan General Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_HimalayanGeneralInsurance_Detail(string PolicyNo, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_HimalayanGeneralInsurance_Detail_Request objReq = new Vendor_Input_HimalayanGeneralInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.reference = Reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_HimalayanGeneralInsurance_Detail RequestHimalayanGeneralInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_HimalayanGeneralInsurance_Detail objRes = new GetVendor_API_HimalayanGeneralInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_HimalayanGeneralInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_HimalayanGeneralInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_HimalayanGeneralInsurance(string amount, string SessionId, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_HimalayanGeneralInsurance_Payment_Request objReq = new Vendor_Input_HimalayanGeneralInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_HimalayanGeneralInsurance_Commit RequestSERVICEGROUP_COMMIT_HIMALAYANGENERALINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_HimalayanGeneralInsurance_Commit objRes = new GetVendor_API_ServiceGroup_HimalayanGeneralInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_HimalayanGeneralInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_HimalayanGeneralInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_HimalayanGeneralInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// End of Himalayan General


        /// <summary>
        /// Mahalaxmi Life Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_MahalaxmiLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_MahalaxmiLifeInsurance_Detail_Request objReq = new Vendor_Input_MahalaxmiLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_MahalaxmiLifeInsurance_Detail RequestMahalaxmiLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_MahalaxmiLifeInsurance_Detail objRes = new GetVendor_API_MahalaxmiLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MahalaxmiLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_MahalaxmiLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_MahalaxmiLifeInsurance(string amount, string SessionId, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_MahalaxmiLifeInsurance_Payment_Request objReq = new Vendor_Input_MahalaxmiLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_MahalaxmiLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_MAHALAXMILIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_MahalaxmiLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_MahalaxmiLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_MahalaxmiLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_MahalaxmiLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_MahalaxmiLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// End of mahalaxmi life


        /// <summary>
        /// IME Life Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_IMELifeInsurance_Detail(string PolicyNo, /*string DOB,*/ string DOBYear, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_ArhanrLifeInsurance_Detail_Request objReq = new Vendor_Input_ArhanrLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            //objReq.dob = DOB;
            objReq.dob_year = DOBYear;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_ArhantLifeInsurance_Detail RequestIMELifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ArhantLifeInsurance_Detail objRes = new GetVendor_API_ArhantLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ArhantLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ArhantLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }


        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_IMELifeInsurance(string amount, string SessionId, /*string InsuranceSlug,*/ string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_AsianLifeInsurance_Payment_Request objReq = new Vendor_Input_AsianLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
           /* objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;*/
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_IMELIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// End of IME life


        /// <summary>
        /// ASIAN Life Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_AsianLifeInsurance_Detail(string PolicyNo, /*string DOB,*/ string DOBYear, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_ArhanrLifeInsurance_Detail_Request objReq = new Vendor_Input_ArhanrLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            //objReq.dob = DOB;
            objReq.dob_year = DOBYear;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_ArhantLifeInsurance_Detail RequestAsianLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ArhantLifeInsurance_Detail objRes = new GetVendor_API_ArhantLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ArhantLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ArhantLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }


        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_AsianLifeInsurance(string amount, string SessionId, /*string InsuranceSlug,*/ string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_AsianLifeInsurance_Payment_Request objReq = new Vendor_Input_AsianLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            /* objReq.insurance_slug = InsuranceSlug;
             objReq.reference = reference;*/
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_AsianLIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ArhantLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// End of Asian life


        /// <summary>
        /// Citizen Life Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_CitizenLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_CitizenLifeInsurance_Detail_Request objReq = new Vendor_Input_CitizenLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_CitizenLifeInsurance_Detail RequestCitizenLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_CitizenLifeInsurance_Detail objRes = new GetVendor_API_CitizenLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_CitizenLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_CitizenLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_CitizenLifeInsurance(string amount, string SessionId, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_CitizenLifeInsurance_Payment_Request objReq = new Vendor_Input_CitizenLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_CitizenLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_CITIZENLIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_CitizenLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_CitizenLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_CitizenLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_CitizenLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_CitizenLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// End of Citizen life


        /// <summary>
        /// Reliable Life Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_ReliableLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_ReliableLifeInsurance_Detail_Request objReq = new Vendor_Input_ReliableLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_ReliableLifeInsurance_Detail RequestReliableLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ReliableLifeInsurance_Detail objRes = new GetVendor_API_ReliableLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ReliableLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ReliableLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_ReliableLifeInsurance(string amount, string SessionId, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_ReliableLifeInsurance_Payment_Request objReq = new Vendor_Input_ReliableLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_ReliableLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_RELIABLELIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_ReliableLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_ReliableLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ReliableLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ReliableLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ReliableLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// End of Reliable life


        /// <summary>
        /// Union Life Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_UnionLifeInsurance_Detail(string PolicyNo, string DOB, string InsuranceSlug, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_UnionLifeInsurance_Detail_Request objReq = new Vendor_Input_UnionLifeInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            objReq.insurance_slug = InsuranceSlug;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_UnionLifeInsurance_Detail RequestUnionLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_UnionLifeInsurance_Detail objRes = new GetVendor_API_UnionLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_UnionLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_UnionLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_UnionLifeInsurance(string amount, string SessionId, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_UnionLifeInsurance_Payment_Request objReq = new Vendor_Input_UnionLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.insurance_slug = InsuranceSlug;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_UnionLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_UNIONLIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_UnionLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_UnionLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_UnionLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_UnionLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_UnionLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// End of Union life


        /// <summary>
        /// IME General Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_IMEGeneralInsurance_Detail()
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_IMEGeneralInsurance_Detail_Request objReq = new Vendor_Input_IMEGeneralInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_IMEGeneralInsurance_Detail RequestIMEGeneralInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_IMEGeneralInsurance_Detail objRes = new GetVendor_API_IMEGeneralInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_IMEGeneralInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_IMEGeneralInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_IMEGeneralInsurance(string PolicyType, string InsuranceType, string Branch, string FullName, string Address, string MobileNumber, string PolicyDescription, string DebitNoteNo, string BillNo, string Email, string amount, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_IMEGeneralInsurance_Payment_Request objReq = new Vendor_Input_IMEGeneralInsurance_Payment_Request();

            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_type = PolicyType;
            objReq.insurance_type = InsuranceType;
            objReq.branch = Branch;
            objReq.full_name = FullName;
            objReq.address = Address;
            objReq.mobile_number = MobileNumber;
            objReq.policy_description = PolicyDescription;
            objReq.debit_note_no = DebitNoteNo;
            objReq.bill_no = BillNo;
            objReq.email = Email;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_IMEGeneralInsurance_Commit RequestSERVICEGROUP_COMMIT_IMEGENERALINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_IMEGeneralInsurance_Commit objRes = new GetVendor_API_ServiceGroup_IMEGeneralInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_IMEGeneralInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_IMEGeneralInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_IMEGeneralInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// End of IME General Insurance


        /// <summary>
        /// Prudential Insurance
        /// </summary>
        /// <param name="KhaltiAPIURL"></param>
        /// <returns></returns>
        /// 
        public static string GenerateApi_Input_JsonRequest_PrudentialInsurance_Detail()
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_PrudentialInsurance_Detail_Request objReq = new Vendor_Input_PrudentialInsurance_Detail_Request();
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_PrudentialInsurance_Detail RequestPrudentialInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_PrudentialInsurance_Detail objRes = new GetVendor_API_PrudentialInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PrudentialInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_PrudentialInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_PrudentialInsurance(string Branch, string FullName, string MobileNumber, string DebitNoteNo, string Email, string amount, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_PrudentialInsurance_Payment_Request objReq = new Vendor_Input_PrudentialInsurance_Payment_Request();

            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.issue_branch = Branch;
            objReq.customer_name = FullName;
            objReq.mobile_number = MobileNumber;
            objReq.debit_note_or_bill_number = DebitNoteNo;
            objReq.email = Email;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_PrudentialInsurance_Commit RequestSERVICEGROUP_COMMIT_PRUDENTIALINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_PrudentialInsurance_Commit objRes = new GetVendor_API_ServiceGroup_PrudentialInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_PrudentialInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_PrudentialInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_PrudentialInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        /// Prudential Insurance

        public static GetVendor_API_School_Lookup RequestSchool_LOOKUP(string KhaltiAPIURL)
        {
            GetVendor_API_School_Lookup objRes = new GetVendor_API_School_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiSchoolUrl_Root + KhaltiAPIURL}";
                var json = PostMethodWithAuthenticationKeyHeader(LookupURL, SchoolAuthenticationKey);
                List<SchoolCategoryList> objResSchoolCategry = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SchoolCategoryList>>(json);
                objRes.list = objResSchoolCategry;
                objRes.Message = "success";//  : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_School_Lookup>(json);
                        // objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                //objRes.status = false;
                //objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_School_Lookup RequestSchool_LOOKUPBY_IDX(string IDX, string KhaltiAPIURL)
        {
            GetVendor_API_School_Lookup objRes = new GetVendor_API_School_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiSchoolUrl_Root + KhaltiAPIURL}?category={IDX}";
                var json = PostMethodWithAuthenticationKeyHeader(LookupURL, SchoolAuthenticationKey);
                List<SchoolCategoryList> objResSchoolCategry = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SchoolCategoryList>>(json);
                objRes.list = objResSchoolCategry;
                objRes.Message = "success";//  : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_School_Lookup>(json);
                        // objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                //objRes.status = false;
                //objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_School_Payment_Request RequestSchool_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_School_Payment_Request objRes = new GetVendor_API_School_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["casid"] != null)
                    {
                        Details = data["details"]["casid"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_School_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_School_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_NepalLifeInsurance_Detail(string PolicyNo, string DOB, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_NepalLifeInsurance_Detail_Request objReq = new Vendor_Input_NepalLifeInsurance_Detail_Request();
            //objReq.token = Token;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_NepalLifeInsurance_Detail RequestNepalLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_NepalLifeInsurance_Detail objRes = new GetVendor_API_NepalLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_NepalLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_NepalLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }
        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_NepalLifeInsurance(string amount, string SessionId, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_NepalLifeInsurance_Payment_Request objReq = new Vendor_Input_NepalLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_NepalLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_NEPALLIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_NepalLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_NepalLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_NepalLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_NepalLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_NepalLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SuryaLifeInsurance_Detail(string PolicyNo, string DOB, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_SuryaLifeInsurance_Detail_Request objReq = new Vendor_Input_SuryaLifeInsurance_Detail_Request();
            //objReq.token = Token;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_no = PolicyNo;
            objReq.dob = DOB;
            objReq.reference = Reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static GetVendor_API_SuryaLifeInsurance_Detail RequestSuryaLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_SuryaLifeInsurance_Detail objRes = new GetVendor_API_SuryaLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SuryaLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SuryaLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }
        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_SuryaLifeInsurance(string amount, string SessionId, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_SuryaLifeInsurance_Payment_Request objReq = new Vendor_Input_SuryaLifeInsurance_Payment_Request();
            objReq.amount = amount;
            objReq.session_id = SessionId;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_SuryaLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_SURYALIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_SuryaLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_SuryaLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_SuryaLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_SuryaLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_SuryaLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_SanimaLifeInsurance_Detail(string PolicyNo, string DOB, string Reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_SanimaLifeInsurance_Detail_Request objReq = new Vendor_Input_SanimaLifeInsurance_Detail_Request();
            //objReq.token = Token;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            objReq.policy_number = PolicyNo;
            objReq.date_of_birth = DOB;
            objReq.reference = Reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_SanimaLifeInsurance_Detail RequestSanimaLifeInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_SanimaLifeInsurance_Detail objRes = new GetVendor_API_SanimaLifeInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error") || (Error.ToLower() == "client_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SanimaLifeInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_SanimaLifeInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }
        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_SanimaLifeInsurance(string SessionId, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_SanimaLifeInsurance_Payment_Request objReq = new Vendor_Input_SanimaLifeInsurance_Payment_Request();
            objReq.session_id = SessionId;
            objReq.reference = reference;
            if (Common.Common.ApplicationEnvironment.IsProduction)
            {
                objReq.token = Req_TokenLive;
            }
            else
            {
                objReq.token = Req_TokenTest;
            }
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_SanimaLifeInsurance_Commit RequestSERVICEGROUP_COMMIT_SANIMALIFEINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_SanimaLifeInsurance_Commit objRes = new GetVendor_API_ServiceGroup_SanimaLifeInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_SanimaLifeInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_SanimaLifeInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_SanimaLifeInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_ShikharInsurance_GetPackages()
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_ShikharInsurance_GetPackages_Request objReq = new Vendor_Input_ShikharInsurance_GetPackages_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_ShikharInsurance_GetPackages RequestShikharInsurance_GetPackages(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ShikharInsurance_GetPackages objRes = new GetVendor_API_ShikharInsurance_GetPackages();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ShikharInsurance_GetPackages>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ShikharInsurance_GetPackages>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }
        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_ShikharInsurance(string reference, string CustomerName, string Address, string ContactNumber, string Email, string PolicyType, string PolicyNumber, string Branch, string PolicyDescription, string PolicyName, string Amount)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_ShikharInsurance_Payment_Request objReq = new Vendor_Input_ShikharInsurance_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.customer_name = CustomerName;
            objReq.address = Address;
            objReq.contact_number = ContactNumber;
            objReq.email = Email;
            objReq.policy_type = PolicyType;
            objReq.policy_number = PolicyNumber;
            objReq.branch = Branch;
            objReq.policy_description = PolicyDescription;
            objReq.reference = reference;
            objReq.policy_name = PolicyName;
            objReq.amount = Amount;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_ShikharInsurance_Commit RequestSERVICEGROUP_COMMIT_SHIKHARINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_ShikharInsurance_Commit objRes = new GetVendor_API_ServiceGroup_ShikharInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Root + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ShikharInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ShikharInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ShikharInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_ArhantInsurance_Detail(string InsuranceSlug, string RequestId)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_ArhantInsurance_Detail_Request objReq = new Vendor_Input_ArhantInsurance_Detail_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.insurance_slug = InsuranceSlug;
            objReq.request_id = RequestId;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_ArhantInsurance_Detail RequestArhantInsurance_DETAIL(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ArhantInsurance_Detail objRes = new GetVendor_API_ArhantInsurance_Detail();
            try
            {


                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                //string json = PostMethod(ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutput = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {
                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ArhantInsurance_Detail>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.Message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.Message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ArhantInsurance_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }
        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_COMMIT_ArhantInsurance(string RequestId, string Amount, string InsuranceSlug, string reference)
        {
            // ********************************************************//
            //  Generate JSON String from Input Object ********* //
            // ********************************************************//
            string result = "";
            Vendor_Input_ArhantInsurance_Payment_Request objReq = new Vendor_Input_ArhantInsurance_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.insurance_slug = InsuranceSlug;
            objReq.request_id = RequestId;
            objReq.reference = reference;
            objReq.amount = Amount;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static GetVendor_API_ServiceGroup_ArhantInsurance_Commit RequestSERVICEGROUP_COMMIT_ARHANTINSURANCE(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_ServiceGroup_ArhantInsurance_Commit objRes = new GetVendor_API_ServiceGroup_ArhantInsurance_Commit();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, ServiceGroup_COUNTERS_URL_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if (Error.ToLower() == "validation_error")
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ArhantInsurance_Commit>(json);
                    if (data["details"]["amount"] != null)
                    {
                        Details = data["details"]["amount"].ToString();
                    }
                    else if (data["details"]["session_id"] != null)
                    {
                        Details = data["details"]["session_id"].ToString();
                    }
                    else if (data["details"]["insruance_slug"] != null)
                    {
                        Details = data["details"]["insruance_slug"].ToString();
                    }
                    else if (data["details"]["reference"] != null)
                    {
                        Details = data["details"]["reference"].ToString();
                    }
                }
                else
                {
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["detail"])) ? String.Empty : Convert.ToString(data["detail"]));
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ArhantInsurance_Commit>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"]));
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_ArhantInsurance_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_ServiceGroup_Movie RequestMOVIE(string JsonReq, string KhaltiAPIURL)
        {
            GetVendor_API_ServiceGroup_Movie objRes = new GetVendor_API_ServiceGroup_Movie();
            try
            {
                string URL = KhaltiApiUrl_Root + KhaltiAPIURL;
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = KhaltiApiUrl_Root_localhost + KhaltiAPIURL;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                var data = (JObject)JsonConvert.DeserializeObject(json);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Movie>(json);
                // objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_ServiceGroup_Movie>(json);
                        //objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                // objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_MOVIE()
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";

            Vendor_Input_Movie_Request objReq = new Vendor_Input_Movie_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static List<GetService_Providers> GetServiceProvidersWithUtility()
        {
            List<GetService_Providers> objRes = new List<GetService_Providers>();
            // ****************   GET PROVIDER URLs ********************** //
            AddProviderLogoList outAddProviderLogoList = new AddProviderLogoList();
            GetProviderLogoList inAddProviderLogoList = new GetProviderLogoList();
            inAddProviderLogoList.IsActive = 1;
            List<AddProviderLogoList> objProviderURLList = RepCRUD<GetProviderLogoList, AddProviderLogoList>.GetRecordList(Common.Common.StoreProcedures.sp_ProviderLogoList_Get, inAddProviderLogoList, outAddProviderLogoList);

            AddCommission outobject = new AddCommission();
            GetCommission inobject = new GetCommission();
            inobject.CheckActive = 1;
            inobject.CheckDelete = 0;
            inobject.KycType = 0;
            inobject.GenderType = 0;
            inobject.Running = "Running";
            List<AddCommission> resCommission = RepCRUD<GetCommission, AddCommission>.GetRecordList(Common.Common.StoreProcedures.sp_Commission_Get, inobject, outobject);

            foreach (int r in Enum.GetValues(typeof(VendorApi_CommonHelper.KhaltiAPIName)))
            {

                if (r == 142)
                { 
                }

                GetService_Providers objResChild = new GetService_Providers();
                string WebPrefix = Common.Common.LiveSiteUrl;
                List<AddProviderLogoList> objProviderURLList_GetURL = objProviderURLList.Where(c => c.ProviderTypeId == r.ToString()).ToList();
                List<AddCommission> objAddCommission = resCommission.Where(c => c.ServiceId == r).ToList();
                if (objProviderURLList_GetURL.Count > 0)
                {
                    int TransactionTransferType = 0;
                    objResChild.LogoURL = WebPrefix + objProviderURLList_GetURL[0].ProviderLogoURL;
                    objResChild.IsServiceDown = objProviderURLList_GetURL[0].IsServiceDown;
                    objResChild.SortOrder = objProviderURLList_GetURL[0].SortOrder;
                    objResChild.CategoryID = objProviderURLList_GetURL[0].ProviderServiceCategoryId;
                    objResChild.ParentID = objProviderURLList_GetURL[0].ParentID;
                    objResChild.isActive = objProviderURLList_GetURL[0].IsActive;
                    //objResChild.
                    if ((objProviderURLList_GetURL[0].ProviderTypeId == ((int)VendorApi_CommonHelper.KhaltiAPIName.Mobile_Banking).ToString()) ||
                        (objProviderURLList_GetURL[0].ProviderTypeId == ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_connectips).ToString()) ||
                        (objProviderURLList_GetURL[0].ProviderTypeId == ((int)VendorApi_CommonHelper.KhaltiAPIName.Internet_Banking).ToString()))
                    {
                        TransactionTransferType = (int)AddTransactionLimit.TransactionTransferTypeEnum.Load_Wallet_From_Bank;
                    }
                    else if (objProviderURLList_GetURL[0].ProviderTypeId == ((int)VendorApi_CommonHelper.KhaltiAPIName.bank_transfer).ToString())
                    {
                        TransactionTransferType = (int)AddTransactionLimit.TransactionTransferTypeEnum.Bank_Transfer_From_Wallet;
                    }
                    else if (objProviderURLList_GetURL[0].ProviderTypeId == ((int)VendorApi_CommonHelper.KhaltiAPIName.deposit_by_debit_credit).ToString())
                    {
                        TransactionTransferType = (int)AddTransactionLimit.TransactionTransferTypeEnum.Load_via_Card;
                    }
                    else if (objProviderURLList_GetURL[0].ProviderTypeId == ((int)VendorApi_CommonHelper.KhaltiAPIName.Deposit_By_Linked_Bank).ToString())
                    {
                        TransactionTransferType = (int)AddTransactionLimit.TransactionTransferTypeEnum.Pay_And_Deposit_From_Linked_Bank;
                    }
                    else if (objProviderURLList_GetURL[0].ProviderTypeId == ((int)VendorApi_CommonHelper.KhaltiAPIName.Transer_by_phone).ToString())
                    {
                        TransactionTransferType = (int)AddTransactionLimit.TransactionTransferTypeEnum.Wallet_To_Wallet_Transfer;
                    }
                    if (TransactionTransferType > 0)
                    {
                        AddTransactionLimit outobjectTransactionLimit = new AddTransactionLimit();
                        GetTransactionLimit inobjectTransactionLimit = new GetTransactionLimit();
                        inobjectTransactionLimit.TransactionTransferType = TransactionTransferType;
                        inobjectTransactionLimit.IsKycVerified = 1;
                        AddTransactionLimit objTransactionLimitGet = RepCRUD<GetTransactionLimit, AddTransactionLimit>.GetRecord(Common.Common.StoreProcedures.sp_TransactionLimit_Get, inobjectTransactionLimit, outobjectTransactionLimit);
                        if (objTransactionLimitGet != null)
                        {
                            objResChild.MinimumAmount = objProviderURLList_GetURL[0].MinimumAmount;
                            objResChild.MaximumAmount = objTransactionLimitGet.TransferLimitPerTransaction;
                        }
                    }
                    else
                    {
                        objResChild.MinimumAmount = objProviderURLList_GetURL[0].MinimumAmount;
                        objResChild.MaximumAmount = objProviderURLList_GetURL[0].MaximumAmount;
                    }
                    if (objAddCommission.Count > 0)
                    {
                        decimal PercentageCommission = objAddCommission.Max(t => t.PercentageCommission);
                        decimal PercentageRewardPoints = objAddCommission.Max(t => t.PercentageRewardPoints);
                        objResChild.CashbackPercentage = PercentageCommission.ToString("0.00");
                        objResChild.MPCoinsCashback = PercentageRewardPoints.ToString("0.00");
                    }
                    else
                    {
                        objResChild.CashbackPercentage = "0.00";
                        objResChild.MPCoinsCashback = "0.00";
                    }
                }
                else
                {
                    objResChild.CashbackPercentage = "0.00";
                    objResChild.MPCoinsCashback = "0.00";
                }
                string ProviderEnumName = Enum.GetName(typeof(VendorApi_CommonHelper.KhaltiAPIName), r).ToString();

                if (ProviderEnumName.ToLower().IndexOf("khalti") >= 0 || ProviderEnumName.ToLower().IndexOf("credit_card") >= 0)
                {
                    objResChild.IsUtility = true;
                }
                objResChild.ProviderName = ProviderEnumName.ToUpper().Replace("_PNG_", "_P&G_").Replace("KHALTI_", "").Replace("_", " ");
                objResChild.ProviderTypeId = r.ToString();
                decimal[] validation_array = new decimal[0];



                switch (objResChild.ProviderName.ToLower())
                {
                    case "topup":
                        objResChild.Title = "TOPUP";
                        break;
                    case "ntc":
                        objResChild.ValidAmount = "10 - 25000";
                        objResChild.Title = "Mobile Topup";
                        break;
                    case "ncell":
                        objResChild.ValidAmount = "50 - 5000";
                        objResChild.Title = "Mobile Topup";
                        break;
                    case "smartcell":
                        validation_array = VendorApi_CommonHelper.smartcellvalidation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "Mobile Topup";
                        break;
                    case "dishhome erc":
                        validation_array = VendorApi_CommonHelper.dishhome_erc_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "Recharge Card";
                        break;
                    case "ntc erc":
                        validation_array = VendorApi_CommonHelper.ntc_erc_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "Recharge Card";
                        break;
                    case "utl erc":
                        validation_array = VendorApi_CommonHelper.utl_erc_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "Recharge Card";
                        break;
                    case "smart erc":
                        validation_array = VendorApi_CommonHelper.smart_erc_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "Recharge Card";
                        break;
                    case "broadlink erc":
                        validation_array = VendorApi_CommonHelper.broadlink_erc_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "Recharge Card";
                        break;
                    case "nettv erc":
                        validation_array = VendorApi_CommonHelper.nettv_erc_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "Recharge Card";
                        break;
                    case "pstn landline":
                        validation_array = VendorApi_CommonHelper.pstn_landline_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "Landline";
                        break;
                    case "khanepani":
                        objResChild.Title = "Khanepani";
                        break;
                    case "nea":
                        objResChild.Title = "Electricity";
                        break;
                    case "tv dishhome":
                        validation_array = VendorApi_CommonHelper.tv_dishhome_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "TV";
                        break;
                    case "tv simtv":
                        validation_array = VendorApi_CommonHelper.tv_simtv_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "TV";
                        break;
                    case "tv skytv":
                        validation_array = VendorApi_CommonHelper.tv_simtv_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "TV";
                        break;
                    case "tv mero":
                        objResChild.Title = "TV";
                        break;
                    case "tv cleartv":
                        objResChild.Title = "TV";
                        break;
                    case "tv maxtv":
                        objResChild.Title = "TV";
                        break;
                    case "tv prabhutv":
                        validation_array = VendorApi_CommonHelper.tv_prabhutv_validation;
                        objResChild.ValidAmount = string.Join(",", validation_array);
                        objResChild.Title = "TV";
                        break;
                    case "tv p&g network tv":
                        objResChild.Title = "TV";
                        break;
                    case "tv jagrititv":
                        objResChild.Title = "TV";
                        break;
                    case "internet adsl":
                        objResChild.ValidAmount = "10-10000";
                        objResChild.Title = "Internet";
                        break;
                    case "internet subisu":
                        objResChild.Title = "Internet";
                        break;
                    case "internet subisu new":
                        objResChild.Title = "Internet";
                        break;
                    case "internet worldlink":
                        objResChild.Title = "Internet";
                        break;
                    case "internet classictech":
                        objResChild.Title = "Internet";
                        break;
                    case "internet vianet":
                        objResChild.Title = "Internet";
                        break;
                    case "antivirus kaspersky":
                        objResChild.Title = "Antivirus";
                        break;
                    case "antivirus eset":
                        objResChild.Title = "Antivirus";
                        break;
                    case "antivirus wardwiz":
                        objResChild.Title = "Antivirus";
                        break;
                    case "antivirus k7":
                        objResChild.Title = "Antivirus";
                        break;
                    case "antivirus mcafee":
                        objResChild.Title = "Antivirus";
                        break;
                    case "internet arrownet":
                        objResChild.Title = "Internet";
                        break;
                    case "internet virtualnetwork":
                        objResChild.Title = "Internet";
                        break;
                    case "internet webnetwork":
                        objResChild.Title = "Internet";
                        break;
                    case "internet royalnetwork":
                        objResChild.Title = "Internet";
                        break;
                    case "internet websurfer":
                        objResChild.Title = "Internet";
                        break;
                    case "internet techminds":
                        objResChild.Title = "Internet";
                        break;
                    case "internet pokhara":
                        objResChild.Title = "Internet";
                        break;
                    case "internet p&g network":
                        objResChild.Title = "Internet";
                        break;
                    case "internet jagriti":
                        objResChild.Title = "Internet";
                        break;
                    case "datapack ncell":
                        objResChild.Title = "Datapack";
                        break;
                    case "datapack ntc":
                        objResChild.Title = "Datapack";
                        break;
                    case "voicepack ncell":
                        objResChild.Title = "Voicepack";
                        break;
                    case "voicepack ntc":
                        objResChild.Title = "Voicepack";
                        break;
                    case "smspack ncell":
                        objResChild.Title = "SMSpack";
                        break;
                    case "smspack ntc":
                        objResChild.Title = "SMSpack";
                        break;
                    case "voting":
                        objResChild.Title = "Voting";
                        break;
                    case "insurance neco":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance salico":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance sanima reliance":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance surya jyoti life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance nepal life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance surya life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance shikhar":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance arhant":
                        objResChild.Title = "Insurance";
                        break;
                    //new added insurance
                    case "insurance himalayan life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance national life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance prabhu mahalaxmi life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance himalayan everest":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance mahalaxmi life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance ime life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance citizen life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance reliable life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance union life":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance prudential insurance":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance igi prudential":
                        objResChild.Title = "Insurance";
                        break;

                    //segration Arhant insurance and added new insurance 
                    case "insurance ngl":
                        objResChild.Title = "Insurance";
                        break;
                    case "insurance siddhartha":
                        objResChild.Title = "Insurance";
                        break;

                    case "insurance premier":
                        objResChild.Title = "Insurance";
                        break;
                    /* case "insurance Asian life":
                         objResChild.Title = "Insurance";
                         break;*/

                    case "traffic police fine":
                        objResChild.Title = "Government Services";
                        break;
                    case "Bus Sewa":
                        objResChild.Title = "Bus Sewa";

                        break;
                    default:
                        objResChild.Title = objResChild.ProviderName.ToUpper();
                        break;
                }

                if (objResChild.CategoryID == "8")
                {
                    objResChild.Title = "Government Services";
                }

                if (objResChild.CategoryID == "25")
                {
                    objResChild.Title = "Semi-Government Services";
                }

                objResChild.ProviderName = objResChild.ProviderName.ToUpper();
                objRes.Add(objResChild);
            }
            objRes = objRes.OrderBy(c => c.ProviderName).ToList();
            return objRes;
        }


        //public static string SaveAPIResponse(Int64 Id, string response)
        //{
        //    string msg = string.Empty;
        //    if (Id == 0)
        //    {
        //        msg = "Record Id not found";
        //    }
        //    else
        //    {
        //        resVendor_API_Requests.Id = Id;
        //        resVendor_API_Requests.Res_Output = response;
        //        RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(resVendor_API_Requests, "vendor_api_requests");
        //        msg = "success";
        //    }
        //    return msg;
        //}

        #region EVENTS
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_Events(int pageSize, int pageNumber, string searchVal, string sortOrder, string dateFrom, string dateTo, string sortBy)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Events_Request objReq = new Vendor_Input_Events_Request();
            objReq.pageSize = pageSize;
            objReq.pageNumber = pageNumber;
            objReq.searchVal = searchVal;
            objReq.sortOrder = sortOrder;
            objReq.dateFrom = dateFrom;
            objReq.dateTo = dateTo;
            objReq.sortBy = sortBy;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_Events_Details(int eventId, string eventDate, string merchantCode)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Events_Request_Details objReq = new Vendor_Input_Events_Request_Details();
            objReq.eventId = eventId;
            objReq.eventDate = eventDate;
            objReq.merchantCode = merchantCode;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        //public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_Events_Ticket(string merchantCode, string customerName, string customerMobile, string customerEmail, int eventId, int ticketCategoryId,
        //    string eventDate, decimal ticketRate, int noOfTicket, decimal totalPrice, int paymentMethodId)
        //{
        //    // ********************************************************//
        //    // ** Generate JSON String from Input Object *********** //
        //    // ********************************************************//
        //    string result = "";
        //    Vendor_Input_Events_Request_Ticket objReq = new Vendor_Input_Events_Request_Ticket();
        //    objReq.merchantCode = merchantCode;
        //    objReq.customerName = customerName;
        //    objReq.customerMobile = customerMobile;
        //    objReq.customerEmail = customerEmail;
        //    objReq.eventId = eventId;
        //    objReq.ticketCategoryId = ticketCategoryId;
        //    objReq.eventDate = eventDate;
        //    objReq.ticketRate = ticketRate;
        //    objReq.noOfTicket = noOfTicket;
        //    objReq.totalPrice = totalPrice;
        //    objReq.paymentMethodId = paymentMethodId;
        //    objReq.apiClientCode = EVENTS_API_CLIENT_CODE;
        //    if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
        //    {
        //        objReq.apiClientCode = EVENTS_API_CLIENT_CODE_LOCAL;
        //    }

        //    result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
        //    return result;

        //}

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_Events_Ticket(string merchantCode, string customerName, string customerMobile, string customerEmail, int eventId, int ticketCategoryId,
        string eventDate, decimal ticketRate, int noOfTicket, decimal totalPrice, int paymentMethodId, string CouponCode = "")
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Events_Request_Ticket objReq = new Vendor_Input_Events_Request_Ticket();
            objReq.merchantCode = merchantCode;
            objReq.customerName = customerName;
            objReq.customerMobile = customerMobile;
            objReq.customerEmail = customerEmail;
            objReq.eventId = eventId;
            objReq.ticketCategoryId = ticketCategoryId;
            objReq.eventDate = eventDate;
            objReq.ticketRate = ticketRate;
            objReq.noOfTicket = noOfTicket;
            objReq.totalPrice = totalPrice;
            objReq.paymentMethodId = paymentMethodId;
            objReq.couponCode = CouponCode;
            objReq.apiClientCode = EVENTS_API_CLIENT_CODE;
            if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
            {
                objReq.apiClientCode = EVENTS_API_CLIENT_CODE_LOCAL;
            }

            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;
        }

        public static string Generate_JSONReq_Coupon_Validation(int eventID, string couponCode, decimal amount, string customerEmail, CouponTypes couponType, string merchantCode)
        {

            string result = "";

            ValidateCouponRequest requestObject = new ValidateCouponRequest();
            requestObject.Amount = amount;
            requestObject.CouponCode = couponCode;
            requestObject.MerchantCode = merchantCode;

            if (couponType == CouponTypes.VotingPromoCode)
            {
                requestObject.InstanceId = eventID.ToString();
                requestObject.CustomerId = customerEmail;
            }
            else
            {
                requestObject.EventID = eventID;
                requestObject.CustomerEmail = customerEmail;

            }

            /*
             *   "customerId": "rahul.rajbanshi@email.com",
"instanceId": "22",
"amount": 1000.00,
"couponCode": "pmE6QjTg"
             */

            result = Newtonsoft.Json.JsonConvert.SerializeObject(requestObject);

            return result;
        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_Events_Commit(string merchantCode, string orderId, string txnId, int paymentMethodId)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Events_Request_Commit objReq = new Vendor_Input_Events_Request_Commit();
            objReq.orderId = orderId;
            objReq.txnId = txnId;
            objReq.merchantCode = merchantCode;
            objReq.paymentMethodId = paymentMethodId;
            objReq.apiClientCode = EVENTS_API_CLIENT_CODE;
            if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
            {
                objReq.apiClientCode = EVENTS_API_CLIENT_CODE_LOCAL;
            }
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_Events_Ticket_Download(string merchantCode, string orderId)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Events_Request_Ticket_Download objReq = new Vendor_Input_Events_Request_Ticket_Download();
            objReq.orderId = orderId;
            objReq.merchantCode = merchantCode;

            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static ValidateCouponResponse Request_Event_Coupon_Validation(string JsonReq, ref string VendorURL, ref string JsonResponse, CouponTypes couponType)
        {
            ValidateCouponResponse objRes = new ValidateCouponResponse();
            try
            {
                log4net.Config.XmlConfigurator.ConfigureAndWatch(new System.IO.FileInfo(AppDomain.CurrentDomain.BaseDirectory + "log4net.config"));
                ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

                log.Info("Inside Request_Event_Coupon_Validation");
                log.Info("JSONREQ: " + JsonReq);
                log.Info("Vendor URL: " + VendorURL);
                log.Info("Voting base URL: " + VotingAPISetting.voting_BaseURL);

                string newVendorURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    newVendorURL = EVENTS_API_URL_LINK_LOCAL + VendorURL;
                }
                else
                {
                    newVendorURL = EVENTS_API_URL_LINK + VendorURL;
                }

                if (couponType == CouponTypes.VotingPromoCode)
                {
                    newVendorURL = VotingAPISetting.voting_BaseURL + VendorURL;
                    JsonResponse = MyPay_VotingWebPostMethod(newVendorURL, JsonReq);
                }
                else
                {
                    JsonResponse = MyPay_EventsWebPostMethod(newVendorURL, JsonReq);
                }
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<ValidateCouponResponse>(JsonResponse);
                objRes.Message = (objRes.Success ? "success" : ((String.IsNullOrEmpty(objRes.Message) ? objRes.Message : objRes.Message)));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<ValidateCouponResponse>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                //objRes.Status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Events RequestSERVICEGROUP_SERVICE_Events(string JsonReq, string URL, ref string JsonResponse)
        {
            GetVendor_API_Events objRes = new GetVendor_API_Events();
            try
            {

                JsonResponse = MyPay_EventsWebPostMethod(URL, JsonReq);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events>(JsonResponse);
                objRes.message = (objRes.success ? "success" : ((String.IsNullOrEmpty(objRes.message) ? objRes.message : objRes.message)));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Events_Details RequestSERVICEGROUP_SERVICE_Events_Details(string EventsAPIURL, string JsonReq, ref string VendorURL, ref string JsonResponse)
        {
            GetVendor_API_Events_Details objRes = new GetVendor_API_Events_Details();
            try
            {
                VendorURL = EVENTS_API_URL_LINK + EventsAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    VendorURL = EVENTS_API_URL_LINK_LOCAL + EventsAPIURL;
                }

                JsonResponse = MyPay_EventsWebPostMethod(VendorURL, JsonReq);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Details>(JsonResponse);
                objRes.message = (objRes.success ? "success" : ((String.IsNullOrEmpty(objRes.message) ? objRes.message : objRes.message)));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Details>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Events_Ticket RequestSERVICEGROUP_SERVICE_Events_Ticket(string EventsAPIURL, string JsonReq, ref string VendorURL, ref string VendorOutput)
        {
            GetVendor_API_Events_Ticket objRes = new GetVendor_API_Events_Ticket();
            try
            {
                VendorURL = EVENTS_API_URL_LINK + EventsAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    VendorURL = EVENTS_API_URL_LINK_LOCAL + EventsAPIURL;
                }

                VendorOutput = MyPay_EventsWebPostMethod(VendorURL, JsonReq);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Ticket>(VendorOutput);
                objRes.message = (objRes.success ? "success" : ((String.IsNullOrEmpty(objRes.message) ? objRes.message : objRes.message)));

                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Ticket>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        //public static GetVendor_API_Events_Commit RequestSERVICEGROUP_SERVICE_Events_Commit(string EventsAPIURL, string JsonReq, ref string VendorOutputResponse, ref string VendorURL)
        //{
        //    GetVendor_API_Events_Commit objRes = new GetVendor_API_Events_Commit();
        //    try
        //    {
        //        VendorURL = EVENTS_API_URL_LINK + EventsAPIURL;
        //        if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
        //        {
        //            VendorURL = EVENTS_API_URL_LINK_LOCAL + EventsAPIURL;
        //        }

        //        string json = MyPay_EventsWebPostMethod(VendorURL, JsonReq);
        //        //string json = "{\"success\":false,\"message\":\"Bad request!\",\"data\":null,\"errors\":[\"Tickets already generated with this OrderId\"]}";

        //        VendorOutputResponse = json;
        //        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Commit>(json);
        //        objRes.message = (objRes.success ? "success" : ((String.IsNullOrEmpty(objRes.message) ? objRes.message : objRes.message)));
        //        objRes.details = objRes.message;
        //        if (objRes.errors != null && objRes.errors.Count > 0)
        //        {
        //            objRes.message = objRes.message + " " + objRes.errors[0].ToString();
        //            objRes.details = objRes.errors[0].ToString();
        //        }
        //        return objRes;
        //    }
        //    catch (WebException e)
        //    {
        //        using (WebResponse response = e.Response)
        //        {
        //            HttpWebResponse httpResponse = (HttpWebResponse)response;
        //            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
        //            using (Stream data = response.GetResponseStream())
        //            using (var reader = new StreamReader(data))
        //            {
        //                var json = reader.ReadToEnd();
        //                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Commit>(json);
        //                return objRes;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
        //        objRes.status = false;
        //        return objRes;
        //    }

        //}

        public static GetVendor_API_Events_Commit RequestSERVICEGROUP_SERVICE_Events_Commit(string EventsAPIURL, string JsonReq, ref string VendorOutputResponse, ref string VendorURL, bool isVoting = false)
        {
            GetVendor_API_Events_Commit objRes = new GetVendor_API_Events_Commit();
            log4net.Config.XmlConfigurator.ConfigureAndWatch(new System.IO.FileInfo(AppDomain.CurrentDomain.BaseDirectory + "log4net.config"));
            ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            log.Info("LOG4NET WORKING INSIDE: GetVendor_API_Events_Commit");
            try
            {

                VotingAPISetting.voting_BaseURL = Environment.GetEnvironmentVariable("Voting_BaseURL", EnvironmentVariableTarget.Machine);
                VotingAPISetting.key = Environment.GetEnvironmentVariable("Voting_Key", EnvironmentVariableTarget.Machine);
                VotingAPISetting.user = Environment.GetEnvironmentVariable("Voting_User", EnvironmentVariableTarget.Machine);
                VotingAPISetting.pass = Environment.GetEnvironmentVariable("Voting_Pass", EnvironmentVariableTarget.Machine);

                string json = "";
                if (!isVoting)
                {
                    VendorURL = EVENTS_API_URL_LINK + EventsAPIURL;
                    if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                    {
                        VendorURL = EVENTS_API_URL_LINK_LOCAL + EventsAPIURL;
                    }
                    json = MyPay_EventsWebPostMethod(VendorURL, JsonReq);
                }
                else
                {
                    VendorURL = VotingAPISetting.voting_BaseURL + EventsAPIURL;
                    if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                    {


                        VendorURL = VotingAPISetting.voting_BaseURL + EventsAPIURL;
                        log.Info("sending request to Voting API, Vendor URL :" + VendorURL);
                    }
                    log.Info("sending request to API, Vendor URL :" + VendorURL);
                    log.Info("sending request to API, JSON request :" + JsonReq);


                    json = MyPay_VotingWebPostMethod(VendorURL, JsonReq);



                }
                //string json = "{\"success\":false,\"message\":\"Bad request!\",\"data\":null,\"errors\":[\"Tickets already generated with this OrderId\"]}";
                log.Info("response from API, JSON :" + json);
                VendorOutputResponse = json;
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Commit>(json);
                objRes.message = (objRes.success ? "success" : ((String.IsNullOrEmpty(objRes.message) ? objRes.message : objRes.message)));
                objRes.details = objRes.message;
                if (objRes.errors != null && objRes.errors.Count > 0)
                {
                    objRes.message = objRes.message + " " + objRes.errors[0].ToString();
                    objRes.details = objRes.errors[0].ToString();
                }
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static string MyPayPostMerchantCheckout(string ApiName, string requestdata)
        {
            log4net.Config.XmlConfigurator.ConfigureAndWatch(new System.IO.FileInfo(AppDomain.CurrentDomain.BaseDirectory + "log4net.config"));
            ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            log.Info("Sending request to ENDPOINT: " + ApiName);


            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
                request.ContentType = "application/json";
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;
                //request.Headers["API_KEY"] = VendorApi_CommonHelper.MERCHANT_API_KEY;
                request.Headers["TESTHEADER"] = "ROSHAN THAPA";
                request.Headers.Add("API_KEY", VendorApi_CommonHelper.MERCHANT_API_KEY);
                log.Info("API_KEY at MyPayPostMerchantCheckout: " + request.Headers["API_KEY"].ToString());
                foreach (var item in request.Headers)
                {
                    //   log.Info(item.)
                }
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    return responseStr;
                }
                else
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    return responseStr;
                }
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }
        public static GetVendor_API_Events_CommitMerchant RequestSERVICEGROUP_SERVICE_Events_CommitMerchantTransaction(string EventsAPIURL, string JsonReq)
        {
            GetVendor_API_Events_CommitMerchant objRes = new GetVendor_API_Events_CommitMerchant();
            try
            {
                string URL = string.Empty;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction)
                {
                    URL = MyPay.Models.Common.Common.LiveApiUrl;
                }
                else
                {
                    URL = MyPay.Models.Common.Common.TestApiUrl;
                }

                URL = URL + EventsAPIURL;
                string json = MyPayPostMerchantCheckout(URL, JsonReq);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_CommitMerchant>(json);
                objRes.message = (objRes.success ? "success" : ((String.IsNullOrEmpty(objRes.message) ? objRes.message : objRes.message)));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_CommitMerchant>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Events_Ticket_Download RequestSERVICEGROUP_SERVICE_Events_Ticket_Download(string EventsAPIURL, string JsonReq)
        {
            GetVendor_API_Events_Ticket_Download objRes = new GetVendor_API_Events_Ticket_Download();
            try
            {
                string URL = EVENTS_API_URL_LINK + EventsAPIURL;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = EVENTS_API_URL_LINK_LOCAL + EventsAPIURL;
                }

                string json = MyPay_EventsWebPostMethod(URL, JsonReq);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Ticket_Download>(json);
                objRes.message = (objRes.success ? "success" : ((String.IsNullOrEmpty(objRes.message) ? objRes.message : objRes.message)));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Events_Ticket_Download>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static string MyPay_EventsWebPostMethod(string ApiName, string requestdata)
        {

            log4net.Config.XmlConfigurator.ConfigureAndWatch(new System.IO.FileInfo(AppDomain.CurrentDomain.BaseDirectory + "log4net.config"));
            ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);


            //   ApiName = ApiName.Replace("//", "/");

            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
                request.ContentType = "application/json";
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;
                if (!MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction)
                {
                    request.Headers["API-USERNAME"] = VendorApi_CommonHelper.EVENTS_USER_NAME_LOCAL;
                    request.Headers["API-KEY"] = VendorApi_CommonHelper.EVENTS_API_KEY_LOCAL;
                }
                else
                {
                    request.Headers["API-USERNAME"] = VendorApi_CommonHelper.EVENTS_USER_NAME;
                    request.Headers["API-KEY"] = VendorApi_CommonHelper.EVENTS_API_KEY;
                }

                log.Info("sending events request with API user: " + request.Headers["API-USERNAME"] + " Password: " + request.Headers["API-KEY"]);
                log.Info("sending events request to URL: " + ApiName);
                log.Info("sending events request JSON: " + requestdata);

                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    log.Info("Response received for event: " + responseStr);
                    return responseStr;
                }
                else
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    log.Info("Response received for event: " + responseStr);
                    return responseStr;
                }
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }


        public static string MyPay_VotingWebPostMethod(string ApiName, string requestdata)
        {
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
                request.ContentType = "application/json";
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;
                request.Headers["Authorization"] = "Basic " + createBase64(VotingAPISetting.user + ":" + VotingAPISetting.pass); //VendorApi_CommonHelper.EVENTS_USER_NAME;
                                                                                                                                 // request.Headers["API-KEY"] = VendorApi_CommonHelper.EVENTS_API_KEY;
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    return responseStr;
                }
                else
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    return responseStr;
                }
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        public static string createBase64(string text)
        {
            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(text);
            return System.Convert.ToBase64String(plainTextBytes);
        }

        #endregion

        public static List<WalletTransaction> getCableCarDetails(string memberId, string ServiceID)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {

                List<WalletTransaction> receiptData = new List<WalletTransaction>();
                var storedProcedureName = "sp_Users_CableCarDetails";
                var values = new
                {
                    MemberId = memberId,
                    ServiceId = ServiceID,
                };
                try
                {
                    receiptData = connection.Query<WalletTransaction>(storedProcedureName, values, commandType: CommandType.StoredProcedure).ToList();
                    //var result = connection.Query<Customer>("GetCustomerByID", parameters, commandType: System.Data.CommandType.StoredProcedure);
                }
                catch (SqlException sqlEx)
                {

                }
                return receiptData;
            }
        }
        public static List<tbl_BusSewa_details> getBusSewaDetails(string memberId, string ServiceID)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {

                List<tbl_BusSewa_details> receiptData = new List<tbl_BusSewa_details>();
                var storedProcedureName = "sp_Users_BusSewaDetails";
                var values = new
                {
                    MemberId = memberId,
                    ServiceId = ServiceID,
                };
                try
                {
                    receiptData = connection.Query<tbl_BusSewa_details>(storedProcedureName, values, commandType: CommandType.StoredProcedure).ToList();
                    //var result = connection.Query<Customer>("GetCustomerByID", parameters, commandType: System.Data.CommandType.StoredProcedure);
                }
                catch (SqlException sqlEx)
                {

                }
                return receiptData;
            }
        }
        public static string PostMethod(ref AddVendor_API_Requests objAddVendor_API_Requests, string ApiName, string requestdata)
        {
            string responseStr = string.Empty;
            try
            {
                if (objAddVendor_API_Requests.Id > 0)
                {
                    objAddVendor_API_Requests.Req_Khalti_URL = ApiName;
                    RepCRUD<AddVendor_API_Requests, GetVendor_API_Requests>.Update(objAddVendor_API_Requests, "vendor_api_requests");
                }
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;
                byte[] bytes = null;
                bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
                request.ContentType = "application/json";
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();
                }
                else
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();

                }
            }
            catch (WebException e)
            {
                if (e.Response == null && e.Message != null)
                {
                    Common.Common.AddLogs("Error KhaltiPost: ApiName " + ApiName + ". Request: " + requestdata + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                    return e.Message;
                }
                else
                {
                    using (WebResponse response = e.Response)
                    {
                        HttpWebResponse httpResponse = (HttpWebResponse)response;
                        Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                        using (Stream data = response.GetResponseStream())
                        using (var reader = new StreamReader(data))
                        {
                            responseStr = reader.ReadToEnd();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                responseStr = ex.Message;
            }
            Common.Common.AddLogs($"KhaltiPost URL: {ApiName}, Request {requestdata}, Response {responseStr}  on {Common.Common.fnGetdatetime()}", false, (int)AddLog.LogType.DBLogs);
            return responseStr;

        }

        public static string PostMethodWithAuthenticationKeyHeader(string ApiName, string AuthenticationKey)
        {
            try
            {
                // *********************************************** //
                //HttpClient _httpClient = new HttpClient();
                //string tokenString = "live_secret_key_1b822a47b4864a538391c7490fae8cda";
                //var t1 = System.Threading.Tasks.Task.Run(() => ExecuteAPIMethod(_httpClient, ApiName, tokenString));
                //t1.Wait();
                //************************************************//
                string responseStr;
                var httpRequest = (HttpWebRequest)WebRequest.Create(ApiName);

                httpRequest.Headers["Authorization"] = AuthenticationKey;


                var httpResponse = (HttpWebResponse)httpRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    responseStr = streamReader.ReadToEnd();
                }
                return responseStr;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }
        //private static async Task<dynamic> ExecuteAPIMethod(HttpClient client, string requestAPI, string requestKey)
        //{
        //    string settlePymtRs = string.Empty;
        //    string settlePymtFail = string.Empty;
        //    //settlePymtRs settlePymtRs = new settlePymtRs();
        //    //settlePymtFail settlePymtFail = new settlePymtFail();

        //    //string settlePymtURL = tokenRs.xCurrentdomain + "/v4/payments/" + paymentid + "/settle";
        //    //Debug.WriteLine("\n settlePymtURL : [{0}]\t", settlePymtURL);

        //    //using (var client = new HttpClient())
        //    {
        //        // We want the response to be JSON.
        //        client.DefaultRequestHeaders.Accept.Clear();
        //        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

        //        StringContent apiContent = new StringContent("{}", Encoding.UTF8, "application/json");
        //        client.DefaultRequestHeaders.Add("Authorization", "Key " + requestKey);

        //        try
        //        {
        //            HttpResponseMessage response = await client.GetAsync(new Uri(requestAPI));
        //            string responseString = await response.Content.ReadAsStringAsync();
        //            if (response.IsSuccessStatusCode)
        //            {
        //                //Debug.WriteLine("RESPONSE : [{0}]", responseString);
        //                //settlePymtRs = JsonConvert.DeserializeObject<settlePymtRs>(responseString);
        //                //parseSettledPymtResponse(settlePymtRs).Wait();
        //                return settlePymtRs;
        //            }
        //            else
        //            {
        //                //settlePymtFail = JsonConvert.DeserializeObject<settlePymtFail>(responseString);

        //                //Debug.WriteLine("\n Payment ID \t\t\t : [{0}]", paymentid);
        //                //Debug.WriteLine("\n\t Settle Pymt request has failed with status code [{1}]", settlePymtFail.status);
        //                //Debug.WriteLine("\n\t Reason for failure [{0}]", settlePymtFail.title);
        //                return settlePymtFail;
        //            }
        //        }
        //        catch (HttpRequestException e)
        //        {
        //            Debug.WriteLine("\n\t Exception Caught!!!");
        //            Debug.WriteLine("\n\t Message \t\t\t\t :{0} ", e.Message);
        //        }
        //        catch (Exception ex)
        //        {
        //            Debug.WriteLine("\n\t Exception Caught!!!");
        //            Debug.WriteLine("\n\t Message \t\t\t\t :{0} ", ex.Message);
        //        }

        //        return 0;
        //    }
        //}

        public static string MyPayWebPostMethod(string ApiName, string requestdata, string UToken, string AuthorizationKey)
        {
            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
                request.ContentType = "application/json";
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;
                request.Headers["UToken"] = UToken;
                request.Headers["Authorization"] = "Bearer- " + AuthorizationKey;
                request.Headers["secret-key"] = Common.Common.SecretKeyForWebAPICall;
                request.UserAgent = "mypay";
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    return responseStr;
                }
                else
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    return responseStr;
                }
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        public static string GetMethod(string ApiName, string requestdata, string UToken, string AuthorizationKey)
        {
            try
            {
                string responseStr = "";

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
                request.ContentType = "application/json";
                request.ContentLength = bytes.Length;
                request.Method = "Get";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;
                ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
                request.Headers["Authorization"] = CableCarAuthentication;
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (Stream stream = response.GetResponseStream())
                    {
                        responseStr = new StreamReader(stream).ReadToEnd();
                        stream.Flush();
                        stream.Close();
                    }
                }

                return responseStr;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_Events_CommitMerchantTransactions(string orderId, string amount, string merchantId, string userName, string password)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Events_Request_CommitMerchant objReq = new Vendor_Input_Events_Request_CommitMerchant();
            objReq.orderId = orderId;
            objReq.amount = amount;
            objReq.merchantId = merchantId;
            objReq.userName = userName;
            objReq.password = password;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_Eset_Payment_Request RequestEset_ANTIVIRUS_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Eset_Payment_Request objRes = new GetVendor_API_Eset_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Eset_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Eset_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_Eset_Lookup RequestEset_LOOKUP(string KhaltiAPIURL)
        {
            GetVendor_API_Eset_Lookup objRes = new GetVendor_API_Eset_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiUrl_Root + KhaltiAPIURL}?token={Req_TokenLive}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{KhaltiApiUrl_Root_localhost + KhaltiAPIURL}?token={Req_TokenLive_localhost}";
                }
                var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Eset_Lookup>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Eset_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }

        public static string GenerateApi_Input_JsonRequest_Eset(string value, string amount, string reference)
        {
            // ***********************************************************************************************************//
            // ************************ Generate JSON String from Input Object ******************************************** //
            // ************* AMOUNT IS READONLY AND NOT TO BE PASSED TO Kaspersky -- IT IS AUTO FETCH FROM PAYMENT_ID *********** //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_Eset_Payment_Request objReq = new Vendor_Input_Eset_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.value = value;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_Wardwiz_Lookup RequestWardwiz_LOOKUP(string KhaltiAPIURL)
        {
            GetVendor_API_Wardwiz_Lookup objRes = new GetVendor_API_Wardwiz_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiUrl_Root + KhaltiAPIURL}?token={Req_TokenLive}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{KhaltiApiUrl_Root_localhost + KhaltiAPIURL}?token={Req_TokenLive_localhost}";
                }
                var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Wardwiz_Lookup>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Wardwiz_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_Wardwiz_Payment_Request RequestWardwiz_ANTIVIRUS_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Wardwiz_Payment_Request objRes = new GetVendor_API_Wardwiz_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Wardwiz_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Wardwiz_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_Wardwiz(string value, string amount, string reference)
        {
            // ***********************************************************************************************************//
            // *********************** Generate JSON String from Input Object ******************************************* //
            // ************ AMOUNT IS READONLY AND NOT TO BE PASSED TO Kaspersky -- IT IS AUTO FETCH FROM PAYMENT_ID ********** //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_Wardwiz_Payment_Request objReq = new Vendor_Input_Wardwiz_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.value = value;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static GetVendor_API_K7_Payment_Request RequestK7_ANTIVIRUS_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_K7_Payment_Request objRes = new GetVendor_API_K7_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_K7_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_K7_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }

        public static GetVendor_API_K7_Lookup RequestK7_LOOKUP(string KhaltiAPIURL)
        {
            GetVendor_API_K7_Lookup objRes = new GetVendor_API_K7_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiUrl_Root + KhaltiAPIURL}?token={Req_TokenLive}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{KhaltiApiUrl_Root_localhost + KhaltiAPIURL}?token={Req_TokenLive_localhost}";
                }
                var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_K7_Lookup>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_K7_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static GetVendor_API_Mcafee_Lookup RequestMcafee_LOOKUP(string KhaltiAPIURL)
        {
            GetVendor_API_Mcafee_Lookup objRes = new GetVendor_API_Mcafee_Lookup();
            try
            {
                string LookupURL = $"{KhaltiApiUrl_Root + KhaltiAPIURL}?token={Req_TokenLive}";
                if (Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    LookupURL = $"{KhaltiApiUrl_Root_localhost + KhaltiAPIURL}?token={Req_TokenLive_localhost}";
                }
                var json = new WebClient().DownloadString(LookupURL);
                objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Mcafee_Lookup>(json);
                objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Mcafee_Lookup>(json);
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? "Request Failed" : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_K7(string value, string amount, string reference)
        {
            // ***********************************************************************************************************//
            // *********************** Generate JSON String from Input Object ******************************************* //
            // ************ AMOUNT IS READONLY AND NOT TO BE PASSED TO Kaspersky -- IT IS AUTO FETCH FROM PAYMENT_ID ********** //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_K7_Payment_Request objReq = new Vendor_Input_K7_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.value = value;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_Mcafee(string value, string name, string amount, string reference)
        {
            // ***********************************************************************************************************//
            // *********************** Generate JSON String from Input Object ******************************************* //
            // ************ AMOUNT IS READONLY AND NOT TO BE PASSED TO Kaspersky -- IT IS AUTO FETCH FROM PAYMENT_ID ********** //
            // ******************************************************************************************************************//
            string result = "";
            Vendor_Input_Mcafee_Payment_Request objReq = new Vendor_Input_Mcafee_Payment_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            objReq.value = value;
            objReq.name = name;
            objReq.amount = amount;
            objReq.reference = reference;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static GetVendor_API_Mcafee_Payment_Request RequestMcafee_ANTIVIRUS_PAYMENT(string JsonReq, ref string VendorOutputResponse, string KhaltiAPIURL, ref AddVendor_API_Requests objAddVendor_API_Requests)
        {
            GetVendor_API_Mcafee_Payment_Request objRes = new GetVendor_API_Mcafee_Payment_Request();
            try
            {
                string json = PostMethod(ref objAddVendor_API_Requests, KhaltiApiUrl_Prefix + KhaltiAPIURL, JsonReq);
                VendorOutputResponse = json;
                var data = (JObject)JsonConvert.DeserializeObject(json);
                string Error = (String.IsNullOrEmpty(Convert.ToString(data["error"])) ? String.Empty : Convert.ToString(data["error"]));
                string Details = String.Empty;
                if ((Error.ToLower() == "invalid_parameters") || (Error.ToLower() == "validation_error"))
                {

                    Details = FetchErrorDetails(data, Details);
                }
                else
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Mcafee_Payment_Request>(json);
                    Details = (String.IsNullOrEmpty(Convert.ToString(data["details"])) ? String.Empty : Convert.ToString(data["details"])); Details = Details.Replace("\r\n", "");
                }
                Details = objRes.message + " " + Details; TextInfo textInfo = new CultureInfo("en-US", false).TextInfo; Details = textInfo.ToTitleCase(Details).Replace("_", " ");
                objRes.message = (objRes.status ? "success" : (Details));
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Mcafee_Payment_Request>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.message = String.IsNullOrEmpty(objRes.message) ? ex.Message : objRes.message;
                objRes.status = false;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_EPF_DepositType(string batchId, decimal batchAmount, Int32 batchCount, string BatchCrncy, string categoryPurpose, string debtorAgent, string debtorBranch, string DebtorName, string debtorAccount, string debtorIdType, string debtorIdValue, string DebtorAddress, string debtorPhone, string debtorMobile, string debtorEmail, string instructionId, string endToEndId, decimal amount, string appId, string refId, string freeText1, string addenda3)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Epf_Deposit_Type_Request objReq = new Vendor_Input_Epf_Deposit_Type_Request();
            objReq.CipsBatchDetail = new Vendor_Input_Epf_Deposit_Type_Request.CipsBatch();
            objReq.CipsBatchDetail.BatchCrncy = batchId;
            objReq.CipsBatchDetail.BatchAmount = batchAmount;
            objReq.CipsBatchDetail.BatchCount = batchCount;
            objReq.CipsBatchDetail.BatchCrncy = BatchCrncy;
            objReq.CipsBatchDetail.CategoryPurpose = categoryPurpose;
            objReq.CipsBatchDetail.DebtorAgent = debtorAgent;
            objReq.CipsBatchDetail.DebtorBranch = debtorBranch;
            objReq.CipsBatchDetail.DebtorName = DebtorName;
            objReq.CipsBatchDetail.DebtorAccount = debtorAccount;
            objReq.CipsBatchDetail.DebtorIdType = debtorIdType;
            objReq.CipsBatchDetail.DebtorIdValue = debtorIdValue;
            objReq.CipsBatchDetail.DebtorAddress = DebtorAddress;
            objReq.CipsBatchDetail.DebtorPhone = debtorPhone;
            objReq.CipsBatchDetail.DebtorMobile = debtorMobile;
            objReq.CipsBatchDetail.DebtorEmail = debtorEmail;
            objReq.CipsTransactionDetail = new Vendor_Input_Epf_Deposit_Type_Request.CipsTransaction();
            objReq.CipsTransactionDetail.InstructionId = instructionId;
            objReq.CipsTransactionDetail.EndToEndId = endToEndId;
            objReq.CipsTransactionDetail.Amount = Convert.ToDecimal(amount);
            objReq.CipsTransactionDetail.AppId = appId;
            objReq.CipsTransactionDetail.RefId = refId;
            objReq.CipsTransactionDetail.FreeText1 = freeText1;
            objReq.CipsTransactionDetail.Addenda3 = addenda3;
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_EPF_ContributorDetail(string BatchCrncy, string DebtorName, string DebtorAddress)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Epf_Deposit_Type_Request objReq = new Vendor_Input_Epf_Deposit_Type_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_EPF_ConfirmPayment(string BatchCrncy, string DebtorName, string DebtorAddress)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Epf_Deposit_Type_Request objReq = new Vendor_Input_Epf_Deposit_Type_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_EPF_Commit(string BatchCrncy, string DebtorName, string DebtorAddress)
        {
            // ********************************************************//
            // ** Generate JSON String from Input Object *********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_Epf_Deposit_Type_Request objReq = new Vendor_Input_Epf_Deposit_Type_Request();
            objReq.token = Req_TokenLive;
            RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }

        public static string Generate_json_Insurance_Reciepts_Data(string serviceId, string sessionId, string tnxId, string insuranceService, string productName, string customerName, string policyNo, string premiumAmount, string installmentNo, string nextDueDate, string transationStatus, string asuredAmount,
            string fineAmount, string serviceAmount, string totalAmount)
        {
            var list = new List<KeyValuePair<String, String>>();
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Date", DateTime.Now.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Type", "Insurance Payment");
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Insurance Service", insuranceService);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Product Name Details", (productName == null ? "" : productName.ToString()));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Policy Holder Name", customerName);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Policy Number", policyNo);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Sum Assured Amount", (asuredAmount == null ? "" : asuredAmount.ToString()));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Premium Number", (installmentNo == null ? "" : installmentNo));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Next Premium Date", nextDueDate.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Status", transationStatus.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Premium Amount", premiumAmount.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Fine Amount", fineAmount.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Servcice Charge", serviceAmount.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Paid(RED)", totalAmount.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Remarks", "Insurance premium of " + totalAmount.ToString() + " is paid for policy number " + policyNo + " successfully.");

            string jsonData = VendorApi_CommonHelper.getJSONfromList(list);
            return jsonData;
            //saveRecieptsVendorResponse(serviceId.ToString(), sessionId, tnxId, jsonData, "", "", "", "", "");
        }
        public static void Generate_Insurance_Reciepts_Data(string serviceId, string sessionId, string tnxId, string insuranceService, string productName, string customerName, string policyNo, string premiumAmount, string installmentNo, string nextDueDate, string transationStatus, string asuredAmount,
            string fineAmount, string serviceAmount, string totalAmount)
        {
            var list = new List<KeyValuePair<String, String>>();
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Date", DateTime.Now.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Type", "Insurance Payment");
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Insurance Service", insuranceService);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Product Name Details", (productName == null ? "" : productName.ToString()));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Policy Holder Name", customerName);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Policy Number", policyNo);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Sum Assured Amount", (asuredAmount == null ? "" : asuredAmount.ToString()));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Premium Number", (installmentNo == null ? "" : installmentNo));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Next Premium Date", (nextDueDate == null ? "" : nextDueDate.ToString()));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Status", transationStatus.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Premium Amount", (premiumAmount == null ? "" : premiumAmount.ToString()));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Fine Amount", (fineAmount == null ? "" : fineAmount.ToString()));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Servcice Charge", serviceAmount.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Paid(RED)", totalAmount.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Remarks", "Insurance premium of " + totalAmount.ToString() + " is paid for policy number " + policyNo + " successfully.");

            string jsonData = VendorApi_CommonHelper.getJSONfromList(list);
            saveRecieptsVendorResponse(serviceId.ToString(), sessionId, tnxId, jsonData, "", "", "", "", "");
        }

        public static void saveReceipt(string ServiceID, string ServiceName, string MemberID, string txnID, string Table1JSONContent, string contactNumber, string fullName, string txnType,
         string PaidFor, string amount)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {
                var sql = "insert into reciepts(" +
                    "ServiceID" + "," +
                    "MemberId" + "," +
                    "table1JSONContent" + "," +
                    "contactNumber" + "," +
                    "fullname" + "," +
                    "TxnID" + "," +
                    "TxnType" + "," +
                    "PaidFor" + "," +
                    "amount" +
                    ") values('";

                sql = sql + ServiceID + "','";
                sql = sql + MemberID + "','";
                sql = sql + Table1JSONContent + "','";
                sql = sql + contactNumber + "','";
                sql = sql + fullName + "','";
                sql = sql + txnID + "','";
                sql = sql + txnType + "','";
                sql = sql + PaidFor + "',";
                sql = sql + amount + "";
                sql = sql + ")";

                var updatedRow = connection.Execute(sql, null);
            }
        }

        public static void saveExtraReceiptData(string txnID, string Table2JSONContent)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {
                var sql = "update reciepts set table2JSONContent = '" + Table2JSONContent + "' where txnid = '" + txnID + "'";
                var updatedRow = connection.Execute(sql, null);
            }
        }

        public static void saveRecieptsVendorResponse(string ServiceID, string SessionId, string txnID, string ReqJSONContent, string ResJSONContent, string contactNumber, string fullName, string txnType,
             string PaidFor)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {
                var sql = "insert into RecieptsVendorResponse(" +
                    "ServiceID" + "," +
                    "TxnID" + "," +
                    "ReqJSONContent" + "," +
                    "ResJSONContent" + "," +
                    "ContactNumber" + "," +
                    "fullname" + "," +
                    "TxnType" + "," +
                    "PaidFor" + "," +
                    "SessionId" +
                    ") values('";

                sql = sql + ServiceID + "','";
                sql = sql + txnID + "','";
                sql = sql + ReqJSONContent + "','";
                sql = sql + ResJSONContent + "','";
                sql = sql + contactNumber + "','";
                sql = sql + fullName + "','";

                sql = sql + txnType + "','";
                sql = sql + PaidFor + "',";
                sql = sql + SessionId + "";
                sql = sql + ")";

                var updatedRow = connection.Execute(sql, null);
            }
        }

        public static string Generate_json_Internet_Reciepts_Data(string serviceId, string sessionId, string tnxId, string customerId, string Servicename, string package, string PaymentTerm, string transationStatus,
            string totalAmount)
        {
            var list = new List<KeyValuePair<String, String>>();
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Date", DateTime.Now.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Type", "Internet Payment");
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Internet Service", Servicename);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Package", (package == null ? "" : package.ToString()));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Payment Term", PaymentTerm);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Status", transationStatus.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Remarks", "{" + Servicename + "} bill of Rs " + totalAmount.ToString() + " successfully paid to {" + customerId + "} .");

            string jsonData = VendorApi_CommonHelper.getJSONfromList(list);
            return jsonData;
            //saveRecieptsVendorResponse(serviceId.ToString(), sessionId, tnxId, jsonData, "", "", "", "", "");
        }
        public static void Generate_Internet_Reciepts_Data(string serviceId, string sessionId, string tnxId, string customerId, string Servicename, string package, string PaymentTerm, string transationStatus,
            string totalAmount)
        {
            var list = new List<KeyValuePair<String, String>>();
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Date", DateTime.Now.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Type", "Internet Payment");
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Internet Service", Servicename);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Package", (package == null ? "" : package.ToString()));
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Payment Term", PaymentTerm);
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Transaction Status", transationStatus.ToString());
            VendorApi_CommonHelper.addKeyValueToList(ref list, "Remarks", "{" + Servicename + "} bill of Rs " + totalAmount.ToString() + " successfully paid to {" + customerId + "} .");

            string jsonData = VendorApi_CommonHelper.getJSONfromList(list);
            saveRecieptsVendorResponse(serviceId.ToString(), sessionId, tnxId, jsonData, "", "", "", "", "");
        }



        public static ReceiptsVendorResponse getRecordRecieptsVendorResponse(string txnID, string serviceid, string sessionid)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {

                ReceiptsVendorResponse receiptData = new ReceiptsVendorResponse();
                var storedProcedureName = "sp_getReceiptVendorResponse";
                var values = new
                {
                    txnID = txnID,
                    serviceId = serviceid,
                    sessionId = sessionid
                };
                try
                {
                    receiptData = connection.QueryFirstOrDefault<ReceiptsVendorResponse>(storedProcedureName, values, commandType: CommandType.StoredProcedure);

                }
                catch (SqlException sqlEx)
                {

                }
                return receiptData;
            }
        }

        public static ReceiptsVendorResponse getUserDetails(string memberId)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {

                ReceiptsVendorResponse receiptData = new ReceiptsVendorResponse();
                var storedProcedureName = "UserDetail";
                var values = new
                {
                    memberId = int.Parse(memberId),
                };
                try
                {
                    receiptData = connection.QueryFirstOrDefault<ReceiptsVendorResponse>(storedProcedureName, values, commandType: CommandType.StoredProcedure);

                }
                catch (SqlException sqlEx)
                {

                }
                return receiptData;
            }
        }
        public static walletTransactionDetail GetWalletDetail(string TransactionId)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {

                walletTransactionDetail receiptData = new walletTransactionDetail();
                var storedProcedureName = "WalletTransactionDetail";
                var values = new
                {
                    TransactionId = TransactionId,
                };
                try
                {
                    receiptData = connection.QueryFirstOrDefault<walletTransactionDetail>(storedProcedureName, values, commandType: CommandType.StoredProcedure);

                }
                catch (SqlException sqlEx)
                {

                }
                return receiptData;
            }
        }

        public static MerchantDetail MerchantDetailByAPIUser(string APIUSER)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {

                MerchantDetail receiptData = new MerchantDetail();
                var storedProcedureName = "sp_GetMerchantUserdetail";
                var values = new
                {
                    APIUser = APIUSER,
                };
                try
                {
                    receiptData = connection.QueryFirstOrDefault<MerchantDetail>(storedProcedureName, values, commandType: CommandType.StoredProcedure);

                }
                catch (SqlException sqlEx)
                {

                }
                return receiptData;
            }
        }


        public static MerchantDetail MerchantUpadteForCableCar(string MID, string TransactionId)
        {

            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();
            MerchantDetail receiptData = new MerchantDetail();
            var parameters = new
            {
                MID = MID,

            };
            string updateSql = "Update MerchantOrders set Status='1',TransactionId='" + TransactionId + "' ,Remarks='Suceesful for Cable Car',Type='300' where OrderId='" + @MID + "'";
            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                int rowsAffected = connection.Execute(updateSql, parameters);
            }
            return receiptData;
        }

        public static MerchantDetail MerchantUpadteForCableCarAmount(string MID, string MerchantUniqueId)
        {

            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();
            MerchantDetail receiptData = new MerchantDetail();
            var parameters = new
            {
                OrderID = MID,
                MerchantUniqueId = MerchantUniqueId

            };

            using (var connection = new SqlConnection(connectionString))
            {

                string sqlCommand = "Execute MerchantCableCarUpdate @flag = 'i'";

                sqlCommand += ",@OrderId = " + MID + "";
                sqlCommand += ",@MerchantID = " + MerchantUniqueId + "";
                var updatedRow = connection.Execute(sqlCommand, null);
            }



            return receiptData;
        }


        public static CableDownloadVendorResponse CableCarDownload(string ReferenceId)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {

                CableDownloadVendorResponse receiptData = new CableDownloadVendorResponse();
                var storedProcedureName = "CableCardownload";
                var values = new
                {
                    ReferenceId = ReferenceId,
                };
                try
                {
                    receiptData = connection.QueryFirstOrDefault<CableDownloadVendorResponse>(storedProcedureName, values, commandType: CommandType.StoredProcedure);

                }
                catch (SqlException sqlEx)
                {

                }

                return receiptData;

            }
        }
        public static ReceiptsVendorResponse GetCableCarReceipts(string txnID)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {

                ReceiptsVendorResponse receiptData = new ReceiptsVendorResponse();
                var storedProcedureName = "sp_getfromReceipts";
                var values = new
                {
                    txnID = txnID,
                };
                try
                {
                    receiptData = connection.QueryFirstOrDefault<ReceiptsVendorResponse>(storedProcedureName, values, commandType: CommandType.StoredProcedure);

                }
                catch (SqlException sqlEx)
                {

                }

                return receiptData;

            }
        }

        public static GetVendor_API_Epf_Deposit_Type RequestSERVICEGROUP_EPF_Deposit_Type(string JsonReq, string EpfUrl)
        {
            GetVendor_API_Epf_Deposit_Type objRes = new GetVendor_API_Epf_Deposit_Type();
            try
            {

                string URL = GOVERNMENT_SERVICE_API_URL_LINK + EpfUrl;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = GOVERNMENT_SERVICE_API_URL_LINK_LOCAL + EpfUrl;
                }
                string Authtoken = RepNCHL.gettoken_LinkBank();

                string json = PostMethodWithAuthToken(URL, JsonReq, Authtoken);
                if (Common.Common.IsValidJson(json))
                {

                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Epf_Deposit_Type>(json);
                    objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                }
                else
                {
                    objRes.Message = json;
                }
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Epf_Deposit_Type>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }

        public static string PostMethodWithAuthToken(string ApiName, string requestdata, string AuthToken)
        {

            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
                request.ContentType = "application/json";
                request.Headers.Add("Authorization", "Bearer " + AuthToken);
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    return responseStr;
                }
                else
                {

                    Stream responseStream = response.GetResponseStream();
                    string responseStr = new StreamReader(responseStream).ReadToEnd();
                    return responseStr;
                }
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    if (e.Response == null && e.Message != null)
                    {

                        return e.Message;
                    }
                    else
                    {
                        HttpWebResponse httpResponse = (HttpWebResponse)response;
                        using (Stream data = response.GetResponseStream())
                        using (var reader = new StreamReader(data))
                        {
                            string text = reader.ReadToEnd() + e.Response.ToString() + e.Message;


                            return text;
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                return ex.Message;
            }
        }

        public static GetVendor_API_Epf_Contributor_Detail RequestSERVICEGROUP_EPF_Contributor_Detail(string JsonReq, string KhaltiUrl)
        {
            GetVendor_API_Epf_Contributor_Detail objRes = new GetVendor_API_Epf_Contributor_Detail();
            try
            {

                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiUrl;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiUrl;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                if (Common.Common.IsValidJson(json))
                {

                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Epf_Contributor_Detail>(json);
                    objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));

                }
                else
                {
                    objRes.Message = json;
                }
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Epf_Contributor_Detail>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Epf_Commit RequestSERVICEGROUP_EPF_Commit(string JsonReq, string KhaltiUrl)
        {
            GetVendor_API_Epf_Commit objRes = new GetVendor_API_Epf_Commit();
            try
            {

                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiUrl;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiUrl;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);
                if (Common.Common.IsValidJson(json))
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Epf_Commit>(json);
                    objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                }
                else
                {
                    objRes.Message = json;
                }
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Epf_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }
        public static GetVendor_API_Epf_Commit RequestSERVICEGROUP_EPF_ConfirmPayment(string JsonReq, string KhaltiUrl)
        {
            GetVendor_API_Epf_Commit objRes = new GetVendor_API_Epf_Commit();
            try
            {

                string URL = ServiceGroup_COUNTERS_URL_Prefix + KhaltiUrl;
                if (MyPay.Models.Common.Common.ApplicationEnvironment.IsProduction == false)
                {
                    URL = ServiceGroup_COUNTERS_URL_Prefix_localhost + KhaltiUrl;
                }
                AddVendor_API_Requests objAddVendor_API_Requests = new AddVendor_API_Requests();
                string json = PostMethod(ref objAddVendor_API_Requests, URL, JsonReq);

                if (Common.Common.IsValidJson(json))
                {
                    objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Epf_Commit>(json);
                    objRes.Message = (objRes.status ? "success" : ((String.IsNullOrEmpty(objRes.details) ? objRes.Message : objRes.details)));
                }
                else
                {
                    objRes.Message = json;
                }
                return objRes;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        objRes = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVendor_API_Epf_Commit>(json);
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                objRes.status = false;
                return objRes;
            }

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_CIT_Category(string Category)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_CIT_Category_Request objReq = new Vendor_Input_CIT_Category_Request();
            objReq.category = Category;
            // RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_CIT_JourneyDetails(string AppCode)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_CIT_Journey_Details_Request objReq = new Vendor_Input_CIT_Journey_Details_Request();
            objReq.appCode = AppCode;
            // RequestedToken = objReq.token;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_CIT_LoanType(string AppGroup, string FieldName)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_CIT_Loan_Type_Request objReq = new Vendor_Input_CIT_Loan_Type_Request();
            objReq.appGroup = AppGroup;
            objReq.fieldName = FieldName;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_CIT_BillPayment(string batchId, string batchAmount, string batchCount, string batchCrncy, string categoryPurpose,
            string debtorAgent, string debtorBranch, string debtorName, string debtorAccount, string debtorIdType, string debtorIdValue,
            string debtorAddress, string debtorPhone, string debtorMobile, string debtorEmail, string instructionId, string endToEndId,
            string amount, string appId, string refId, string remarks, string freeCode1)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //b
            // ********************************************************//
            string result = "";
            string Batch = $"{batchId},{debtorAgent},{debtorBranch},{debtorAccount},{batchAmount},{batchCrncy}";
            string Transaction = $"{instructionId},{appId},{refId}";
            string SignatureText = Common.Common.GenerateConnectIPSToken_LinkBank(Batch + Transaction);
            Vendor_Input_CIT_Bill_Payment_Request objReq = new Vendor_Input_CIT_Bill_Payment_Request();
            objReq.token = SignatureText;
            objReq.cipsBatchDetail = new CITBatchDetail();
            objReq.cipsBatchDetail.batchId = batchId;
            objReq.cipsBatchDetail.batchAmount = batchAmount;
            objReq.cipsBatchDetail.batchCount = Convert.ToInt32(batchCount);
            objReq.cipsBatchDetail.batchCrncy = batchCrncy;
            objReq.cipsBatchDetail.categoryPurpose = categoryPurpose;
            objReq.cipsBatchDetail.debtorAgent = debtorAgent;
            objReq.cipsBatchDetail.debtorBranch = debtorBranch;
            objReq.cipsBatchDetail.debtorName = debtorName;
            objReq.cipsBatchDetail.debtorAccount = debtorAccount;
            objReq.cipsBatchDetail.debtorIdType = debtorIdType;
            objReq.cipsBatchDetail.debtorIdValue = debtorIdValue;
            objReq.cipsBatchDetail.debtorAddress = debtorAddress;
            objReq.cipsBatchDetail.debtorPhone = debtorPhone;
            objReq.cipsBatchDetail.debtorMobile = debtorMobile;
            objReq.cipsBatchDetail.debtorEmail = debtorEmail;
            objReq.cipsTransactionDetail = new CITTransactionDetail();
            objReq.cipsTransactionDetail.instructionId = instructionId;
            objReq.cipsTransactionDetail.endToEndId = endToEndId;
            objReq.cipsTransactionDetail.amount = amount;
            objReq.cipsTransactionDetail.appId = appId;
            objReq.cipsTransactionDetail.refId = refId;
            objReq.cipsTransactionDetail.remarks = remarks;
            objReq.cipsTransactionDetail.freeCode1 = freeCode1;

            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GenerateApi_Input_JsonRequest_SERVICEGROUP_CIT_QueryTransaction(string instructionId, string batchId, string transactionId, string realTime)
        {
            // ********************************************************//
            // * Generate JSON String from Input Object ********** //
            // ********************************************************//
            string result = "";
            Vendor_Input_CIT_Query_Transaction_Request objReq = new Vendor_Input_CIT_Query_Transaction_Request();
            objReq.InstructionId = instructionId;
            objReq.BatchId = transactionId;
            objReq.TransactionId = batchId;
            objReq.RealTime = realTime;
            result = Newtonsoft.Json.JsonConvert.SerializeObject(objReq);
            return result;

        }
        public static string GetMethod_OrganizationDetails(string ApiName, string requestdata)
        {
            string responseStr = "";
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
            byte[] bytes = null;
            bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
            request.ContentType = "application/json";
            request.ContentLength = bytes.Length;
            request.Method = "Get";
            request.KeepAlive = false;
            request.Timeout = System.Threading.Timeout.Infinite;
            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                using (Stream stream = response.GetResponseStream())
                {
                    responseStr = new StreamReader(stream).ReadToEnd();
                    stream.Flush();
                    stream.Close();
                }
            }

            return responseStr;

        }
        public static string PostMethod_RegistrationDetails(string ApiName, string requestdata)
        {
            string responseStr = "";
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;
            HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
            byte[] bytes = null;
            bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
            request.ContentType = "application/json";
            request.ContentLength = bytes.Length;
            request.Method = "POST";
            request.KeepAlive = false;
            request.Timeout = System.Threading.Timeout.Infinite;
            Stream requestStream = request.GetRequestStream();
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Flush();
            requestStream.Close();

            HttpWebResponse response = default(HttpWebResponse);
            response = (HttpWebResponse)request.GetResponse();
            if (response.StatusCode == HttpStatusCode.OK)
            {
                Stream responseStream = response.GetResponseStream();
                responseStr = new StreamReader(responseStream).ReadToEnd();
            }
            else
            {
                Stream responseStream = response.GetResponseStream();
                responseStr = new StreamReader(responseStream).ReadToEnd();

            }
            return responseStr;
        }
        //}
        //********************** Start ************for plasmaTech**********************//
        public static GetApiFlightSwitchSettings GetFlightDetail(string Fid)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {

                GetApiFlightSwitchSettings flightData = new GetApiFlightSwitchSettings();
                var storedProcedureName = "sp_GetFlightSwitchSettings";
                var values = new
                {
                    IsActive = int.Parse(Fid),
                };
                try
                {
                    flightData = connection.QueryFirstOrDefault<GetApiFlightSwitchSettings>(storedProcedureName, values, commandType: CommandType.StoredProcedure);

                }
                catch (SqlException sqlEx)
                {

                }
                return flightData;
            }
        }

        public static List<AddFlightPassengersDetails> GetPaxDetailsList(string bookingId)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {
                var storedProcedureName = "sp_GetFlightPassengersDetails";
                var values = new
                {
                    bookingId = bookingId,
                };

                try
                {
                    // Use Query method to get a list of results
                    List<AddFlightPassengersDetails> paxDetailsList = connection.Query<AddFlightPassengersDetails>(storedProcedureName, values, commandType: CommandType.StoredProcedure).ToList();

                    return paxDetailsList;
                }
                catch (SqlException sqlEx)
                {
                    // Handle exceptions
                    Console.WriteLine($"SQL Exception: {sqlEx.Message}");
                    return null; // or throw an exception, log, etc., based on your application's requirements
                }
            }
        }

        public static List<AddFlightPassengersDetails> GetPlasmaPassengersDetailsList(long bookingId)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();

            using (var connection = new SqlConnection(connectionString))
            {
                var storedProcedureName = "sp_FlightPassengersDetails_Get";
                var values = new
                {
                    BookingId = bookingId,
                };

                try
                {
                    // Use Query method to get a list of results
                    List<AddFlightPassengersDetails> paxDetailsList = connection.Query<AddFlightPassengersDetails>(storedProcedureName, values, commandType: CommandType.StoredProcedure).ToList();

                    return paxDetailsList;
                }
                catch (SqlException sqlEx)
                {
                    // Handle exceptions
                    Console.WriteLine($"SQL Exception: {sqlEx.Message}");
                    return null; // or throw an exception, log, etc., based on your application's requirements
                }
            }
        }

        //*********************************End***********plasmaTech***********************//
        #endregion

        #region get method of cable Car
        public static string GetMethod_CableCarWeb(string ApiName, string requestdata)
        {
            try
            {
                string responseStr = "";

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
                request.ContentType = "application/json";
                request.ContentLength = bytes.Length;
                request.Method = "Get";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;
                ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
                request.Headers["Authorization"] = CableCarAuthentication;
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (Stream stream = response.GetResponseStream())
                    {
                        responseStr = new StreamReader(stream).ReadToEnd();
                        stream.Flush();
                        stream.Close();
                    }
                }

                return responseStr;
            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        #endregion Get Method of CableCar
        #region Post method of Cable car
        public static string PostMethodCableCar(string ApiName, string transactionId, object ticketdetails, string User, string customerWalletId, string Amount, string UserInput, string Requestdata)
        {
            try
            {
                string responseStr = "";
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                var payCableTransaction = new PayCableTransaction
                {
                    TransactionId = transactionId,
                    TicketDetails = ticketdetails,
                    User = User,
                    TotalPrice = double.Parse(Amount),
                    CustomerWalletID = customerWalletId,
                };
                object cabledata = Newtonsoft.Json.JsonConvert.SerializeObject(payCableTransaction);
                var data = cabledata.ToString();
                bytes = System.Text.Encoding.ASCII.GetBytes(data);
                request.ContentType = "application/json";
                byte[] requestBodyBytes = null;
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;

                ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
                request.Headers["Authorization"] = CableCarAuthentication;
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();
                }
                else
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();

                }
                return responseStr;
            }

            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }

            catch (Exception ex)
            {
                return ex.Message;
            }
        }
        #endregion PostMethod 
        #region for tikcet 
        public static string PostTicketcableCar(string ApiName, string transactionId, string User, string customerWalletId, string UserInput, object paycabledata)
        {
            try
            {
                string responseStr = "";

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                var data = paycabledata.ToString();
                bytes = System.Text.Encoding.ASCII.GetBytes(data);
                request.ContentType = "application/json";
                byte[] requestBodyBytes = null;
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;

                ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
                request.Headers["Authorization"] = CableCarAuthentication;
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();
                }
                else
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();

                }
                return responseStr;
            }

            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }

            catch (Exception ex)
            {
                return ex.Message;
            }
        }
        public static string PostReconcileCable(string ApiName, string transactionId, string User, string customerWalletId, string UserInput, object paycabledata)
        {
            try
            {
                string responseStr = "";

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                byte[] bytes = null;
                var data = paycabledata.ToString();
                bytes = System.Text.Encoding.ASCII.GetBytes(data);
                request.ContentType = "application/json";
                byte[] requestBodyBytes = null;
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;

                ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
                request.Headers["Authorization"] = CableCarAuthentication;
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();
                }
                else
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();

                }
                return responseStr;
            }

            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        string text = reader.ReadToEnd();
                        return text;
                    }
                }
            }

            catch (Exception ex)
            {
                return ex.Message;
            }
        }




        #endregion

        // ***********************  Bussewa Service ***************************

        public static string GetMethod_BusSewaWeb(string ApiName, string requestdata)
        {
            //try
            //{
            string responseStr = "";
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
            byte[] bytes = null;
            bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
            request.ContentType = "application/json";
            request.ContentLength = bytes.Length;
            request.Method = "GET";
            ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
            request.Timeout = System.Threading.Timeout.Infinite;
            //request.Headers["Authorization"] = "Basic " + createBase64(BusSewa_user + ":" + BusSewa_pass); //VendorApi_CommonHelper.EVENTS_USER_NAME;


            // request.Headers["API-KEY"] = VendorApi_CommonHelper.EVENTS_API_KEY;

            //STAGING
            //request.Headers["Authorization"] = "Basic TVlQQVk6bVlQQHlAMjQ0Iw==";
            //request.Headers["Authorization"] = "Basic bXlwYXk6bXlwYXlAMTIzJCQ=";
            request.Headers["Authorization"] = BusSewa_Authorization;
            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                using (Stream stream = response.GetResponseStream())
                {
                    responseStr = new StreamReader(stream).ReadToEnd();
                    stream.Flush();
                    stream.Close();
                }
            }

            return responseStr;
            //}
            //catch (WebException e)
            //{
            //    if (e != null)
            //    {
            //        return e.Message.ToString();
            //    }
            //    else
            //    {
            //        using (WebResponse response = e.Response)
            //        {
            //            HttpWebResponse httpResponse = (HttpWebResponse)response;
            //            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
            //            using (Stream data = response.GetResponseStream())
            //            using (var reader = new StreamReader(data))
            //            {
            //                string text = reader.ReadToEnd();
            //                return text;
            //            }
            //        }
            //    }

            //}
            //catch (Exception ex)
            //{
            //    return ex.Message;
            //}
        }
        public static string PostMethod_BusSewaWeb(string ApiName, string requestdata)
        {
            //try
            //{
            string responseStr = "";
            //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;
            byte[] bytes = null;
            bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
            request.ContentType = "application/json";
            request.ContentLength = bytes.Length;
            request.Method = "POST";
            request.KeepAlive = false;
            request.Timeout = System.Threading.Timeout.Infinite;
            //request.Headers["Authorization"] = "Basic TVlQQVk6bVlQQHlAMjQ0Iw==";
            // request.Headers["Authorization"] = "Basic bXlwYXk6bXlwYXlAMTIzJCQ=";
            request.Headers["Authorization"] = BusSewa_Authorization;
            Stream requestStream = request.GetRequestStream();
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Flush();
            requestStream.Close();

            HttpWebResponse response = default(HttpWebResponse);
            response = (HttpWebResponse)request.GetResponse();
            if (response.StatusCode == HttpStatusCode.OK)
            {
                Stream responseStream = response.GetResponseStream();
                responseStr = new StreamReader(responseStream).ReadToEnd();
            }
            else
            {
                Stream responseStream = response.GetResponseStream();
                responseStr = new StreamReader(responseStream).ReadToEnd();

            }
            return responseStr;
            //}
            //catch (WebException e)
            //{
            //    if (e.Response == null && e.Message != null)
            //    {
            //        Common.Common.AddLogs("Error KhaltiPost: ApiName " + ApiName + ". Request: " + requestdata + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
            //        return e.Message;
            //    }
            //    else
            //    {
            //        using (WebResponse response = e.Response)
            //        {
            //            HttpWebResponse httpResponse = (HttpWebResponse)response;
            //            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
            //            using (Stream data = response.GetResponseStream())
            //            using (var reader = new StreamReader(data))
            //            {
            //                string text = reader.ReadToEnd();
            //                return text;
            //            }
            //        }
            //    }

            //}
            //catch (Exception ex)
            //{
            //    return ex.Message;
            //}
        }


        public static string PostMethod_HoroscopeDetails(string ApiName, string requestdata)
        {
            //try
            //{
            string responseStr = "";
            //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;
            byte[] bytes = null;
            bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
            request.ContentType = "application/json";
            request.ContentLength = bytes.Length;
            request.Method = "POST";
            request.KeepAlive = false;
            request.Timeout = System.Threading.Timeout.Infinite;
            request.Headers["x-client-user-token"] = "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Ik1haGVzaHdvciIsImNsaWVudGlkIjoiZGQ2ODY0NzItZGY5NC00OTU0LTkzZjktMzBhOGY3YjM4YjE4IiwiZW1haWxpZCI6Im1haGVzaHdvcmxhbWljaGhhbmUwN0BnbWFpbC5jb20iLCJtb2JpbGUiOiI5ODQwNTAwOTIwIiwibmJmIjoxNzAzMTMyMjc2LCJleHAiOjE3MDMyMTg2NzYsImlhdCI6MTcwMzEzMjI3NiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwMSIsImF1ZCI6ImFwcGNsaWVudCJ9.I-bUiQpv-gAs4v4E4dMvtvlTfrnfBQDiyvlUtC3VPsHsDM9hnKg7w2Ln3t5Kq4fLfdEQYXtIumwN9b6CZQJRPA";

            Stream requestStream = request.GetRequestStream();
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Flush();
            requestStream.Close();

            HttpWebResponse response = default(HttpWebResponse);
            response = (HttpWebResponse)request.GetResponse();
            if (response.StatusCode == HttpStatusCode.OK)
            {
                Stream responseStream = response.GetResponseStream();
                responseStr = new StreamReader(responseStream).ReadToEnd();
            }
            else
            {
                Stream responseStream = response.GetResponseStream();
                responseStr = new StreamReader(responseStream).ReadToEnd();

            }
            return responseStr;
            //}
            //catch (WebException e)
            //{
            //    if (e.Response == null && e.Message != null)
            //    {
            //        Common.Common.AddLogs("Error KhaltiPost: ApiName " + ApiName + ". Request: " + requestdata + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
            //        return e.Message;
            //    }
            //    else
            //    {
            //        using (WebResponse response = e.Response)
            //        {
            //            HttpWebResponse httpResponse = (HttpWebResponse)response;
            //            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
            //            using (Stream data = response.GetResponseStream())
            //            using (var reader = new StreamReader(data))
            //            {
            //                string text = reader.ReadToEnd();
            //                return text;
            //            }
            //        }
            //    }

            //}
            //catch (Exception ex)
            //{
            //    return ex.Message;
            //}
        }
        //public static DownloadPDF RequestBus_DOWNLOAD_TICKET(string LogID)
        //{
        //    DownloadPDF objRes = new DownloadPDF();
        //    try
        //    {
        //       // Reference = new CommonHelpers().GenerateUniqueId();
        //        //string LookupURL = $"{KhaltiAPIURL}/{LogID}?token={Req_TokenLive}&reference={Reference}";
        //        //string basepath = Common.Common.GetBasePath(relativepath);
        //        string originalFileName = $"BusTicket{System.DateTime.UtcNow.ToFileTimeUtc()}.pdf";
        //       // fullPath = System.IO.Path.Combine(basepath, originalFileName);
        //        Receipt receipt = new Receipt();
        //        //get data bus sewa passenger
        //        MyPay.Models.Common.CommonHelpers commonHelpers = new MyPay.Models.Common.CommonHelpers();
        //        Hashtable HT = new Hashtable();
        //        HT.Add("flag", "get");
        //        HT.Add("Id", LogID);
        //        System.Data.DataTable dt = new System.Data.DataTable();
        //        dt = commonHelpers.GetDataFromStoredProcedure("sp_BusDetail", HT);
        //        if (dt.Rows.Count > 0)
        //        {
        //            DataRow row = dt.Rows[0];
        //            receipt.from = !string.IsNullOrEmpty(row["TripFrom"].ToString()) ? row["TripFrom"].ToString() : "";
        //            receipt.to = !string.IsNullOrEmpty(row["TripTo"].ToString()) ? row["TripTo"].ToString() : "";
        //            receipt.ticketSrlNo = !string.IsNullOrEmpty(row["TicketSerialNo"].ToString()) ? row["TicketSerialNo"].ToString() : "";
        //            receipt.seat = !string.IsNullOrEmpty(row["Seat"].ToString()) ? row["Seat"].ToString() : "";
        //            receipt.BookingDate = !string.IsNullOrEmpty(row["BookingDate"].ToString()) ? Convert.ToDateTime(row["BookingDate"]).ToString("yyyy-MM-dd") : "";
        //            receipt.Time = !string.IsNullOrEmpty(row["DepartureTime"].ToString()) ? Convert.ToDateTime(row["DepartureTime"]).ToString("h:mm tt") : "";
        //            receipt.date = !string.IsNullOrEmpty(row["DepartureDate"].ToString()) ? Convert.ToDateTime(row["DepartureDate"].ToString()).ToString("yyyy-MM-dd") : "";
        //            //receipt.date = !string.IsNullOrEmpty(row["DepartureDate"].ToString()) ? Convert.ToDateTime(Convert.ToDateTime(row["DepartureDate"].ToString()).ToString("yyyy-MM-dd") + ' ' + row["DepartureTime"].ToString()).ToString("yyyy-MM-dd HH:mm") : "";
        //            receipt.boardingPoint = !string.IsNullOrEmpty(row["PassengerBoardingPoint"].ToString()) ? row["PassengerBoardingPoint"].ToString() : "";
        //            receipt.Operator = !string.IsNullOrEmpty(row["Operator"].ToString()) ? row["Operator"].ToString() : "";
        //            receipt.BusType = !string.IsNullOrEmpty(row["BusType"].ToString()) ? row["BusType"].ToString() : "";
        //            receipt.BusNo = !string.IsNullOrEmpty(row["BusNo"].ToString()) ? row["BusNo"].ToString() : "";
        //            receipt.PaymentStatus = !string.IsNullOrEmpty(row["PaymentStatus"].ToString()) ? row["PaymentStatus"].ToString() : "";
        //            receipt.Platform = !string.IsNullOrEmpty(row["Platform"].ToString()) ? row["Platform"].ToString() : "";
        //            receipt.Amount = !string.IsNullOrEmpty(row["Amount"].ToString()) ? row["Amount"].ToString() : "0.00";
        //            receipt.email = !string.IsNullOrEmpty(row["email"].ToString()) ? row["email"].ToString() : "";
        //            receipt.name = !string.IsNullOrEmpty(row["PassengerName"].ToString()) ? row["PassengerName"].ToString() : "";
        //            receipt.contactNumber = !string.IsNullOrEmpty(row["ContactNumber"].ToString()) ? row["ContactNumber"].ToString() : "";
        //            receipt.contactInfo = !string.IsNullOrEmpty(row["operatorcontactInfo"].ToString()) ? row["operatorcontactInfo"].ToString() : "";
        //            //receipt.boardingPoint = !string.IsNullOrEmpty(row["BoardingPoint"].ToString()) ? row["BoardingPoint"].ToString() : "";
        //            receipt.TransactionDate = !string.IsNullOrEmpty(row["TransactionDate"].ToString()) ? row["TransactionDate"].ToString() : "";
        //            receipt.ServiceCharge = !string.IsNullOrEmpty(row["ServiceCharge"].ToString()) ? row["ServiceCharge"].ToString() : "0.00";
        //            receipt.Type = !string.IsNullOrEmpty(row["Type"].ToString()) ? row["Type"].ToString() : "";
        //            receipt.FirstName = !string.IsNullOrEmpty(row["FirstName"].ToString()) ? row["FirstName"].ToString() : "";
        //            receipt.LastName = !string.IsNullOrEmpty(row["LastName"].ToString()) ? row["LastName"].ToString() : "";
        //            receipt.MiddleName = !string.IsNullOrEmpty(row["MiddleName"].ToString()) ? row["MiddleName"].ToString() : "";
        //            receipt.userContact = !string.IsNullOrEmpty(row["userContact"].ToString()) ? row["userContact"].ToString() : "";
        //            var name = !string.IsNullOrEmpty(receipt.MiddleName) ? receipt.FirstName + ' ' + receipt.MiddleName + ' ' + receipt.LastName : receipt.FirstName + ' ' + receipt.LastName;

        //            string[] dataArraySeat = JsonConvert.DeserializeObject<string[]>(receipt.seat);
        //            string commaSeparatedDataSeat = string.Join(", ", dataArraySeat);

        //            string[] seats = commaSeparatedDataSeat.Split(new[] { ", " }, StringSplitOptions.RemoveEmptyEntries);
        //            int numberOfSeats = seats.Length;

        //            // Add code for New PDF ticket
        //            #region New Ticket PDF
        //            originalFileName = $"Bus_Ticket{System.DateTime.UtcNow.ToFileTimeUtc()}.pdf";
        //            //fullPath = System.IO.Path.Combine(basepath, originalFileName);

        //            string mystring = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/Templates/bus-pdf.html"));
        //            string body = mystring;
        //            body = body.Replace("##bustype##", receipt.BusType);
        //            body = body.Replace("##amount##", receipt.Amount);
        //            body = body.Replace("##seatno##", commaSeparatedDataSeat);
        //            body = body.Replace("##busno##", receipt.BusNo);
        //            body = body.Replace("##depaturetime##", receipt.Time);
        //            body = body.Replace("##bookingdate##", receipt.BookingDate);
        //            body = body.Replace("##journeydate##", receipt.date);
        //            body = body.Replace("##ticketno##", receipt.ticketSrlNo);
        //            body = body.Replace("##from##", receipt.from);
        //            body = body.Replace("##to##", receipt.to);
        //            body = body.Replace("##ticketno##", receipt.ticketSrlNo);
        //            body = body.Replace("##Noofpassenger##", Convert.ToString(numberOfSeats));
        //            body = body.Replace("##purchasedby##", name);
        //            body = body.Replace("##boardingpoint##", receipt.boardingPoint);
        //            body = body.Replace("##contactno##", receipt.contactNumber);
        //            body = body.Replace("##LogID##", LogID);
        //            body = body.Replace("##SupportEmail##", Common.Common.FromEmail);
        //            body = body.Replace("##LogoImage##", Common.Common.LiveSiteUrl + "/Content/images/logonew.png");
        //            body = body.Replace("##LiveUrl##", Common.Common.LiveSiteUrl_User);
        //            body = body.Replace("##tel1##", Common.Common.tel1);
        //            body = body.Replace("##tel2##", Common.Common.tel2);
        //            body = body.Replace("##tel3##", Common.Common.tel3);
        //            body = body.Replace("##tel4##", Common.Common.tel4);
        //            body = body.Replace("##WebsiteName##", Common.Common.WebsiteName);
        //            body = body.Replace("##WebsiteEmail##", Common.Common.WebsiteEmail);
        //            body = body.Replace("##SupportEmail##", Common.Common.FromEmail);

        //            System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName + ".html")).Dispose();
        //            System.IO.File.WriteAllText(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName + ".html"), body);

        //            System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName)).Dispose();

        //            FileInfo htmlsource = new FileInfo(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName + ".html"));
        //            FileInfo pdfDest = new FileInfo(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName));

        //            // pdfHTML specific code
        //            ConverterProperties converterProperties = new ConverterProperties();
        //            HtmlConverter.ConvertToPdf(htmlsource, pdfDest, converterProperties);

        //            Response.ContentType = "application/pdf";
        //            Response.AddHeader("content-disposition", "attachment;filename=" + uw.TransactionUniqueId + ".pdf");
        //            Response.Cache.SetCacheability(HttpCacheability.NoCache);
        //            Response.WriteFile(Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName + ".pdf"));
        //            //Response.End();
        //            Response.Flush(); // Sends all currently buffered output to the client.

        //            #endregion

        //        }

        //        return objRes;

        //    }
        //    catch (WebException e)
        //    {
        //        using (WebResponse response = e.Response)
        //        {
        //            HttpWebResponse httpResponse = (HttpWebResponse)response;
        //            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
        //            using (Stream data = response.GetResponseStream())
        //            using (var reader = new StreamReader(data))
        //            {
        //                var json = reader.ReadToEnd();
        //                var Exceptiondata = (JObject)JsonConvert.DeserializeObject(json);
        //                string Error = ((Exceptiondata["error"] == null) ? String.Empty : Convert.ToString(Exceptiondata["error"])); string message = ((Exceptiondata["message"] == null) ? String.Empty : Convert.ToString(Exceptiondata["message"]));
        //                string Details = String.Empty;
        //                Details = ((Exceptiondata["details"] == null) ? String.Empty : Convert.ToString(Exceptiondata["details"]));
        //                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ("Request Failed " + Details + " " + Error + " " + message) : objRes.Message;
        //                return objRes;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        objRes.status = false;
        //        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
        //        return objRes;
        //    }

        //}

        public static DownloadPDF RequestBus_DOWNLOAD_TICKET(string Reference, string MemberId, string LogID, string relativepath, ref string fullPath, string KhaltiAPIURL)
        {
            DownloadPDF objRes = new DownloadPDF();
            try
            {
                Reference = new CommonHelpers().GenerateUniqueId();
                string LookupURL = $"{KhaltiAPIURL}/{LogID}?token={Req_TokenLive}&reference={Reference}";
                string basepath = Common.Common.GetBasePath(relativepath);
                string originalFileName = $"BusTicket{System.DateTime.UtcNow.ToFileTimeUtc()}.pdf";
                fullPath = System.IO.Path.Combine(basepath, originalFileName);
                Receipt receipt = new Receipt();
                //get data bus sewa passenger
                MyPay.Models.Common.CommonHelpers commonHelpers = new MyPay.Models.Common.CommonHelpers();
                Hashtable HT = new Hashtable();
                HT.Add("flag", "get");
                HT.Add("Id", LogID);
                System.Data.DataTable dt = new System.Data.DataTable();
                dt = commonHelpers.GetDataFromStoredProcedure("sp_BusDetail", HT);
                if (dt.Rows.Count > 0)
                {
                    DataRow row = dt.Rows[0];
                    receipt.from = !string.IsNullOrEmpty(row["TripFrom"].ToString()) ? row["TripFrom"].ToString() : "";
                    receipt.to = !string.IsNullOrEmpty(row["TripTo"].ToString()) ? row["TripTo"].ToString() : "";
                    receipt.ticketSrlNo = !string.IsNullOrEmpty(row["TicketSerialNo"].ToString()) ? row["TicketSerialNo"].ToString() : "";
                    receipt.seat = !string.IsNullOrEmpty(row["Seat"].ToString()) ? row["Seat"].ToString() : "";
                    receipt.BookingDate = !string.IsNullOrEmpty(row["BookingDate"].ToString()) ? Convert.ToDateTime(row["BookingDate"]).ToString("yyyy-MM-dd") : "";
                    receipt.Time = !string.IsNullOrEmpty(row["DepartureTime"].ToString()) ? Convert.ToDateTime(row["DepartureTime"]).ToString("h:mm tt") : "";
                    receipt.date = !string.IsNullOrEmpty(row["DepartureDate"].ToString()) ? Convert.ToDateTime(row["DepartureDate"].ToString()).ToString("yyyy-MM-dd") : "";
                    //receipt.date = !string.IsNullOrEmpty(row["DepartureDate"].ToString()) ? Convert.ToDateTime(Convert.ToDateTime(row["DepartureDate"].ToString()).ToString("yyyy-MM-dd") + ' ' + row["DepartureTime"].ToString()).ToString("yyyy-MM-dd HH:mm") : "";
                    receipt.boardingPoint = !string.IsNullOrEmpty(row["PassengerBoardingPoint"].ToString()) ? row["PassengerBoardingPoint"].ToString() : "";
                    receipt.Operator = !string.IsNullOrEmpty(row["Operator"].ToString()) ? row["Operator"].ToString() : "";
                    receipt.BusType = !string.IsNullOrEmpty(row["BusType"].ToString()) ? row["BusType"].ToString() : "";
                    receipt.BusNo = !string.IsNullOrEmpty(row["BusNo"].ToString()) ? row["BusNo"].ToString() : "";
                    receipt.PaymentStatus = !string.IsNullOrEmpty(row["PaymentStatus"].ToString()) ? row["PaymentStatus"].ToString() : "";
                    receipt.Platform = !string.IsNullOrEmpty(row["Platform"].ToString()) ? row["Platform"].ToString() : "";
                    receipt.Amount = !string.IsNullOrEmpty(row["Amount"].ToString()) ? row["Amount"].ToString() : "0.00";
                    receipt.email = !string.IsNullOrEmpty(row["email"].ToString()) ? row["email"].ToString() : "";
                    receipt.name = !string.IsNullOrEmpty(row["PassengerName"].ToString()) ? row["PassengerName"].ToString() : "";
                    receipt.contactNumber = !string.IsNullOrEmpty(row["ContactNumber"].ToString()) ? row["ContactNumber"].ToString() : "";
                    receipt.contactInfo = !string.IsNullOrEmpty(row["operatorcontactInfo"].ToString()) ? row["operatorcontactInfo"].ToString() : "";
                    //receipt.boardingPoint = !string.IsNullOrEmpty(row["BoardingPoint"].ToString()) ? row["BoardingPoint"].ToString() : "";
                    receipt.TransactionDate = !string.IsNullOrEmpty(row["TransactionDate"].ToString()) ? row["TransactionDate"].ToString() : "";
                    receipt.ServiceCharge = !string.IsNullOrEmpty(row["ServiceCharge"].ToString()) ? row["ServiceCharge"].ToString() : "0.00";
                    receipt.Type = !string.IsNullOrEmpty(row["Type"].ToString()) ? row["Type"].ToString() : "";
                    receipt.FirstName = !string.IsNullOrEmpty(row["FirstName"].ToString()) ? row["FirstName"].ToString() : "";
                    receipt.LastName = !string.IsNullOrEmpty(row["LastName"].ToString()) ? row["LastName"].ToString() : "";
                    receipt.MiddleName = !string.IsNullOrEmpty(row["MiddleName"].ToString()) ? row["MiddleName"].ToString() : "";
                    receipt.userContact = !string.IsNullOrEmpty(row["userContact"].ToString()) ? row["userContact"].ToString() : "";
                    var name = !string.IsNullOrEmpty(receipt.MiddleName) ? receipt.FirstName + ' ' + receipt.MiddleName + ' ' + receipt.LastName : receipt.FirstName + ' ' + receipt.LastName;

                    string[] dataArraySeat = JsonConvert.DeserializeObject<string[]>(receipt.seat);
                    string commaSeparatedDataSeat = string.Join(", ", dataArraySeat);

                    string[] seats = commaSeparatedDataSeat.Split(new[] { ", " }, StringSplitOptions.RemoveEmptyEntries);
                    int numberOfSeats = seats.Length;

                    // Add code for New PDF ticket
                    #region New Ticket PDF
                    originalFileName = $"Bus_Ticket{System.DateTime.UtcNow.ToFileTimeUtc()}.pdf";
                    fullPath = System.IO.Path.Combine(basepath, originalFileName);

                    string mystring = System.IO.File.ReadAllText(HttpContext.Current.Server.MapPath("~/Templates/bus-pdf.html"));
                    string body = mystring;
                    body = body.Replace("##bustype##", receipt.BusType);
                    body = body.Replace("##amount##", receipt.Amount);
                    body = body.Replace("##seatno##", commaSeparatedDataSeat);
                    body = body.Replace("##busno##", receipt.BusNo);
                    body = body.Replace("##depaturetime##", receipt.Time);
                    body = body.Replace("##bookingdate##", receipt.BookingDate);
                    body = body.Replace("##journeydate##", receipt.date);
                    body = body.Replace("##ticketno##", receipt.ticketSrlNo);
                    body = body.Replace("##from##", receipt.from);
                    body = body.Replace("##to##", receipt.to);
                    body = body.Replace("##ticketno##", receipt.ticketSrlNo);
                    body = body.Replace("##Noofpassenger##", Convert.ToString(numberOfSeats));
                    body = body.Replace("##purchasedby##", name);
                    body = body.Replace("##boardingpoint##", receipt.boardingPoint);
                    body = body.Replace("##contactno##", receipt.contactNumber);
                    body = body.Replace("##LogID##", LogID);
                    body = body.Replace("##SupportEmail##", Common.Common.FromEmail);
                    body = body.Replace("##LogoImage##", Common.Common.LiveSiteUrl + "/Content/images/logonew.png");
                    body = body.Replace("##LiveUrl##", Common.Common.LiveSiteUrl_User);
                    body = body.Replace("##tel1##", Common.Common.tel1);
                    body = body.Replace("##tel2##", Common.Common.tel2);
                    body = body.Replace("##tel3##", Common.Common.tel3);
                    body = body.Replace("##tel4##", Common.Common.tel4);
                    body = body.Replace("##WebsiteName##", Common.Common.WebsiteName);
                    body = body.Replace("##WebsiteEmail##", Common.Common.WebsiteEmail);
                    body = body.Replace("##SupportEmail##", Common.Common.FromEmail);

                    System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName + ".html")).Dispose();
                    System.IO.File.WriteAllText(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName + ".html"), body);

                    System.IO.File.Create(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName)).Dispose();

                    FileInfo htmlsource = new FileInfo(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName + ".html"));
                    FileInfo pdfDest = new FileInfo(HttpContext.Current.Server.MapPath("/Content/BusSewaTicketPDF/" + originalFileName));

                    // pdfHTML specific code
                    ConverterProperties converterProperties = new ConverterProperties();
                    HtmlConverter.ConvertToPdf(htmlsource, pdfDest, converterProperties);

                    #endregion
                    objRes.status = true;
                    objRes.Message = "success";
                    objRes.FilePath = Common.Common.LiveApiUrl + relativepath + "/" + originalFileName;
                }
                else
                {
                    objRes.status = false;
                    objRes.Message = "Transaction data not found.";
                    objRes.FilePath = Common.Common.LiveApiUrl + relativepath + "/" + originalFileName;
                }
                return objRes;

            }
            catch (WebException e)
            {
                using (WebResponse response = e.Response)
                {
                    HttpWebResponse httpResponse = (HttpWebResponse)response;
                    Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                    using (Stream data = response.GetResponseStream())
                    using (var reader = new StreamReader(data))
                    {
                        var json = reader.ReadToEnd();
                        var Exceptiondata = (JObject)JsonConvert.DeserializeObject(json);
                        string Error = ((Exceptiondata["error"] == null) ? String.Empty : Convert.ToString(Exceptiondata["error"])); string message = ((Exceptiondata["message"] == null) ? String.Empty : Convert.ToString(Exceptiondata["message"]));
                        string Details = String.Empty;
                        Details = ((Exceptiondata["details"] == null) ? String.Empty : Convert.ToString(Exceptiondata["details"]));
                        objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ("Request Failed " + Details + " " + Error + " " + message) : objRes.Message;
                        return objRes;
                    }
                }
            }
            catch (Exception ex)
            {
                objRes.status = false;
                objRes.Message = String.IsNullOrEmpty(objRes.Message) ? ex.Message : objRes.Message;
                return objRes;
            }

        }


        //***********************  BusSewa***********************************//

        //*********************** NepalPay QR Service ***************************//

        public static string GetMethod_NepalPayQRWeb(string ApiName, string requestdata)
        {
            //try
            //{
            string responseStr = "";
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
            byte[] bytes = null;
            bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
            request.ContentType = "application/json";
            request.ContentLength = bytes.Length;
            request.Method = "Get";
            request.KeepAlive = false;
            request.Timeout = System.Threading.Timeout.Infinite;

            //request.Headers["Authorization"] = "Basic " + createBase64(NepalPayQR_user + ":" + NepalPayQR_pass); //VendorApi_CommonHelper.EVENTS_USER_NAME;                                                                                                         // request.Headers["API-KEY"] = VendorApi_CommonHelper.EVENTS_API_KEY;
            request.Headers["Authorization"] = "Basic bXlwYXk6QWJjZEAxMjM=";
            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                using (Stream stream = response.GetResponseStream())
                {
                    responseStr = new StreamReader(stream).ReadToEnd();
                    stream.Flush();
                    stream.Close();
                }
            }

            return responseStr;

        }
        public static string PostMethod_NepalPayQRAuth(string ApiName, string requestdata, bool IsAuth)
        {

            string responseStr = "";
            //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;
            var username = string.Empty;
            var password = string.Empty;
            var granttype = string.Empty;
            var apitokenurl = string.Empty;
            var auth = string.Empty;
            if (Common.Common.ApplicationEnvironment.IsProduction == true)
            {
                username = VendorApi_CommonHelper.NepalPayQR_userAuth_username_live;
                password = VendorApi_CommonHelper.NepalPayQR_userAuth_password_live;
                granttype = VendorApi_CommonHelper.NepalPayQR_userAuth_grant_type_live;
                //apitokenurl = VendorApi_CommonHelper.NepalPayQR_URL_Prefix_live_token;
                auth = VendorApi_CommonHelper.NepalPayQR_authentication_live;
            }
            else
            {
                username = VendorApi_CommonHelper.NepalPayQR_userAuth_username;
                password = VendorApi_CommonHelper.NepalPayQR_userAuth_password;
                granttype = VendorApi_CommonHelper.NepalPayQR_userAuth_grant_type;
                auth = VendorApi_CommonHelper.NepalPayQR_authentication;
            }
            var queryParam = new Dictionary<string, string>() {
                 { "username", username },
                 { "password", password } ,
                { "grant_type", granttype }
   };

            var endPoint = new Uri(QueryHelpers.AddQueryString(ApiName, queryParam));

            var httpWebRequest = (HttpWebRequest)WebRequest.Create(endPoint);

            httpWebRequest.Method = "POST";
            httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.122 Safari/534.30";
            httpWebRequest.ContentType = "application/x-www-form-urlencoded;charset=utf-8";
            httpWebRequest.KeepAlive = true;
            httpWebRequest.Headers["Authorization"] = auth; //"Basic bXlwYXk6QWJjZEAxMjM=";

            var httpWebReponse = (HttpWebResponse)httpWebRequest.GetResponse();
            var responseReader = new StreamReader(httpWebReponse.GetResponseStream());
            var responseString = responseReader.ReadToEnd();
            return responseString;
        }

        public static string PostMethod_NepalPayQR(string ApiName, string requestdata, string AuthorizationKey)
        {
            string responseStr = "";
            try
            {

                //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;
                byte[] bytes = null;
                bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
                request.ContentType = "application/json";
                request.ContentLength = bytes.Length;
                request.Method = "POST";
                request.KeepAlive = false;
                request.Timeout = System.Threading.Timeout.Infinite;
                request.Headers["Authorization"] = "Bearer " + AuthorizationKey;
                //request.Headers["Authorization"] = "Basic bXlwYXk6QWJjZEAxMjM==";
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Flush();
                requestStream.Close();

                HttpWebResponse response = default(HttpWebResponse);
                response = (HttpWebResponse)request.GetResponse();
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();
                }
                else
                {
                    Stream responseStream = response.GetResponseStream();
                    responseStr = new StreamReader(responseStream).ReadToEnd();

                }



            }
            catch (WebException e)
            {
                if (e.Response == null && e.Message != null)
                {
                    Common.Common.AddLogs("Error KhaltiPost: ApiName " + ApiName + ". Request: " + requestdata + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
                    return e.Message;
                }
                else
                {
                    using (WebResponse response = e.Response)
                    {
                        HttpWebResponse httpResponse = (HttpWebResponse)response;
                        Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
                        using (Stream data = response.GetResponseStream())
                        using (var reader = new StreamReader(data))
                        {
                            string text = reader.ReadToEnd();
                            responseStr = text;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                responseStr = ex.Message;
            }
            return responseStr;
        }


        // ***********************  NepalPay QR  ***********************************


        // ***********************  Bussewa Service ***************************

        public static string GetMethod_TouristBus(string ApiName, string requestdata)
        {
            //try
            //{
            string responseStr = "";
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
            byte[] bytes = null;
            bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
            request.ContentType = "application/json";
            request.ContentLength = bytes.Length;
            request.Method = "GET";
            request.Timeout = System.Threading.Timeout.Infinite;
            var auth = string.Empty;
            if (Common.Common.ApplicationEnvironment.IsProduction == true)
            {

                auth = VendorApi_CommonHelper.TouristBus_Authorization_live;
            }
            else
            {
                auth = VendorApi_CommonHelper.TouristBus_Authorization_local;
            }
            //LOCAL
            request.Headers["Authorization"] = auth;
            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                using (Stream stream = response.GetResponseStream())
                {
                    responseStr = new StreamReader(stream).ReadToEnd();
                    stream.Flush();
                    stream.Close();
                }
            }

            return responseStr;
            //}
            //catch (WebException e)
            //{
            //    if (e != null)
            //    {
            //        return e.Message.ToString();
            //    }
            //    else
            //    {
            //        using (WebResponse response = e.Response)
            //        {
            //            HttpWebResponse httpResponse = (HttpWebResponse)response;
            //            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
            //            using (Stream data = response.GetResponseStream())
            //            using (var reader = new StreamReader(data))
            //            {
            //                string text = reader.ReadToEnd();
            //                return text;
            //            }
            //        }
            //    }

            //}
            //catch (Exception ex)
            //{
            //    return ex.Message;
            //}
        }
        public static string PostMethod_TouristBus(string ApiName, string requestdata)
        {
            //try
            //{
            string responseStr = "";
            //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            HttpWebRequest request = (HttpWebRequest)System.Net.WebRequest.Create(ApiName);
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;
            byte[] bytes = null;
            bytes = System.Text.Encoding.ASCII.GetBytes(requestdata);
            request.ContentType = "application/json";
            request.ContentLength = bytes.Length;
            request.Method = "POST";
            request.KeepAlive = false;
            request.Timeout = System.Threading.Timeout.Infinite;
            var auth = string.Empty;
            if (Common.Common.ApplicationEnvironment.IsProduction == true)
            {

                auth = VendorApi_CommonHelper.TouristBus_Authorization_live;
            }
            else
            {
                auth = VendorApi_CommonHelper.TouristBus_Authorization_local;
            }
            //LOCAL
            request.Headers["Authorization"] = auth;
            //request.Headers["Authorization"] = BusSewa_Authorization;
            Stream requestStream = request.GetRequestStream();
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Flush();
            requestStream.Close();

            HttpWebResponse response = default(HttpWebResponse);
            response = (HttpWebResponse)request.GetResponse();
            if (response.StatusCode == HttpStatusCode.OK)
            {
                Stream responseStream = response.GetResponseStream();
                responseStr = new StreamReader(responseStream).ReadToEnd();
            }
            else
            {
                Stream responseStream = response.GetResponseStream();
                responseStr = new StreamReader(responseStream).ReadToEnd();

            }
            return responseStr;
            //}
            //catch (WebException e)
            //{
            //    if (e.Response == null && e.Message != null)
            //    {
            //        Common.Common.AddLogs("Error KhaltiPost: ApiName " + ApiName + ". Request: " + requestdata + " Response: " + e.Message, false, (int)AddLog.LogType.DBLogs);
            //        return e.Message;
            //    }
            //    else
            //    {
            //        using (WebResponse response = e.Response)
            //        {
            //            HttpWebResponse httpResponse = (HttpWebResponse)response;
            //            Console.WriteLine("Error code: {0}", httpResponse.StatusCode);
            //            using (Stream data = response.GetResponseStream())
            //            using (var reader = new StreamReader(data))
            //            {
            //                string text = reader.ReadToEnd();
            //                return text;
            //            }
            //        }
            //    }

            //}
            //catch (Exception ex)
            //{
            //    return ex.Message;
            //}
        }


        public static string PostMethod_TouristBus(string ApiName, Dictionary<string, string> queryParam)
        {
            string responseStr = "";           
            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Post, ApiName);
            var auth = string.Empty;
            if (Common.Common.ApplicationEnvironment.IsProduction == true)
            {

                auth = VendorApi_CommonHelper.TouristBus_Authorization_live;
            }
            else
            {
                auth = VendorApi_CommonHelper.TouristBus_Authorization_local;
            }
            //LOCAL
            request.Headers.Add("Authorization", auth);

            var content = new MultipartFormDataContent();
            foreach (var kvp in queryParam)
            {
                content.Add(new StringContent(kvp.Value), kvp.Key);

            }
            
            request.Content = content;
            var response = client.SendAsync(request);
            response.Wait();
            var postResult = response.Result;
            var postResultAsString = postResult.Content.ReadAsStringAsync().Result;
            return postResultAsString;

        }

        //***********************  BusSewa***********************************//

    }
}
