//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPay
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyPayEntities : DbContext
    {
        public MyPayEntities()
            : base("name=MyPayEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdminLogin> AdminLogins { get; set; }
        public virtual DbSet<Airline> Airlines { get; set; }
        public virtual DbSet<Airline_Class> Airline_Class { get; set; }
        public virtual DbSet<Airline_Sector> Airline_Sector { get; set; }
        public virtual DbSet<ApiSetting> ApiSettings { get; set; }
        public virtual DbSet<ApiSettingsHistory> ApiSettingsHistories { get; set; }
        public virtual DbSet<AppVersionHistory> AppVersionHistories { get; set; }
        public virtual DbSet<BalanceHistory> BalanceHistories { get; set; }
        public virtual DbSet<BalanceHistoryMerchant> BalanceHistoryMerchants { get; set; }
        public virtual DbSet<BankList> BankLists { get; set; }
        public virtual DbSet<BankListNp> BankListNps { get; set; }
        public virtual DbSet<BankTransaction> BankTransactions { get; set; }
        public virtual DbSet<Cable_Car> Cable_Car { get; set; }
        public virtual DbSet<CableCar_TicketInVoice> CableCar_TicketInVoice { get; set; }
        public virtual DbSet<CardPaymentTransaction> CardPaymentTransactions { get; set; }
        public virtual DbSet<CNTLIST> CNTLISTs { get; set; }
        public virtual DbSet<Commission> Commissions { get; set; }
        public virtual DbSet<CommissionUpdateHistory> CommissionUpdateHistories { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<CouponsHistory> CouponsHistories { get; set; }
        public virtual DbSet<CouponsScratched> CouponsScratcheds { get; set; }
        public virtual DbSet<CurrencyList> CurrencyLists { get; set; }
        public virtual DbSet<DataPackDetail> DataPackDetails { get; set; }
        public virtual DbSet<DealsAndOffer> DealsAndOffers { get; set; }
        public virtual DbSet<DealsAndOffers_Unique> DealsAndOffers_Unique { get; set; }
        public virtual DbSet<DepositOrder> DepositOrders { get; set; }
        public virtual DbSet<EStatementPDFToken> EStatementPDFTokens { get; set; }
        public virtual DbSet<EventDetail> EventDetails { get; set; }
        public virtual DbSet<ExportData> ExportDatas { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<FlightBookingDetail> FlightBookingDetails { get; set; }
        public virtual DbSet<FlightPassengersDetail> FlightPassengersDetails { get; set; }
        public virtual DbSet<FlightSwitchSetting> FlightSwitchSettings { get; set; }
        public virtual DbSet<GiftCashbackHistory> GiftCashbackHistories { get; set; }
        public virtual DbSet<GiftMPCoinsHistory> GiftMPCoinsHistories { get; set; }
        public virtual DbSet<InsuranceDetail> InsuranceDetails { get; set; }
        public virtual DbSet<KYCRemark> KYCRemarks { get; set; }
        public virtual DbSet<KYCStatusHistory> KYCStatusHistories { get; set; }
        public virtual DbSet<log> logs { get; set; }
        public virtual DbSet<Marque> Marques { get; set; }
        public virtual DbSet<MenuAssign> MenuAssigns { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenusAppUser> MenusAppUsers { get; set; }
        public virtual DbSet<Merchant> Merchants { get; set; }
        public virtual DbSet<MerchantBankDetail> MerchantBankDetails { get; set; }
        public virtual DbSet<MerchantCommission> MerchantCommissions { get; set; }
        public virtual DbSet<MerchantCommissionHistory> MerchantCommissionHistories { get; set; }
        public virtual DbSet<MerchantIPAddress> MerchantIPAddresses { get; set; }
        public virtual DbSet<MerchantOrder> MerchantOrders { get; set; }
        public virtual DbSet<MerchantSetting> MerchantSettings { get; set; }
        public virtual DbSet<MerchantWithdrawalRequest> MerchantWithdrawalRequests { get; set; }
        public virtual DbSet<MyPayment> MyPayments { get; set; }
        public virtual DbSet<NEA_Counters> NEA_Counters { get; set; }
        public virtual DbSet<NEA_Details> NEA_Details { get; set; }
        public virtual DbSet<NepalPayQR> NepalPayQRs { get; set; }
        public virtual DbSet<NepalPayQR_Refund> NepalPayQR_Refund { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationBulkSchedulerUpdateHistory> NotificationBulkSchedulerUpdateHistories { get; set; }
        public virtual DbSet<NotificationCampaign> NotificationCampaigns { get; set; }
        public virtual DbSet<NotificationCampaignExcel> NotificationCampaignExcels { get; set; }
        public virtual DbSet<NotificationCampaignExcelData> NotificationCampaignExcelDatas { get; set; }
        public virtual DbSet<NotificationCampaignExcelHistory> NotificationCampaignExcelHistories { get; set; }
        public virtual DbSet<NotificationCampaignHistory> NotificationCampaignHistories { get; set; }
        public virtual DbSet<Occupation> Occupations { get; set; }
        public virtual DbSet<OfferBanner> OfferBanners { get; set; }
        public virtual DbSet<PlasmaTechIssueTicketResDetail> PlasmaTechIssueTicketResDetails { get; set; }
        public virtual DbSet<ProviderLogosList> ProviderLogosLists { get; set; }
        public virtual DbSet<ProviderServiceCategoryList> ProviderServiceCategoryLists { get; set; }
        public virtual DbSet<Purpose> Purposes { get; set; }
        public virtual DbSet<RedeemPoint> RedeemPoints { get; set; }
        public virtual DbSet<ReferEarnImage> ReferEarnImages { get; set; }
        public virtual DbSet<Remittance_API_Requests> Remittance_API_Requests { get; set; }
        public virtual DbSet<Request_Fund> Request_Fund { get; set; }
        public virtual DbSet<RewardPointTransaction> RewardPointTransactions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<ServiceInactiveRemark> ServiceInactiveRemarks { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SettingsHistory> SettingsHistories { get; set; }
        public virtual DbSet<ShareReferLink> ShareReferLinks { get; set; }
        public virtual DbSet<SSF> SSFs { get; set; }
        public virtual DbSet<STLIST> STLISTs { get; set; }
        public virtual DbSet<SubAgentFee> SubAgentFees { get; set; }
        public virtual DbSet<SubAgentFeesHistory> SubAgentFeesHistories { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tbl_BusSewa_details> tbl_BusSewa_details { get; set; }
        public virtual DbSet<tbl_error_log_sql> tbl_error_log_sql { get; set; }
        public virtual DbSet<tbl_Passenger_Detail> tbl_Passenger_Detail { get; set; }
        public virtual DbSet<tbl_passenger_name> tbl_passenger_name { get; set; }
        public virtual DbSet<TicketImage> TicketImages { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<TicketsCategory> TicketsCategories { get; set; }
        public virtual DbSet<TicketsReply> TicketsReplies { get; set; }
        public virtual DbSet<TouristBus_Detail> TouristBus_Detail { get; set; }
        public virtual DbSet<TransactionLimit> TransactionLimits { get; set; }
        public virtual DbSet<TransactionLimitHistory> TransactionLimitHistories { get; set; }
        public virtual DbSet<UserAuthorization> UserAuthorizations { get; set; }
        public virtual DbSet<UserBankDetail> UserBankDetails { get; set; }
        public virtual DbSet<UserDocument> UserDocuments { get; set; }
        public virtual DbSet<UserInActiveRemark> UserInActiveRemarks { get; set; }
        public virtual DbSet<UserOTPAttempt> UserOTPAttempts { get; set; }
        public virtual DbSet<Users_bkp> Users_bkp { get; set; }
        public virtual DbSet<UserSavedPayment> UserSavedPayments { get; set; }
        public virtual DbSet<UsersDeviceRegistration> UsersDeviceRegistrations { get; set; }
        public virtual DbSet<Vendor_API_Requests> Vendor_API_Requests { get; set; }
        public virtual DbSet<Verification> Verifications { get; set; }
        public virtual DbSet<Voting_Orders> Voting_Orders { get; set; }
        public virtual DbSet<VotingCandidate> VotingCandidates { get; set; }
        public virtual DbSet<VotingCompetition> VotingCompetitions { get; set; }
        public virtual DbSet<VotingList> VotingLists { get; set; }
        public virtual DbSet<VotingPackage> VotingPackages { get; set; }
        public virtual DbSet<WalletTransaction> WalletTransactions { get; set; }
        public virtual DbSet<Deleteit> Deleteits { get; set; }
        public virtual DbSet<NCHLService> NCHLServices { get; set; }
        public virtual DbSet<NCHLServicesMapping> NCHLServicesMappings { get; set; }
        public virtual DbSet<Reciept> Reciepts { get; set; }
        public virtual DbSet<RecieptsVendorResponse> RecieptsVendorResponses { get; set; }
        public virtual DbSet<tbl_api_log> tbl_api_log { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Airline_Commissions> Airline_Commissions { get; set; }
        public virtual DbSet<Airline_Commissions_Setup> Airline_Commissions_Setup { get; set; }
    
        [DbFunction("Entities", "getJsonDetails")]
        public virtual IQueryable<getJsonDetails_Result> getJsonDetails(string json)
        {
            var jsonParameter = json != null ?
                new ObjectParameter("json", json) :
                new ObjectParameter("json", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getJsonDetails_Result>("[Entities].[getJsonDetails](@json)", jsonParameter);
        }
    
        [DbFunction("Entities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[Entities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual int GenerateUniqueCoupons(Nullable<int> iteration, Nullable<int> couponType, Nullable<int> campaignID, Nullable<decimal> couponAmount, Nullable<decimal> couponPercentage, Nullable<int> serviceID, Nullable<System.DateTime> validFrom, Nullable<System.DateTime> validTill, Nullable<long> createdBy, string createdByName, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount)
        {
            var iterationParameter = iteration.HasValue ?
                new ObjectParameter("iteration", iteration) :
                new ObjectParameter("iteration", typeof(int));
    
            var couponTypeParameter = couponType.HasValue ?
                new ObjectParameter("CouponType", couponType) :
                new ObjectParameter("CouponType", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(int));
    
            var couponAmountParameter = couponAmount.HasValue ?
                new ObjectParameter("couponAmount", couponAmount) :
                new ObjectParameter("couponAmount", typeof(decimal));
    
            var couponPercentageParameter = couponPercentage.HasValue ?
                new ObjectParameter("couponPercentage", couponPercentage) :
                new ObjectParameter("couponPercentage", typeof(decimal));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(int));
    
            var validFromParameter = validFrom.HasValue ?
                new ObjectParameter("validFrom", validFrom) :
                new ObjectParameter("validFrom", typeof(System.DateTime));
    
            var validTillParameter = validTill.HasValue ?
                new ObjectParameter("validTill", validTill) :
                new ObjectParameter("validTill", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("createdByName", createdByName) :
                new ObjectParameter("createdByName", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("minimumAmount", minimumAmount) :
                new ObjectParameter("minimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("maximumAmount", maximumAmount) :
                new ObjectParameter("maximumAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateUniqueCoupons", iterationParameter, couponTypeParameter, campaignIDParameter, couponAmountParameter, couponPercentageParameter, serviceIDParameter, validFromParameter, validTillParameter, createdByParameter, createdByNameParameter, minimumAmountParameter, maximumAmountParameter);
        }
    
        public virtual int MerchantCableCarUpdate(string flag, string merchantID, string orderId)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var merchantIDParameter = merchantID != null ?
                new ObjectParameter("MerchantID", merchantID) :
                new ObjectParameter("MerchantID", typeof(string));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MerchantCableCarUpdate", flagParameter, merchantIDParameter, orderIdParameter);
        }
    
        public virtual ObjectResult<sp_ActiveUsersNoTxn_Dump_Result> sp_ActiveUsersNoTxn_Dump()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ActiveUsersNoTxn_Dump_Result>("sp_ActiveUsersNoTxn_Dump");
        }
    
        public virtual ObjectResult<sp_AddAirlineCommision_Result> sp_AddAirlineCommision(string flag, Nullable<int> id, Nullable<int> fromSectorId, Nullable<int> toSectorId, Nullable<int> airlineId, Nullable<int> airlineClassId, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<int> genderType, Nullable<int> kycType, Nullable<decimal> cashback_Percentage, Nullable<decimal> mPCoinsDebit, Nullable<decimal> mPCoinsCredit, Nullable<decimal> serviceCharge, Nullable<bool> isCashbackPerTicket, Nullable<decimal> minServiceCharge, Nullable<decimal> maxServiceCharge, Nullable<decimal> minimumCashbackAllowed, Nullable<decimal> maximumCashbackAllowed, string fromDate, string toDate, string createdDate, string updatedDate)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromSectorIdParameter = fromSectorId.HasValue ?
                new ObjectParameter("FromSectorId", fromSectorId) :
                new ObjectParameter("FromSectorId", typeof(int));
    
            var toSectorIdParameter = toSectorId.HasValue ?
                new ObjectParameter("ToSectorId", toSectorId) :
                new ObjectParameter("ToSectorId", typeof(int));
    
            var airlineIdParameter = airlineId.HasValue ?
                new ObjectParameter("AirlineId", airlineId) :
                new ObjectParameter("AirlineId", typeof(int));
    
            var airlineClassIdParameter = airlineClassId.HasValue ?
                new ObjectParameter("AirlineClassId", airlineClassId) :
                new ObjectParameter("AirlineClassId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var genderTypeParameter = genderType.HasValue ?
                new ObjectParameter("GenderType", genderType) :
                new ObjectParameter("GenderType", typeof(int));
    
            var kycTypeParameter = kycType.HasValue ?
                new ObjectParameter("KycType", kycType) :
                new ObjectParameter("KycType", typeof(int));
    
            var cashback_PercentageParameter = cashback_Percentage.HasValue ?
                new ObjectParameter("Cashback_Percentage", cashback_Percentage) :
                new ObjectParameter("Cashback_Percentage", typeof(decimal));
    
            var mPCoinsDebitParameter = mPCoinsDebit.HasValue ?
                new ObjectParameter("MPCoinsDebit", mPCoinsDebit) :
                new ObjectParameter("MPCoinsDebit", typeof(decimal));
    
            var mPCoinsCreditParameter = mPCoinsCredit.HasValue ?
                new ObjectParameter("MPCoinsCredit", mPCoinsCredit) :
                new ObjectParameter("MPCoinsCredit", typeof(decimal));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var isCashbackPerTicketParameter = isCashbackPerTicket.HasValue ?
                new ObjectParameter("IsCashbackPerTicket", isCashbackPerTicket) :
                new ObjectParameter("IsCashbackPerTicket", typeof(bool));
    
            var minServiceChargeParameter = minServiceCharge.HasValue ?
                new ObjectParameter("MinServiceCharge", minServiceCharge) :
                new ObjectParameter("MinServiceCharge", typeof(decimal));
    
            var maxServiceChargeParameter = maxServiceCharge.HasValue ?
                new ObjectParameter("MaxServiceCharge", maxServiceCharge) :
                new ObjectParameter("MaxServiceCharge", typeof(decimal));
    
            var minimumCashbackAllowedParameter = minimumCashbackAllowed.HasValue ?
                new ObjectParameter("MinimumCashbackAllowed", minimumCashbackAllowed) :
                new ObjectParameter("MinimumCashbackAllowed", typeof(decimal));
    
            var maximumCashbackAllowedParameter = maximumCashbackAllowed.HasValue ?
                new ObjectParameter("MaximumCashbackAllowed", maximumCashbackAllowed) :
                new ObjectParameter("MaximumCashbackAllowed", typeof(decimal));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var createdDateParameter = createdDate != null ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(string));
    
            var updatedDateParameter = updatedDate != null ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddAirlineCommision_Result>("sp_AddAirlineCommision", flagParameter, idParameter, fromSectorIdParameter, toSectorIdParameter, airlineIdParameter, airlineClassIdParameter, isActiveParameter, isDeletedParameter, genderTypeParameter, kycTypeParameter, cashback_PercentageParameter, mPCoinsDebitParameter, mPCoinsCreditParameter, serviceChargeParameter, isCashbackPerTicketParameter, minServiceChargeParameter, maxServiceChargeParameter, minimumCashbackAllowedParameter, maximumCashbackAllowedParameter, fromDateParameter, toDateParameter, createdDateParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<sp_AdminDashboard_Get_Result> sp_AdminDashboard_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, string userId, string userName, string contactNumber, string roleName, Nullable<int> roleId, string firstName, string email, string password, Nullable<long> memberId, Nullable<long> storeId, Nullable<long> equipmentId, Nullable<int> countryId, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string deviceToken, string verificationCode, string sessionId, Nullable<int> stateId, Nullable<long> createdBy, string createdByName, string startDate, string endDate, string type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var deviceTokenParameter = deviceToken != null ?
                new ObjectParameter("DeviceToken", deviceToken) :
                new ObjectParameter("DeviceToken", typeof(string));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminDashboard_Get_Result>("sp_AdminDashboard_Get", idParameter, takeParameter, skipParameter, userIdParameter, userNameParameter, contactNumberParameter, roleNameParameter, roleIdParameter, firstNameParameter, emailParameter, passwordParameter, memberIdParameter, storeIdParameter, equipmentIdParameter, countryIdParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, deviceTokenParameter, verificationCodeParameter, sessionIdParameter, stateIdParameter, createdByParameter, createdByNameParameter, startDateParameter, endDateParameter, typeParameter);
        }
    
        public virtual int sp_AdminLoginPasswordExpire_Update()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AdminLoginPasswordExpire_Update");
        }
    
        public virtual int sp_AdminUser_AddNew(string firstName, string address, string city, string state, Nullable<int> countryId, string contactNumber, string password, string transactionPassword, string userId, string lastName, Nullable<long> memberId, Nullable<long> storeId, Nullable<long> equipmentId, string zipCode, string email, string image, Nullable<int> roleId, string roleName, string ipAddress, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, string storeName, string deviceToken, string verificationCode, string sessionId, Nullable<int> stateId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var transactionPasswordParameter = transactionPassword != null ?
                new ObjectParameter("TransactionPassword", transactionPassword) :
                new ObjectParameter("TransactionPassword", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(long));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            var deviceTokenParameter = deviceToken != null ?
                new ObjectParameter("DeviceToken", deviceToken) :
                new ObjectParameter("DeviceToken", typeof(string));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AdminUser_AddNew", firstNameParameter, addressParameter, cityParameter, stateParameter, countryIdParameter, contactNumberParameter, passwordParameter, transactionPasswordParameter, userIdParameter, lastNameParameter, memberIdParameter, storeIdParameter, equipmentIdParameter, zipCodeParameter, emailParameter, imageParameter, roleIdParameter, roleNameParameter, ipAddressParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, storeNameParameter, deviceTokenParameter, verificationCodeParameter, sessionIdParameter, stateIdParameter);
        }
    
        public virtual ObjectResult<sp_AdminUser_Datatable_Result> sp_AdminUser_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> createdBy, string name, Nullable<int> roleId, string email, string contactNumber)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminUser_Datatable_Result>("sp_AdminUser_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, createdByParameter, nameParameter, roleIdParameter, emailParameter, contactNumberParameter);
        }
    
        public virtual ObjectResult<sp_AdminUser_Get_Result> sp_AdminUser_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, string userId, string userName, string contactNumber, string roleName, Nullable<int> roleId, string firstName, string email, string password, Nullable<long> memberId, Nullable<long> storeId, Nullable<long> equipmentId, Nullable<int> countryId, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string deviceToken, string verificationCode, string sessionId, Nullable<int> stateId, Nullable<long> createdBy, string createdByName, string startDate, string endDate, Nullable<int> checkPasswordExpired)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var deviceTokenParameter = deviceToken != null ?
                new ObjectParameter("DeviceToken", deviceToken) :
                new ObjectParameter("DeviceToken", typeof(string));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkPasswordExpiredParameter = checkPasswordExpired.HasValue ?
                new ObjectParameter("CheckPasswordExpired", checkPasswordExpired) :
                new ObjectParameter("CheckPasswordExpired", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminUser_Get_Result>("sp_AdminUser_Get", idParameter, takeParameter, skipParameter, userIdParameter, userNameParameter, contactNumberParameter, roleNameParameter, roleIdParameter, firstNameParameter, emailParameter, passwordParameter, memberIdParameter, storeIdParameter, equipmentIdParameter, countryIdParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, deviceTokenParameter, verificationCodeParameter, sessionIdParameter, stateIdParameter, createdByParameter, createdByNameParameter, startDateParameter, endDateParameter, checkPasswordExpiredParameter);
        }
    
        public virtual int sp_AdminUser_Update(Nullable<long> id, string firstName, string address, string city, string state, Nullable<int> countryId, string contactNumber, string password, string transactionPassword, string userId, string lastName, Nullable<long> memberId, Nullable<long> storeId, Nullable<long> equipmentId, string zipCode, string email, string image, Nullable<int> roleId, string roleName, string ipAddress, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, string storeName, string deviceToken, string verificationCode, string sessionId, Nullable<int> stateId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var transactionPasswordParameter = transactionPassword != null ?
                new ObjectParameter("TransactionPassword", transactionPassword) :
                new ObjectParameter("TransactionPassword", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(long));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(long));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            var deviceTokenParameter = deviceToken != null ?
                new ObjectParameter("DeviceToken", deviceToken) :
                new ObjectParameter("DeviceToken", typeof(string));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AdminUser_Update", idParameter, firstNameParameter, addressParameter, cityParameter, stateParameter, countryIdParameter, contactNumberParameter, passwordParameter, transactionPasswordParameter, userIdParameter, lastNameParameter, memberIdParameter, storeIdParameter, equipmentIdParameter, zipCodeParameter, emailParameter, imageParameter, roleIdParameter, roleNameParameter, ipAddressParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, storeNameParameter, deviceTokenParameter, verificationCodeParameter, sessionIdParameter, stateIdParameter);
        }
    
        public virtual ObjectResult<sp_AirlineList_Get_Result> sp_AirlineList_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, string airlineName, Nullable<int> checkActive, Nullable<int> roleId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var airlineNameParameter = airlineName != null ?
                new ObjectParameter("AirlineName", airlineName) :
                new ObjectParameter("AirlineName", typeof(string));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AirlineList_Get_Result>("sp_AirlineList_Get", idParameter, takeParameter, skipParameter, airlineNameParameter, checkActiveParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<sp_AirlinesCommission_Datatable_Result> sp_AirlinesCommission_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkActive, Nullable<int> id)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AirlinesCommission_Datatable_Result>("sp_AirlinesCommission_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_AirlinesList_Datatable_Result> sp_AirlinesList_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkActive, Nullable<int> id)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AirlinesList_Datatable_Result>("sp_AirlinesList_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkActiveParameter, idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_APIDealsandOffers_Get_Result> sp_APIDealsandOffers_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> checkKycStatus, Nullable<int> checkGenderStatus, Nullable<int> checkRedirectType, Nullable<long> memberId, string scheduleDateTime)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkKycStatusParameter = checkKycStatus.HasValue ?
                new ObjectParameter("CheckKycStatus", checkKycStatus) :
                new ObjectParameter("CheckKycStatus", typeof(int));
    
            var checkGenderStatusParameter = checkGenderStatus.HasValue ?
                new ObjectParameter("CheckGenderStatus", checkGenderStatus) :
                new ObjectParameter("CheckGenderStatus", typeof(int));
    
            var checkRedirectTypeParameter = checkRedirectType.HasValue ?
                new ObjectParameter("CheckRedirectType", checkRedirectType) :
                new ObjectParameter("CheckRedirectType", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var scheduleDateTimeParameter = scheduleDateTime != null ?
                new ObjectParameter("ScheduleDateTime", scheduleDateTime) :
                new ObjectParameter("ScheduleDateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_APIDealsandOffers_Get_Result>("sp_APIDealsandOffers_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, checkKycStatusParameter, checkGenderStatusParameter, checkRedirectTypeParameter, memberIdParameter, scheduleDateTimeParameter);
        }
    
        public virtual ObjectResult<sp_ApiSettingsHistory_Datatable_Result> sp_ApiSettingsHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> bankTransferType, string startDate, string endDate, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var bankTransferTypeParameter = bankTransferType.HasValue ?
                new ObjectParameter("BankTransferType", bankTransferType) :
                new ObjectParameter("BankTransferType", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ApiSettingsHistory_Datatable_Result>("sp_ApiSettingsHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, bankTransferTypeParameter, startDateParameter, endDateParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ApiSettingsHistory_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> bankTransferType, string startDate, string endDate, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var bankTransferTypeParameter = bankTransferType.HasValue ?
                new ObjectParameter("BankTransferType", bankTransferType) :
                new ObjectParameter("BankTransferType", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ApiSettingsHistory_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, bankTransferTypeParameter, startDateParameter, endDateParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter);
        }
    
        public virtual ObjectResult<sp_ApiSettingsHistory_Get_Result> sp_ApiSettingsHistory_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> bankTransferType, string startDate, string endDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var bankTransferTypeParameter = bankTransferType.HasValue ?
                new ObjectParameter("BankTransferType", bankTransferType) :
                new ObjectParameter("BankTransferType", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ApiSettingsHistory_Get_Result>("sp_ApiSettingsHistory_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, bankTransferTypeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_AppVersionHistory_AddNew(string android, string iOS, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive)
        {
            var androidParameter = android != null ?
                new ObjectParameter("Android", android) :
                new ObjectParameter("Android", typeof(string));
    
            var iOSParameter = iOS != null ?
                new ObjectParameter("IOS", iOS) :
                new ObjectParameter("IOS", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AppVersionHistory_AddNew", androidParameter, iOSParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_AppVersionHistory_DataTable_Result> sp_AppVersionHistory_DataTable(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, string android, string iOS, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var androidParameter = android != null ?
                new ObjectParameter("Android", android) :
                new ObjectParameter("Android", typeof(string));
    
            var iOSParameter = iOS != null ?
                new ObjectParameter("IOS", iOS) :
                new ObjectParameter("IOS", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AppVersionHistory_DataTable_Result>("sp_AppVersionHistory_DataTable", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, androidParameter, iOSParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AppVersionHistory_DataTableCounter(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, string android, string iOS, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var androidParameter = android != null ?
                new ObjectParameter("Android", android) :
                new ObjectParameter("Android", typeof(string));
    
            var iOSParameter = iOS != null ?
                new ObjectParameter("IOS", iOS) :
                new ObjectParameter("IOS", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AppVersionHistory_DataTableCounter", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, androidParameter, iOSParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_AppVersionHistory_Get_Result> sp_AppVersionHistory_Get(string android, string iOS, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var androidParameter = android != null ?
                new ObjectParameter("Android", android) :
                new ObjectParameter("Android", typeof(string));
    
            var iOSParameter = iOS != null ?
                new ObjectParameter("IOS", iOS) :
                new ObjectParameter("IOS", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AppVersionHistory_Get_Result>("sp_AppVersionHistory_Get", androidParameter, iOSParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int sp_AppVersionHistory_Update(string android, string iOS, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id)
        {
            var androidParameter = android != null ?
                new ObjectParameter("Android", android) :
                new ObjectParameter("Android", typeof(string));
    
            var iOSParameter = iOS != null ?
                new ObjectParameter("IOS", iOS) :
                new ObjectParameter("IOS", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AppVersionHistory_Update", androidParameter, iOSParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_AssignCoupons_Get_Result> sp_AssignCoupons_Get(Nullable<long> memberId, string transactionUniqueId, string uniqueTransactionId, Nullable<int> applyType)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var uniqueTransactionIdParameter = uniqueTransactionId != null ?
                new ObjectParameter("UniqueTransactionId", uniqueTransactionId) :
                new ObjectParameter("UniqueTransactionId", typeof(string));
    
            var applyTypeParameter = applyType.HasValue ?
                new ObjectParameter("ApplyType", applyType) :
                new ObjectParameter("ApplyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AssignCoupons_Get_Result>("sp_AssignCoupons_Get", memberIdParameter, transactionUniqueIdParameter, uniqueTransactionIdParameter, applyTypeParameter);
        }
    
        public virtual ObjectResult<sp_AssignCoupons_Get_temp_Result> sp_AssignCoupons_Get_temp(Nullable<long> memberId, string transactionUniqueId, string uniqueTransactionId, Nullable<int> applyType)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var uniqueTransactionIdParameter = uniqueTransactionId != null ?
                new ObjectParameter("UniqueTransactionId", uniqueTransactionId) :
                new ObjectParameter("UniqueTransactionId", typeof(string));
    
            var applyTypeParameter = applyType.HasValue ?
                new ObjectParameter("ApplyType", applyType) :
                new ObjectParameter("ApplyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AssignCoupons_Get_temp_Result>("sp_AssignCoupons_Get_temp", memberIdParameter, transactionUniqueIdParameter, uniqueTransactionIdParameter, applyTypeParameter);
        }
    
        public virtual ObjectResult<sp_BalanceHistory_Datatable_Result> sp_BalanceHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> id, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string createdByName, string checkTodayDate, Nullable<int> type, Nullable<decimal> totalBalance)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkTodayDateParameter = checkTodayDate != null ?
                new ObjectParameter("CheckTodayDate", checkTodayDate) :
                new ObjectParameter("CheckTodayDate", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var totalBalanceParameter = totalBalance.HasValue ?
                new ObjectParameter("TotalBalance", totalBalance) :
                new ObjectParameter("TotalBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BalanceHistory_Datatable_Result>("sp_BalanceHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, idParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, createdByNameParameter, checkTodayDateParameter, typeParameter, totalBalanceParameter);
        }
    
        public virtual ObjectResult<sp_BalanceHistory_Get_Result> sp_BalanceHistory_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string checkTodayDate, Nullable<int> type, Nullable<decimal> totalBalance)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkTodayDateParameter = checkTodayDate != null ?
                new ObjectParameter("CheckTodayDate", checkTodayDate) :
                new ObjectParameter("CheckTodayDate", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var totalBalanceParameter = totalBalance.HasValue ?
                new ObjectParameter("TotalBalance", totalBalance) :
                new ObjectParameter("TotalBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BalanceHistory_Get_Result>("sp_BalanceHistory_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, checkTodayDateParameter, typeParameter, totalBalanceParameter);
        }
    
        public virtual ObjectResult<sp_BalanceHistoryMerchant_Datatable_Result> sp_BalanceHistoryMerchant_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> id, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string createdByName, string checkTodayDate, Nullable<int> type, Nullable<decimal> totalBalance)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkTodayDateParameter = checkTodayDate != null ?
                new ObjectParameter("CheckTodayDate", checkTodayDate) :
                new ObjectParameter("CheckTodayDate", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var totalBalanceParameter = totalBalance.HasValue ?
                new ObjectParameter("TotalBalance", totalBalance) :
                new ObjectParameter("TotalBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BalanceHistoryMerchant_Datatable_Result>("sp_BalanceHistoryMerchant_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, idParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, createdByNameParameter, checkTodayDateParameter, typeParameter, totalBalanceParameter);
        }
    
        public virtual ObjectResult<sp_BalanceHistoryMerchant_Get_Result> sp_BalanceHistoryMerchant_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string checkTodayDate, Nullable<int> type, Nullable<decimal> totalBalance)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkTodayDateParameter = checkTodayDate != null ?
                new ObjectParameter("CheckTodayDate", checkTodayDate) :
                new ObjectParameter("CheckTodayDate", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var totalBalanceParameter = totalBalance.HasValue ?
                new ObjectParameter("TotalBalance", totalBalance) :
                new ObjectParameter("TotalBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BalanceHistoryMerchant_Get_Result>("sp_BalanceHistoryMerchant_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, checkTodayDateParameter, typeParameter, totalBalanceParameter);
        }
    
        public virtual int sp_BalanceHistoryUpdateMissing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BalanceHistoryUpdateMissing");
        }
    
        public virtual ObjectResult<sp_BankList_Get_Result> sp_BankList_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, string bANK_CD)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var bANK_CDParameter = bANK_CD != null ?
                new ObjectParameter("BANK_CD", bANK_CD) :
                new ObjectParameter("BANK_CD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BankList_Get_Result>("sp_BankList_Get", idParameter, takeParameter, skipParameter, bANK_CDParameter);
        }
    
        public virtual int sp_BankListNps_AddNew(string bANK_CD, string bANK_NAME, string sHORTCODE, string bRANCH_CD, string bRANCH_NAME, string iCON_NAME, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive)
        {
            var bANK_CDParameter = bANK_CD != null ?
                new ObjectParameter("BANK_CD", bANK_CD) :
                new ObjectParameter("BANK_CD", typeof(string));
    
            var bANK_NAMEParameter = bANK_NAME != null ?
                new ObjectParameter("BANK_NAME", bANK_NAME) :
                new ObjectParameter("BANK_NAME", typeof(string));
    
            var sHORTCODEParameter = sHORTCODE != null ?
                new ObjectParameter("SHORTCODE", sHORTCODE) :
                new ObjectParameter("SHORTCODE", typeof(string));
    
            var bRANCH_CDParameter = bRANCH_CD != null ?
                new ObjectParameter("BRANCH_CD", bRANCH_CD) :
                new ObjectParameter("BRANCH_CD", typeof(string));
    
            var bRANCH_NAMEParameter = bRANCH_NAME != null ?
                new ObjectParameter("BRANCH_NAME", bRANCH_NAME) :
                new ObjectParameter("BRANCH_NAME", typeof(string));
    
            var iCON_NAMEParameter = iCON_NAME != null ?
                new ObjectParameter("ICON_NAME", iCON_NAME) :
                new ObjectParameter("ICON_NAME", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BankListNps_AddNew", bANK_CDParameter, bANK_NAMEParameter, sHORTCODEParameter, bRANCH_CDParameter, bRANCH_NAMEParameter, iCON_NAMEParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_BankListNps_DataTable_Result> sp_BankListNps_DataTable(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, string bANK_CD, string bANK_NAME, string sHORTCODE, string bRANCH_CD, string bRANCH_NAME, string iCON_NAME, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var bANK_CDParameter = bANK_CD != null ?
                new ObjectParameter("BANK_CD", bANK_CD) :
                new ObjectParameter("BANK_CD", typeof(string));
    
            var bANK_NAMEParameter = bANK_NAME != null ?
                new ObjectParameter("BANK_NAME", bANK_NAME) :
                new ObjectParameter("BANK_NAME", typeof(string));
    
            var sHORTCODEParameter = sHORTCODE != null ?
                new ObjectParameter("SHORTCODE", sHORTCODE) :
                new ObjectParameter("SHORTCODE", typeof(string));
    
            var bRANCH_CDParameter = bRANCH_CD != null ?
                new ObjectParameter("BRANCH_CD", bRANCH_CD) :
                new ObjectParameter("BRANCH_CD", typeof(string));
    
            var bRANCH_NAMEParameter = bRANCH_NAME != null ?
                new ObjectParameter("BRANCH_NAME", bRANCH_NAME) :
                new ObjectParameter("BRANCH_NAME", typeof(string));
    
            var iCON_NAMEParameter = iCON_NAME != null ?
                new ObjectParameter("ICON_NAME", iCON_NAME) :
                new ObjectParameter("ICON_NAME", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BankListNps_DataTable_Result>("sp_BankListNps_DataTable", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, bANK_CDParameter, bANK_NAMEParameter, sHORTCODEParameter, bRANCH_CDParameter, bRANCH_NAMEParameter, iCON_NAMEParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_BankListNps_DataTableCounter(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, string bANK_CD, string bANK_NAME, string sHORTCODE, string bRANCH_CD, string bRANCH_NAME, string iCON_NAME, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var bANK_CDParameter = bANK_CD != null ?
                new ObjectParameter("BANK_CD", bANK_CD) :
                new ObjectParameter("BANK_CD", typeof(string));
    
            var bANK_NAMEParameter = bANK_NAME != null ?
                new ObjectParameter("BANK_NAME", bANK_NAME) :
                new ObjectParameter("BANK_NAME", typeof(string));
    
            var sHORTCODEParameter = sHORTCODE != null ?
                new ObjectParameter("SHORTCODE", sHORTCODE) :
                new ObjectParameter("SHORTCODE", typeof(string));
    
            var bRANCH_CDParameter = bRANCH_CD != null ?
                new ObjectParameter("BRANCH_CD", bRANCH_CD) :
                new ObjectParameter("BRANCH_CD", typeof(string));
    
            var bRANCH_NAMEParameter = bRANCH_NAME != null ?
                new ObjectParameter("BRANCH_NAME", bRANCH_NAME) :
                new ObjectParameter("BRANCH_NAME", typeof(string));
    
            var iCON_NAMEParameter = iCON_NAME != null ?
                new ObjectParameter("ICON_NAME", iCON_NAME) :
                new ObjectParameter("ICON_NAME", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_BankListNps_DataTableCounter", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, bANK_CDParameter, bANK_NAMEParameter, sHORTCODEParameter, bRANCH_CDParameter, bRANCH_NAMEParameter, iCON_NAMEParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_BankListNps_Get_Result> sp_BankListNps_Get(string bANK_CD, string bANK_NAME, string sHORTCODE, string bRANCH_CD, string bRANCH_NAME, string iCON_NAME, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var bANK_CDParameter = bANK_CD != null ?
                new ObjectParameter("BANK_CD", bANK_CD) :
                new ObjectParameter("BANK_CD", typeof(string));
    
            var bANK_NAMEParameter = bANK_NAME != null ?
                new ObjectParameter("BANK_NAME", bANK_NAME) :
                new ObjectParameter("BANK_NAME", typeof(string));
    
            var sHORTCODEParameter = sHORTCODE != null ?
                new ObjectParameter("SHORTCODE", sHORTCODE) :
                new ObjectParameter("SHORTCODE", typeof(string));
    
            var bRANCH_CDParameter = bRANCH_CD != null ?
                new ObjectParameter("BRANCH_CD", bRANCH_CD) :
                new ObjectParameter("BRANCH_CD", typeof(string));
    
            var bRANCH_NAMEParameter = bRANCH_NAME != null ?
                new ObjectParameter("BRANCH_NAME", bRANCH_NAME) :
                new ObjectParameter("BRANCH_NAME", typeof(string));
    
            var iCON_NAMEParameter = iCON_NAME != null ?
                new ObjectParameter("ICON_NAME", iCON_NAME) :
                new ObjectParameter("ICON_NAME", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BankListNps_Get_Result>("sp_BankListNps_Get", bANK_CDParameter, bANK_NAMEParameter, sHORTCODEParameter, bRANCH_CDParameter, bRANCH_NAMEParameter, iCON_NAMEParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int sp_BankListNps_Update(string bANK_CD, string bANK_NAME, string sHORTCODE, string bRANCH_CD, string bRANCH_NAME, string iCON_NAME, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id)
        {
            var bANK_CDParameter = bANK_CD != null ?
                new ObjectParameter("BANK_CD", bANK_CD) :
                new ObjectParameter("BANK_CD", typeof(string));
    
            var bANK_NAMEParameter = bANK_NAME != null ?
                new ObjectParameter("BANK_NAME", bANK_NAME) :
                new ObjectParameter("BANK_NAME", typeof(string));
    
            var sHORTCODEParameter = sHORTCODE != null ?
                new ObjectParameter("SHORTCODE", sHORTCODE) :
                new ObjectParameter("SHORTCODE", typeof(string));
    
            var bRANCH_CDParameter = bRANCH_CD != null ?
                new ObjectParameter("BRANCH_CD", bRANCH_CD) :
                new ObjectParameter("BRANCH_CD", typeof(string));
    
            var bRANCH_NAMEParameter = bRANCH_NAME != null ?
                new ObjectParameter("BRANCH_NAME", bRANCH_NAME) :
                new ObjectParameter("BRANCH_NAME", typeof(string));
    
            var iCON_NAMEParameter = iCON_NAME != null ?
                new ObjectParameter("ICON_NAME", iCON_NAME) :
                new ObjectParameter("ICON_NAME", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BankListNps_Update", bANK_CDParameter, bANK_NAMEParameter, sHORTCODEParameter, bRANCH_CDParameter, bRANCH_NAMEParameter, iCON_NAMEParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_BankTransactions_Datatable_Result> sp_BankTransactions_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, Nullable<int> type, string startDate, string endDate, Nullable<long> createdBy, Nullable<int> status, Nullable<int> sign, string memberName, Nullable<decimal> amount, Nullable<decimal> currentBalance, string vendorTransactionId, string reference, string today, string weekly, string monthly, Nullable<int> vendorType)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BankTransactions_Datatable_Result>("sp_BankTransactions_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, typeParameter, startDateParameter, endDateParameter, createdByParameter, statusParameter, signParameter, memberNameParameter, amountParameter, currentBalanceParameter, vendorTransactionIdParameter, referenceParameter, todayParameter, weeklyParameter, monthlyParameter, vendorTypeParameter);
        }
    
        public virtual ObjectResult<sp_BankTransactions_DatatableCounter_Result> sp_BankTransactions_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, Nullable<int> type, string startDate, string endDate, Nullable<long> createdBy, Nullable<int> status, Nullable<int> sign, string memberName, Nullable<decimal> amount, Nullable<decimal> currentBalance, string vendorTransactionId, string reference, string today, string weekly, string monthly, Nullable<int> vendorType)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BankTransactions_DatatableCounter_Result>("sp_BankTransactions_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, typeParameter, startDateParameter, endDateParameter, createdByParameter, statusParameter, signParameter, memberNameParameter, amountParameter, currentBalanceParameter, vendorTransactionIdParameter, referenceParameter, todayParameter, weeklyParameter, monthlyParameter, vendorTypeParameter);
        }
    
        public virtual ObjectResult<sp_BankTransactions_Get_Result> sp_BankTransactions_Get(Nullable<long> id, Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<int> take, Nullable<int> skip, string startDate, string endDate, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string today, string weekly, string monthly, Nullable<int> vendorType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BankTransactions_Get_Result>("sp_BankTransactions_Get", idParameter, memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, takeParameter, skipParameter, startDateParameter, endDateParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, todayParameter, weeklyParameter, monthlyParameter, vendorTypeParameter);
        }
    
        public virtual ObjectResult<sp_BusDetail_Result> sp_BusDetail(string flag, string tripFrom, string tripTo, string id, string ticketSerialNo, string boardingPoint, string seat, Nullable<System.DateTime> departureDate, Nullable<System.TimeSpan> departureTime, string @operator, string busType, Nullable<long> busDetailId, Nullable<int> inputCode, string name, string email, string contactNumber, Nullable<long> memberId, string deviceId, string platform, string boardingPoints, string passengerBoardingPoint, Nullable<decimal> amount, string xmlForPassengername, string status, string transactionId, string busNo, string passengerName, string operatorContactinfo)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var tripFromParameter = tripFrom != null ?
                new ObjectParameter("TripFrom", tripFrom) :
                new ObjectParameter("TripFrom", typeof(string));
    
            var tripToParameter = tripTo != null ?
                new ObjectParameter("TripTo", tripTo) :
                new ObjectParameter("TripTo", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var ticketSerialNoParameter = ticketSerialNo != null ?
                new ObjectParameter("TicketSerialNo", ticketSerialNo) :
                new ObjectParameter("TicketSerialNo", typeof(string));
    
            var boardingPointParameter = boardingPoint != null ?
                new ObjectParameter("BoardingPoint", boardingPoint) :
                new ObjectParameter("BoardingPoint", typeof(string));
    
            var seatParameter = seat != null ?
                new ObjectParameter("Seat", seat) :
                new ObjectParameter("Seat", typeof(string));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            var departureTimeParameter = departureTime.HasValue ?
                new ObjectParameter("DepartureTime", departureTime) :
                new ObjectParameter("DepartureTime", typeof(System.TimeSpan));
    
            var operatorParameter = @operator != null ?
                new ObjectParameter("Operator", @operator) :
                new ObjectParameter("Operator", typeof(string));
    
            var busTypeParameter = busType != null ?
                new ObjectParameter("BusType", busType) :
                new ObjectParameter("BusType", typeof(string));
    
            var busDetailIdParameter = busDetailId.HasValue ?
                new ObjectParameter("BusDetailId", busDetailId) :
                new ObjectParameter("BusDetailId", typeof(long));
    
            var inputCodeParameter = inputCode.HasValue ?
                new ObjectParameter("InputCode", inputCode) :
                new ObjectParameter("InputCode", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var platformParameter = platform != null ?
                new ObjectParameter("platform", platform) :
                new ObjectParameter("platform", typeof(string));
    
            var boardingPointsParameter = boardingPoints != null ?
                new ObjectParameter("boardingPoints", boardingPoints) :
                new ObjectParameter("boardingPoints", typeof(string));
    
            var passengerBoardingPointParameter = passengerBoardingPoint != null ?
                new ObjectParameter("PassengerBoardingPoint", passengerBoardingPoint) :
                new ObjectParameter("PassengerBoardingPoint", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var xmlForPassengernameParameter = xmlForPassengername != null ?
                new ObjectParameter("XmlForPassengername", xmlForPassengername) :
                new ObjectParameter("XmlForPassengername", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var busNoParameter = busNo != null ?
                new ObjectParameter("BusNo", busNo) :
                new ObjectParameter("BusNo", typeof(string));
    
            var passengerNameParameter = passengerName != null ?
                new ObjectParameter("PassengerName", passengerName) :
                new ObjectParameter("PassengerName", typeof(string));
    
            var operatorContactinfoParameter = operatorContactinfo != null ?
                new ObjectParameter("OperatorContactinfo", operatorContactinfo) :
                new ObjectParameter("OperatorContactinfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BusDetail_Result>("sp_BusDetail", flagParameter, tripFromParameter, tripToParameter, idParameter, ticketSerialNoParameter, boardingPointParameter, seatParameter, departureDateParameter, departureTimeParameter, operatorParameter, busTypeParameter, busDetailIdParameter, inputCodeParameter, nameParameter, emailParameter, contactNumberParameter, memberIdParameter, deviceIdParameter, platformParameter, boardingPointsParameter, passengerBoardingPointParameter, amountParameter, xmlForPassengernameParameter, statusParameter, transactionIdParameter, busNoParameter, passengerNameParameter, operatorContactinfoParameter);
        }
    
        public virtual ObjectResult<sp_BusDetail_Backup_Result> sp_BusDetail_Backup(string flag, string tripFrom, string tripTo, string id, string ticketSerialNo, string boardingPoint, string seat, Nullable<System.DateTime> departureDate, Nullable<System.TimeSpan> departureTime, string @operator, string busType, Nullable<long> busDetailId, Nullable<int> inputCode, string name, string email, string contactNumber, Nullable<long> memberId, string deviceId, string platform, string boardingPoints, string passengerBoardingPoint, Nullable<decimal> amount, string xmlForPassengername, string status, string transactionId, string busNo, string passengerName)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var tripFromParameter = tripFrom != null ?
                new ObjectParameter("TripFrom", tripFrom) :
                new ObjectParameter("TripFrom", typeof(string));
    
            var tripToParameter = tripTo != null ?
                new ObjectParameter("TripTo", tripTo) :
                new ObjectParameter("TripTo", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var ticketSerialNoParameter = ticketSerialNo != null ?
                new ObjectParameter("TicketSerialNo", ticketSerialNo) :
                new ObjectParameter("TicketSerialNo", typeof(string));
    
            var boardingPointParameter = boardingPoint != null ?
                new ObjectParameter("BoardingPoint", boardingPoint) :
                new ObjectParameter("BoardingPoint", typeof(string));
    
            var seatParameter = seat != null ?
                new ObjectParameter("Seat", seat) :
                new ObjectParameter("Seat", typeof(string));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            var departureTimeParameter = departureTime.HasValue ?
                new ObjectParameter("DepartureTime", departureTime) :
                new ObjectParameter("DepartureTime", typeof(System.TimeSpan));
    
            var operatorParameter = @operator != null ?
                new ObjectParameter("Operator", @operator) :
                new ObjectParameter("Operator", typeof(string));
    
            var busTypeParameter = busType != null ?
                new ObjectParameter("BusType", busType) :
                new ObjectParameter("BusType", typeof(string));
    
            var busDetailIdParameter = busDetailId.HasValue ?
                new ObjectParameter("BusDetailId", busDetailId) :
                new ObjectParameter("BusDetailId", typeof(long));
    
            var inputCodeParameter = inputCode.HasValue ?
                new ObjectParameter("InputCode", inputCode) :
                new ObjectParameter("InputCode", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var platformParameter = platform != null ?
                new ObjectParameter("platform", platform) :
                new ObjectParameter("platform", typeof(string));
    
            var boardingPointsParameter = boardingPoints != null ?
                new ObjectParameter("boardingPoints", boardingPoints) :
                new ObjectParameter("boardingPoints", typeof(string));
    
            var passengerBoardingPointParameter = passengerBoardingPoint != null ?
                new ObjectParameter("PassengerBoardingPoint", passengerBoardingPoint) :
                new ObjectParameter("PassengerBoardingPoint", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var xmlForPassengernameParameter = xmlForPassengername != null ?
                new ObjectParameter("XmlForPassengername", xmlForPassengername) :
                new ObjectParameter("XmlForPassengername", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var busNoParameter = busNo != null ?
                new ObjectParameter("BusNo", busNo) :
                new ObjectParameter("BusNo", typeof(string));
    
            var passengerNameParameter = passengerName != null ?
                new ObjectParameter("PassengerName", passengerName) :
                new ObjectParameter("PassengerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BusDetail_Backup_Result>("sp_BusDetail_Backup", flagParameter, tripFromParameter, tripToParameter, idParameter, ticketSerialNoParameter, boardingPointParameter, seatParameter, departureDateParameter, departureTimeParameter, operatorParameter, busTypeParameter, busDetailIdParameter, inputCodeParameter, nameParameter, emailParameter, contactNumberParameter, memberIdParameter, deviceIdParameter, platformParameter, boardingPointsParameter, passengerBoardingPointParameter, amountParameter, xmlForPassengernameParameter, statusParameter, transactionIdParameter, busNoParameter, passengerNameParameter);
        }
    
        public virtual ObjectResult<sp_CalculateBalance_From_Date_Result> sp_CalculateBalance_From_Date(Nullable<System.DateTime> date, Nullable<int> take)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CalculateBalance_From_Date_Result>("sp_CalculateBalance_From_Date", dateParameter, takeParameter);
        }
    
        public virtual ObjectResult<sp_CalculateBalanceMerchant_From_Date_Result> sp_CalculateBalanceMerchant_From_Date(Nullable<System.DateTime> date, Nullable<int> take)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CalculateBalanceMerchant_From_Date_Result>("sp_CalculateBalanceMerchant_From_Date", dateParameter, takeParameter);
        }
    
        public virtual ObjectResult<sp_CalculateServiceChargeAndCashback_Get_Result> sp_CalculateServiceChargeAndCashback_Get(Nullable<long> memberId, Nullable<decimal> amount, Nullable<long> serviceId, Nullable<int> take)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CalculateServiceChargeAndCashback_Get_Result>("sp_CalculateServiceChargeAndCashback_Get", memberIdParameter, amountParameter, serviceIdParameter, takeParameter);
        }
    
        public virtual ObjectResult<sp_CalculateServiceChargeAndCashbackMerchant_Get_Result> sp_CalculateServiceChargeAndCashbackMerchant_Get(string merchantUniqueId, Nullable<decimal> amount, Nullable<long> serviceId)
        {
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CalculateServiceChargeAndCashbackMerchant_Get_Result>("sp_CalculateServiceChargeAndCashbackMerchant_Get", merchantUniqueIdParameter, amountParameter, serviceIdParameter);
        }
    
        public virtual ObjectResult<sp_CardPaymentTransactions_Get_Result> sp_CardPaymentTransactions_Get(Nullable<long> id, Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<int> take, Nullable<int> skip, string startDate, string endDate, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string today, string weekly, string monthly, Nullable<int> vendorType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CardPaymentTransactions_Get_Result>("sp_CardPaymentTransactions_Get", idParameter, memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, takeParameter, skipParameter, startDateParameter, endDateParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, todayParameter, weeklyParameter, monthlyParameter, vendorTypeParameter);
        }
    
        public virtual ObjectResult<sp_Commission_Datatable_Result> sp_Commission_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> minimumAmountSC, Nullable<decimal> maximumAmountSC, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string fromDate, string toDate, Nullable<long> createdBy, Nullable<int> serviceId, Nullable<int> genderType, Nullable<int> kycType, string running, string expired, string scheduled)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var minimumAmountSCParameter = minimumAmountSC.HasValue ?
                new ObjectParameter("MinimumAmountSC", minimumAmountSC) :
                new ObjectParameter("MinimumAmountSC", typeof(decimal));
    
            var maximumAmountSCParameter = maximumAmountSC.HasValue ?
                new ObjectParameter("MaximumAmountSC", maximumAmountSC) :
                new ObjectParameter("MaximumAmountSC", typeof(decimal));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var genderTypeParameter = genderType.HasValue ?
                new ObjectParameter("GenderType", genderType) :
                new ObjectParameter("GenderType", typeof(int));
    
            var kycTypeParameter = kycType.HasValue ?
                new ObjectParameter("KycType", kycType) :
                new ObjectParameter("KycType", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Commission_Datatable_Result>("sp_Commission_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, minimumAmountParameter, maximumAmountParameter, minimumAmountSCParameter, maximumAmountSCParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, fromDateParameter, toDateParameter, createdByParameter, serviceIdParameter, genderTypeParameter, kycTypeParameter, runningParameter, expiredParameter, scheduledParameter);
        }
    
        public virtual ObjectResult<sp_Commission_Get_Result> sp_Commission_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> serviceId, Nullable<int> genderType, Nullable<int> kycType, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, string fromDate, string toDate, Nullable<int> status, Nullable<int> type, string running, string expired, string scheduled)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var genderTypeParameter = genderType.HasValue ?
                new ObjectParameter("GenderType", genderType) :
                new ObjectParameter("GenderType", typeof(int));
    
            var kycTypeParameter = kycType.HasValue ?
                new ObjectParameter("KycType", kycType) :
                new ObjectParameter("KycType", typeof(int));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Commission_Get_Result>("sp_Commission_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, serviceIdParameter, genderTypeParameter, kycTypeParameter, minimumAmountParameter, maximumAmountParameter, fromDateParameter, toDateParameter, statusParameter, typeParameter, runningParameter, expiredParameter, scheduledParameter);
        }
    
        public virtual ObjectResult<sp_CommissionUpdateHistory_Datatable_Result> sp_CommissionUpdateHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string fromDate, string toDate, Nullable<long> createdBy, Nullable<int> serviceId, Nullable<int> genderType, Nullable<int> kycType, Nullable<long> commissionId, Nullable<int> status, string running, string expired, string scheduled)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var genderTypeParameter = genderType.HasValue ?
                new ObjectParameter("GenderType", genderType) :
                new ObjectParameter("GenderType", typeof(int));
    
            var kycTypeParameter = kycType.HasValue ?
                new ObjectParameter("KycType", kycType) :
                new ObjectParameter("KycType", typeof(int));
    
            var commissionIdParameter = commissionId.HasValue ?
                new ObjectParameter("CommissionId", commissionId) :
                new ObjectParameter("CommissionId", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CommissionUpdateHistory_Datatable_Result>("sp_CommissionUpdateHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, minimumAmountParameter, maximumAmountParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, fromDateParameter, toDateParameter, createdByParameter, serviceIdParameter, genderTypeParameter, kycTypeParameter, commissionIdParameter, statusParameter, runningParameter, expiredParameter, scheduledParameter);
        }
    
        public virtual ObjectResult<sp_CommissionUpdateHistory_Get_Result> sp_CommissionUpdateHistory_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> serviceId, Nullable<int> genderType, Nullable<int> kycType, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, string fromDate, string toDate, Nullable<int> status, Nullable<int> type, Nullable<long> commissionId, string running, string expired, string scheduled)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var genderTypeParameter = genderType.HasValue ?
                new ObjectParameter("GenderType", genderType) :
                new ObjectParameter("GenderType", typeof(int));
    
            var kycTypeParameter = kycType.HasValue ?
                new ObjectParameter("KycType", kycType) :
                new ObjectParameter("KycType", typeof(int));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var commissionIdParameter = commissionId.HasValue ?
                new ObjectParameter("CommissionId", commissionId) :
                new ObjectParameter("CommissionId", typeof(long));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CommissionUpdateHistory_Get_Result>("sp_CommissionUpdateHistory_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, serviceIdParameter, genderTypeParameter, kycTypeParameter, minimumAmountParameter, maximumAmountParameter, fromDateParameter, toDateParameter, statusParameter, typeParameter, commissionIdParameter, runningParameter, expiredParameter, scheduledParameter);
        }
    
        public virtual ObjectResult<sp_Country_Get_Result> sp_Country_Get(Nullable<long> id, string countryName, string countryCode, string searchCodes, Nullable<int> take, Nullable<int> skip, Nullable<int> checkActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var searchCodesParameter = searchCodes != null ?
                new ObjectParameter("SearchCodes", searchCodes) :
                new ObjectParameter("SearchCodes", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Country_Get_Result>("sp_Country_Get", idParameter, countryNameParameter, countryCodeParameter, searchCodesParameter, takeParameter, skipParameter, checkActiveParameter);
        }
    
        public virtual ObjectResult<sp_Coupons_Get_Result> sp_Coupons_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> serviceId, Nullable<int> genderStatus, Nullable<int> kycStatus, string fromDate, string toDate, Nullable<int> status, Nullable<int> type, string running, string expired, string scheduled, Nullable<int> couponType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var genderStatusParameter = genderStatus.HasValue ?
                new ObjectParameter("GenderStatus", genderStatus) :
                new ObjectParameter("GenderStatus", typeof(int));
    
            var kycStatusParameter = kycStatus.HasValue ?
                new ObjectParameter("KycStatus", kycStatus) :
                new ObjectParameter("KycStatus", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var couponTypeParameter = couponType.HasValue ?
                new ObjectParameter("CouponType", couponType) :
                new ObjectParameter("CouponType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Coupons_Get_Result>("sp_Coupons_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, serviceIdParameter, genderStatusParameter, kycStatusParameter, fromDateParameter, toDateParameter, statusParameter, typeParameter, runningParameter, expiredParameter, scheduledParameter, couponTypeParameter);
        }
    
        public virtual ObjectResult<sp_CouponsHistory_Datatable_Result> sp_CouponsHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string fromDate, string toDate, Nullable<long> createdBy, Nullable<long> updatedBy, string updatedByName, Nullable<int> serviceId, Nullable<int> genderStatus, Nullable<int> kycStatus, Nullable<int> status, Nullable<int> type, string running, string expired, string scheduled, Nullable<int> couponType, Nullable<long> couponId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var genderStatusParameter = genderStatus.HasValue ?
                new ObjectParameter("GenderStatus", genderStatus) :
                new ObjectParameter("GenderStatus", typeof(int));
    
            var kycStatusParameter = kycStatus.HasValue ?
                new ObjectParameter("KycStatus", kycStatus) :
                new ObjectParameter("KycStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var couponTypeParameter = couponType.HasValue ?
                new ObjectParameter("CouponType", couponType) :
                new ObjectParameter("CouponType", typeof(int));
    
            var couponIdParameter = couponId.HasValue ?
                new ObjectParameter("CouponId", couponId) :
                new ObjectParameter("CouponId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CouponsHistory_Datatable_Result>("sp_CouponsHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, fromDateParameter, toDateParameter, createdByParameter, updatedByParameter, updatedByNameParameter, serviceIdParameter, genderStatusParameter, kycStatusParameter, statusParameter, typeParameter, runningParameter, expiredParameter, scheduledParameter, couponTypeParameter, couponIdParameter);
        }
    
        public virtual ObjectResult<sp_CouponsHistory_Get_Result> sp_CouponsHistory_Get(Nullable<long> id, Nullable<long> couponId, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> serviceId, Nullable<int> genderStatus, Nullable<int> kycStatus, string fromDate, string toDate, Nullable<int> status, Nullable<int> type, string running, string expired, string scheduled, Nullable<int> couponType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var couponIdParameter = couponId.HasValue ?
                new ObjectParameter("CouponId", couponId) :
                new ObjectParameter("CouponId", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var genderStatusParameter = genderStatus.HasValue ?
                new ObjectParameter("GenderStatus", genderStatus) :
                new ObjectParameter("GenderStatus", typeof(int));
    
            var kycStatusParameter = kycStatus.HasValue ?
                new ObjectParameter("KycStatus", kycStatus) :
                new ObjectParameter("KycStatus", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var couponTypeParameter = couponType.HasValue ?
                new ObjectParameter("CouponType", couponType) :
                new ObjectParameter("CouponType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CouponsHistory_Get_Result>("sp_CouponsHistory_Get", idParameter, couponIdParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, serviceIdParameter, genderStatusParameter, kycStatusParameter, fromDateParameter, toDateParameter, statusParameter, typeParameter, runningParameter, expiredParameter, scheduledParameter, couponTypeParameter);
        }
    
        public virtual ObjectResult<sp_CouponsScratched_Datatable_Result> sp_CouponsScratched_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string fromDate, string toDate, Nullable<long> createdBy, Nullable<int> serviceId, Nullable<int> isScratched, Nullable<int> isUsed, Nullable<int> isExpired, Nullable<int> genderStatus, Nullable<int> kycStatus, Nullable<int> status, Nullable<int> couponId, Nullable<int> couponType, string couponCode, string running, string expired, string scheduled, Nullable<long> memberId, string transactionId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var isScratchedParameter = isScratched.HasValue ?
                new ObjectParameter("IsScratched", isScratched) :
                new ObjectParameter("IsScratched", typeof(int));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(int));
    
            var isExpiredParameter = isExpired.HasValue ?
                new ObjectParameter("IsExpired", isExpired) :
                new ObjectParameter("IsExpired", typeof(int));
    
            var genderStatusParameter = genderStatus.HasValue ?
                new ObjectParameter("GenderStatus", genderStatus) :
                new ObjectParameter("GenderStatus", typeof(int));
    
            var kycStatusParameter = kycStatus.HasValue ?
                new ObjectParameter("KycStatus", kycStatus) :
                new ObjectParameter("KycStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var couponIdParameter = couponId.HasValue ?
                new ObjectParameter("CouponId", couponId) :
                new ObjectParameter("CouponId", typeof(int));
    
            var couponTypeParameter = couponType.HasValue ?
                new ObjectParameter("CouponType", couponType) :
                new ObjectParameter("CouponType", typeof(int));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CouponsScratched_Datatable_Result>("sp_CouponsScratched_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, fromDateParameter, toDateParameter, createdByParameter, serviceIdParameter, isScratchedParameter, isUsedParameter, isExpiredParameter, genderStatusParameter, kycStatusParameter, statusParameter, couponIdParameter, couponTypeParameter, couponCodeParameter, runningParameter, expiredParameter, scheduledParameter, memberIdParameter, transactionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CouponsScratched_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string fromDate, string toDate, Nullable<long> createdBy, Nullable<int> serviceId, Nullable<int> isScratched, Nullable<int> isUsed, Nullable<int> isExpired, Nullable<int> genderStatus, Nullable<int> kycStatus, Nullable<int> status, Nullable<int> couponId, Nullable<int> couponType, string couponCode, string running, string expired, string scheduled, Nullable<long> memberId, string transactionId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var isScratchedParameter = isScratched.HasValue ?
                new ObjectParameter("IsScratched", isScratched) :
                new ObjectParameter("IsScratched", typeof(int));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(int));
    
            var isExpiredParameter = isExpired.HasValue ?
                new ObjectParameter("IsExpired", isExpired) :
                new ObjectParameter("IsExpired", typeof(int));
    
            var genderStatusParameter = genderStatus.HasValue ?
                new ObjectParameter("GenderStatus", genderStatus) :
                new ObjectParameter("GenderStatus", typeof(int));
    
            var kycStatusParameter = kycStatus.HasValue ?
                new ObjectParameter("KycStatus", kycStatus) :
                new ObjectParameter("KycStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var couponIdParameter = couponId.HasValue ?
                new ObjectParameter("CouponId", couponId) :
                new ObjectParameter("CouponId", typeof(int));
    
            var couponTypeParameter = couponType.HasValue ?
                new ObjectParameter("CouponType", couponType) :
                new ObjectParameter("CouponType", typeof(int));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CouponsScratched_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, fromDateParameter, toDateParameter, createdByParameter, serviceIdParameter, isScratchedParameter, isUsedParameter, isExpiredParameter, genderStatusParameter, kycStatusParameter, statusParameter, couponIdParameter, couponTypeParameter, couponCodeParameter, runningParameter, expiredParameter, scheduledParameter, memberIdParameter, transactionIdParameter);
        }
    
        public virtual ObjectResult<sp_CouponsScratched_Get_Result> sp_CouponsScratched_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> serviceId, Nullable<int> isScratched, Nullable<int> isUsed, Nullable<int> isExpired, Nullable<int> genderStatus, Nullable<int> kycStatus, string fromDate, string toDate, Nullable<int> status, Nullable<int> couponId, Nullable<int> couponType, string couponCode, string running, string expired, string scheduled, Nullable<long> memberId, string transactionId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var isScratchedParameter = isScratched.HasValue ?
                new ObjectParameter("IsScratched", isScratched) :
                new ObjectParameter("IsScratched", typeof(int));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(int));
    
            var isExpiredParameter = isExpired.HasValue ?
                new ObjectParameter("IsExpired", isExpired) :
                new ObjectParameter("IsExpired", typeof(int));
    
            var genderStatusParameter = genderStatus.HasValue ?
                new ObjectParameter("GenderStatus", genderStatus) :
                new ObjectParameter("GenderStatus", typeof(int));
    
            var kycStatusParameter = kycStatus.HasValue ?
                new ObjectParameter("KycStatus", kycStatus) :
                new ObjectParameter("KycStatus", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var couponIdParameter = couponId.HasValue ?
                new ObjectParameter("CouponId", couponId) :
                new ObjectParameter("CouponId", typeof(int));
    
            var couponTypeParameter = couponType.HasValue ?
                new ObjectParameter("CouponType", couponType) :
                new ObjectParameter("CouponType", typeof(int));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CouponsScratched_Get_Result>("sp_CouponsScratched_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, serviceIdParameter, isScratchedParameter, isUsedParameter, isExpiredParameter, genderStatusParameter, kycStatusParameter, fromDateParameter, toDateParameter, statusParameter, couponIdParameter, couponTypeParameter, couponCodeParameter, runningParameter, expiredParameter, scheduledParameter, memberIdParameter, transactionIdParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_CurrencyList_AddNew(string symbol, string currencyName, string currency, string image, Nullable<long> country, string countryName, string countryCode, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive)
        {
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(long));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CurrencyList_AddNew", symbolParameter, currencyNameParameter, currencyParameter, imageParameter, countryParameter, countryNameParameter, countryCodeParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_CurrencyList_DataTable_Result> sp_CurrencyList_DataTable(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, string symbol, string currencyName, string currency, string image, Nullable<long> country, string countryName, string countryCode, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(long));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CurrencyList_DataTable_Result>("sp_CurrencyList_DataTable", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, symbolParameter, currencyNameParameter, currencyParameter, imageParameter, countryParameter, countryNameParameter, countryCodeParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CurrencyList_DataTableCounter(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, string symbol, string currencyName, string currency, string image, Nullable<long> country, string countryName, string countryCode, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(long));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CurrencyList_DataTableCounter", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, symbolParameter, currencyNameParameter, currencyParameter, imageParameter, countryParameter, countryNameParameter, countryCodeParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_CurrencyList_Get_Result> sp_CurrencyList_Get(string symbol, string currencyName, string currency, string image, Nullable<long> country, string countryName, string countryCode, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(long));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CurrencyList_Get_Result>("sp_CurrencyList_Get", symbolParameter, currencyNameParameter, currencyParameter, imageParameter, countryParameter, countryNameParameter, countryCodeParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int sp_CurrencyList_Update(string symbol, string currencyName, string currency, string image, Nullable<long> country, string countryName, string countryCode, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id)
        {
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(long));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CurrencyList_Update", symbolParameter, currencyNameParameter, currencyParameter, imageParameter, countryParameter, countryNameParameter, countryCodeParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_DashboardChart_Get_Result> sp_DashboardChart_Get(Nullable<int> take)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DashboardChart_Get_Result>("sp_DashboardChart_Get", takeParameter);
        }
    
        public virtual ObjectResult<sp_DataPackDetail_Get_Result> sp_DataPackDetail_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> packageId, string contactNumber, string transactionId, string productCode, string productType, Nullable<int> checkPurchased)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var checkPurchasedParameter = checkPurchased.HasValue ?
                new ObjectParameter("CheckPurchased", checkPurchased) :
                new ObjectParameter("CheckPurchased", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DataPackDetail_Get_Result>("sp_DataPackDetail_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, packageIdParameter, contactNumberParameter, transactionIdParameter, productCodeParameter, productTypeParameter, checkPurchasedParameter);
        }
    
        public virtual ObjectResult<sp_DealsAndOffers_Get_Result> sp_DealsAndOffers_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> serviceId, Nullable<int> genderStatus, Nullable<int> kycStatus, string fromDate, string toDate, Nullable<int> status, Nullable<int> type, string running, string expired, string scheduled, Nullable<int> couponType, string promoCode)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var genderStatusParameter = genderStatus.HasValue ?
                new ObjectParameter("GenderStatus", genderStatus) :
                new ObjectParameter("GenderStatus", typeof(int));
    
            var kycStatusParameter = kycStatus.HasValue ?
                new ObjectParameter("KycStatus", kycStatus) :
                new ObjectParameter("KycStatus", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var couponTypeParameter = couponType.HasValue ?
                new ObjectParameter("CouponType", couponType) :
                new ObjectParameter("CouponType", typeof(int));
    
            var promoCodeParameter = promoCode != null ?
                new ObjectParameter("PromoCode", promoCode) :
                new ObjectParameter("PromoCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DealsAndOffers_Get_Result>("sp_DealsAndOffers_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, serviceIdParameter, genderStatusParameter, kycStatusParameter, fromDateParameter, toDateParameter, statusParameter, typeParameter, runningParameter, expiredParameter, scheduledParameter, couponTypeParameter, promoCodeParameter);
        }
    
        public virtual ObjectResult<sp_DeleteMyPayment_Result> sp_DeleteMyPayment(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteMyPayment_Result>("sp_DeleteMyPayment", idParameter);
        }
    
        public virtual ObjectResult<sp_DepositOrders_Datatable_Result> sp_DepositOrders_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> createdBy, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> memberId, string transactionId, string refferalsId, Nullable<int> status, Nullable<int> type, string typeMultiple, string today, string weekly, string monthly)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var refferalsIdParameter = refferalsId != null ?
                new ObjectParameter("RefferalsId", refferalsId) :
                new ObjectParameter("RefferalsId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var typeMultipleParameter = typeMultiple != null ?
                new ObjectParameter("TypeMultiple", typeMultiple) :
                new ObjectParameter("TypeMultiple", typeof(string));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DepositOrders_Datatable_Result>("sp_DepositOrders_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, createdByParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, memberIdParameter, transactionIdParameter, refferalsIdParameter, statusParameter, typeParameter, typeMultipleParameter, todayParameter, weeklyParameter, monthlyParameter);
        }
    
        public virtual ObjectResult<sp_DepositOrders_DatatableCounter_Result> sp_DepositOrders_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> createdBy, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> memberId, string transactionId, string refferalsId, Nullable<int> status, Nullable<int> type, string typeMultiple, string today, string weekly, string monthly)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var refferalsIdParameter = refferalsId != null ?
                new ObjectParameter("RefferalsId", refferalsId) :
                new ObjectParameter("RefferalsId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var typeMultipleParameter = typeMultiple != null ?
                new ObjectParameter("TypeMultiple", typeMultiple) :
                new ObjectParameter("TypeMultiple", typeof(string));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DepositOrders_DatatableCounter_Result>("sp_DepositOrders_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, createdByParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, memberIdParameter, transactionIdParameter, refferalsIdParameter, statusParameter, typeParameter, typeMultipleParameter, todayParameter, weeklyParameter, monthlyParameter);
        }
    
        public virtual ObjectResult<sp_DepositOrders_Get_Result> sp_DepositOrders_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string transactionId, Nullable<int> status, string currency, string refferalsId, Nullable<decimal> amount, Nullable<long> memberId, Nullable<int> type, string today, string weekly, string monthly, string startDate, string endDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var refferalsIdParameter = refferalsId != null ?
                new ObjectParameter("RefferalsId", refferalsId) :
                new ObjectParameter("RefferalsId", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DepositOrders_Get_Result>("sp_DepositOrders_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, transactionIdParameter, statusParameter, currencyParameter, refferalsIdParameter, amountParameter, memberIdParameter, typeParameter, todayParameter, weeklyParameter, monthlyParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_District_Get_Result> sp_District_Get(string district, string provinceCode, string districtCode)
        {
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var provinceCodeParameter = provinceCode != null ?
                new ObjectParameter("ProvinceCode", provinceCode) :
                new ObjectParameter("ProvinceCode", typeof(string));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_District_Get_Result>("sp_District_Get", districtParameter, provinceCodeParameter, districtCodeParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_EstatementPDFToken_Delete(Nullable<long> id, Nullable<long> memberId, string token, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EstatementPDFToken_Delete", idParameter, memberIdParameter, tokenParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter);
        }
    
        public virtual ObjectResult<sp_EstatementPDFToken_Get_Result> sp_EstatementPDFToken_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string token, Nullable<long> memberId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EstatementPDFToken_Get_Result>("sp_EstatementPDFToken_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, tokenParameter, memberIdParameter);
        }
    
        public virtual int sp_EventDetails_AddNew(Nullable<long> memberId, Nullable<long> eventId, string eventName, Nullable<System.DateTime> eventDate, string eventDateString, string eventDateNepali, string eventStartTime, string eventEndTime, string eventDescription, string venueName, string venueAddress, string venueImagePath1, Nullable<long> venueCapacity, string parkingAvailable, Nullable<int> latitude, Nullable<int> longitude, string eventType, string organizerName, string bannerImagePath, Nullable<bool> showArrivalTime, string arrivalTime, Nullable<bool> isSingleDayEvent, string merchantCode, string customerName, string customerMobile, string customerEmail, Nullable<long> ticketCategoryId, string ticketCategoryName, string sectionName, Nullable<decimal> ticketRate, Nullable<long> noOfTicket, Nullable<decimal> totalPrice, Nullable<int> paymentMethodId, string paymentMethodCode, string paymentMethodName, string paymentMerchantId, Nullable<bool> isBooked, Nullable<bool> isPaymentDone, string orderId, string transactionUniqueId, string ticketURL, Nullable<long> createdBy, string createdByName, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, string eventTermsAndCondition, string eventContactDtls, Nullable<System.DateTime> ticketSentDatetime)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(long));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("eventName", eventName) :
                new ObjectParameter("eventName", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("eventDate", eventDate) :
                new ObjectParameter("eventDate", typeof(System.DateTime));
    
            var eventDateStringParameter = eventDateString != null ?
                new ObjectParameter("eventDateString", eventDateString) :
                new ObjectParameter("eventDateString", typeof(string));
    
            var eventDateNepaliParameter = eventDateNepali != null ?
                new ObjectParameter("eventDateNepali", eventDateNepali) :
                new ObjectParameter("eventDateNepali", typeof(string));
    
            var eventStartTimeParameter = eventStartTime != null ?
                new ObjectParameter("eventStartTime", eventStartTime) :
                new ObjectParameter("eventStartTime", typeof(string));
    
            var eventEndTimeParameter = eventEndTime != null ?
                new ObjectParameter("eventEndTime", eventEndTime) :
                new ObjectParameter("eventEndTime", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("eventDescription", eventDescription) :
                new ObjectParameter("eventDescription", typeof(string));
    
            var venueNameParameter = venueName != null ?
                new ObjectParameter("venueName", venueName) :
                new ObjectParameter("venueName", typeof(string));
    
            var venueAddressParameter = venueAddress != null ?
                new ObjectParameter("venueAddress", venueAddress) :
                new ObjectParameter("venueAddress", typeof(string));
    
            var venueImagePath1Parameter = venueImagePath1 != null ?
                new ObjectParameter("venueImagePath1", venueImagePath1) :
                new ObjectParameter("venueImagePath1", typeof(string));
    
            var venueCapacityParameter = venueCapacity.HasValue ?
                new ObjectParameter("venueCapacity", venueCapacity) :
                new ObjectParameter("venueCapacity", typeof(long));
    
            var parkingAvailableParameter = parkingAvailable != null ?
                new ObjectParameter("parkingAvailable", parkingAvailable) :
                new ObjectParameter("parkingAvailable", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(int));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("eventType", eventType) :
                new ObjectParameter("eventType", typeof(string));
    
            var organizerNameParameter = organizerName != null ?
                new ObjectParameter("organizerName", organizerName) :
                new ObjectParameter("organizerName", typeof(string));
    
            var bannerImagePathParameter = bannerImagePath != null ?
                new ObjectParameter("bannerImagePath", bannerImagePath) :
                new ObjectParameter("bannerImagePath", typeof(string));
    
            var showArrivalTimeParameter = showArrivalTime.HasValue ?
                new ObjectParameter("showArrivalTime", showArrivalTime) :
                new ObjectParameter("showArrivalTime", typeof(bool));
    
            var arrivalTimeParameter = arrivalTime != null ?
                new ObjectParameter("arrivalTime", arrivalTime) :
                new ObjectParameter("arrivalTime", typeof(string));
    
            var isSingleDayEventParameter = isSingleDayEvent.HasValue ?
                new ObjectParameter("isSingleDayEvent", isSingleDayEvent) :
                new ObjectParameter("isSingleDayEvent", typeof(bool));
    
            var merchantCodeParameter = merchantCode != null ?
                new ObjectParameter("merchantCode", merchantCode) :
                new ObjectParameter("merchantCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var customerMobileParameter = customerMobile != null ?
                new ObjectParameter("customerMobile", customerMobile) :
                new ObjectParameter("customerMobile", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("customerEmail", customerEmail) :
                new ObjectParameter("customerEmail", typeof(string));
    
            var ticketCategoryIdParameter = ticketCategoryId.HasValue ?
                new ObjectParameter("ticketCategoryId", ticketCategoryId) :
                new ObjectParameter("ticketCategoryId", typeof(long));
    
            var ticketCategoryNameParameter = ticketCategoryName != null ?
                new ObjectParameter("ticketCategoryName", ticketCategoryName) :
                new ObjectParameter("ticketCategoryName", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("sectionName", sectionName) :
                new ObjectParameter("sectionName", typeof(string));
    
            var ticketRateParameter = ticketRate.HasValue ?
                new ObjectParameter("ticketRate", ticketRate) :
                new ObjectParameter("ticketRate", typeof(decimal));
    
            var noOfTicketParameter = noOfTicket.HasValue ?
                new ObjectParameter("noOfTicket", noOfTicket) :
                new ObjectParameter("noOfTicket", typeof(long));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("totalPrice", totalPrice) :
                new ObjectParameter("totalPrice", typeof(decimal));
    
            var paymentMethodIdParameter = paymentMethodId.HasValue ?
                new ObjectParameter("paymentMethodId", paymentMethodId) :
                new ObjectParameter("paymentMethodId", typeof(int));
    
            var paymentMethodCodeParameter = paymentMethodCode != null ?
                new ObjectParameter("paymentMethodCode", paymentMethodCode) :
                new ObjectParameter("paymentMethodCode", typeof(string));
    
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("paymentMethodName", paymentMethodName) :
                new ObjectParameter("paymentMethodName", typeof(string));
    
            var paymentMerchantIdParameter = paymentMerchantId != null ?
                new ObjectParameter("paymentMerchantId", paymentMerchantId) :
                new ObjectParameter("paymentMerchantId", typeof(string));
    
            var isBookedParameter = isBooked.HasValue ?
                new ObjectParameter("IsBooked", isBooked) :
                new ObjectParameter("IsBooked", typeof(bool));
    
            var isPaymentDoneParameter = isPaymentDone.HasValue ?
                new ObjectParameter("IsPaymentDone", isPaymentDone) :
                new ObjectParameter("IsPaymentDone", typeof(bool));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var ticketURLParameter = ticketURL != null ?
                new ObjectParameter("TicketURL", ticketURL) :
                new ObjectParameter("TicketURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var eventTermsAndConditionParameter = eventTermsAndCondition != null ?
                new ObjectParameter("eventTermsAndCondition", eventTermsAndCondition) :
                new ObjectParameter("eventTermsAndCondition", typeof(string));
    
            var eventContactDtlsParameter = eventContactDtls != null ?
                new ObjectParameter("eventContactDtls", eventContactDtls) :
                new ObjectParameter("eventContactDtls", typeof(string));
    
            var ticketSentDatetimeParameter = ticketSentDatetime.HasValue ?
                new ObjectParameter("ticketSentDatetime", ticketSentDatetime) :
                new ObjectParameter("ticketSentDatetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EventDetails_AddNew", memberIdParameter, eventIdParameter, eventNameParameter, eventDateParameter, eventDateStringParameter, eventDateNepaliParameter, eventStartTimeParameter, eventEndTimeParameter, eventDescriptionParameter, venueNameParameter, venueAddressParameter, venueImagePath1Parameter, venueCapacityParameter, parkingAvailableParameter, latitudeParameter, longitudeParameter, eventTypeParameter, organizerNameParameter, bannerImagePathParameter, showArrivalTimeParameter, arrivalTimeParameter, isSingleDayEventParameter, merchantCodeParameter, customerNameParameter, customerMobileParameter, customerEmailParameter, ticketCategoryIdParameter, ticketCategoryNameParameter, sectionNameParameter, ticketRateParameter, noOfTicketParameter, totalPriceParameter, paymentMethodIdParameter, paymentMethodCodeParameter, paymentMethodNameParameter, paymentMerchantIdParameter, isBookedParameter, isPaymentDoneParameter, orderIdParameter, transactionUniqueIdParameter, ticketURLParameter, createdByParameter, createdByNameParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, eventTermsAndConditionParameter, eventContactDtlsParameter, ticketSentDatetimeParameter);
        }
    
        public virtual ObjectResult<sp_EventDetails_DataTable_Result> sp_EventDetails_DataTable(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<long> memberId, Nullable<long> eventId, string eventName, string checkeventDate, string eventDateString, string eventDateNepali, string eventStartTime, string eventEndTime, string eventDescription, string venueName, string venueAddress, string venueImagePath1, Nullable<long> venueCapacity, string parkingAvailable, Nullable<int> latitude, Nullable<int> longitude, string eventType, string organizerName, string bannerImagePath, Nullable<bool> showArrivalTime, string arrivalTime, Nullable<bool> isSingleDayEvent, string merchantCode, string customerName, string customerMobile, string customerEmail, Nullable<long> ticketCategoryId, string ticketCategoryName, string sectionName, Nullable<decimal> ticketRate, Nullable<long> noOfTicket, Nullable<decimal> totalPrice, Nullable<int> paymentMethodId, string paymentMethodCode, string paymentMethodName, string paymentMerchantId, Nullable<bool> isBooked, Nullable<bool> isPaymentDone, string orderId, string transactionUniqueId, string ticketURL, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkPaymentDone, Nullable<int> checkIsBooked, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(long));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("eventName", eventName) :
                new ObjectParameter("eventName", typeof(string));
    
            var checkeventDateParameter = checkeventDate != null ?
                new ObjectParameter("CheckeventDate", checkeventDate) :
                new ObjectParameter("CheckeventDate", typeof(string));
    
            var eventDateStringParameter = eventDateString != null ?
                new ObjectParameter("eventDateString", eventDateString) :
                new ObjectParameter("eventDateString", typeof(string));
    
            var eventDateNepaliParameter = eventDateNepali != null ?
                new ObjectParameter("eventDateNepali", eventDateNepali) :
                new ObjectParameter("eventDateNepali", typeof(string));
    
            var eventStartTimeParameter = eventStartTime != null ?
                new ObjectParameter("eventStartTime", eventStartTime) :
                new ObjectParameter("eventStartTime", typeof(string));
    
            var eventEndTimeParameter = eventEndTime != null ?
                new ObjectParameter("eventEndTime", eventEndTime) :
                new ObjectParameter("eventEndTime", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("eventDescription", eventDescription) :
                new ObjectParameter("eventDescription", typeof(string));
    
            var venueNameParameter = venueName != null ?
                new ObjectParameter("venueName", venueName) :
                new ObjectParameter("venueName", typeof(string));
    
            var venueAddressParameter = venueAddress != null ?
                new ObjectParameter("venueAddress", venueAddress) :
                new ObjectParameter("venueAddress", typeof(string));
    
            var venueImagePath1Parameter = venueImagePath1 != null ?
                new ObjectParameter("venueImagePath1", venueImagePath1) :
                new ObjectParameter("venueImagePath1", typeof(string));
    
            var venueCapacityParameter = venueCapacity.HasValue ?
                new ObjectParameter("venueCapacity", venueCapacity) :
                new ObjectParameter("venueCapacity", typeof(long));
    
            var parkingAvailableParameter = parkingAvailable != null ?
                new ObjectParameter("parkingAvailable", parkingAvailable) :
                new ObjectParameter("parkingAvailable", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(int));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("eventType", eventType) :
                new ObjectParameter("eventType", typeof(string));
    
            var organizerNameParameter = organizerName != null ?
                new ObjectParameter("organizerName", organizerName) :
                new ObjectParameter("organizerName", typeof(string));
    
            var bannerImagePathParameter = bannerImagePath != null ?
                new ObjectParameter("bannerImagePath", bannerImagePath) :
                new ObjectParameter("bannerImagePath", typeof(string));
    
            var showArrivalTimeParameter = showArrivalTime.HasValue ?
                new ObjectParameter("showArrivalTime", showArrivalTime) :
                new ObjectParameter("showArrivalTime", typeof(bool));
    
            var arrivalTimeParameter = arrivalTime != null ?
                new ObjectParameter("arrivalTime", arrivalTime) :
                new ObjectParameter("arrivalTime", typeof(string));
    
            var isSingleDayEventParameter = isSingleDayEvent.HasValue ?
                new ObjectParameter("isSingleDayEvent", isSingleDayEvent) :
                new ObjectParameter("isSingleDayEvent", typeof(bool));
    
            var merchantCodeParameter = merchantCode != null ?
                new ObjectParameter("merchantCode", merchantCode) :
                new ObjectParameter("merchantCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var customerMobileParameter = customerMobile != null ?
                new ObjectParameter("customerMobile", customerMobile) :
                new ObjectParameter("customerMobile", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("customerEmail", customerEmail) :
                new ObjectParameter("customerEmail", typeof(string));
    
            var ticketCategoryIdParameter = ticketCategoryId.HasValue ?
                new ObjectParameter("ticketCategoryId", ticketCategoryId) :
                new ObjectParameter("ticketCategoryId", typeof(long));
    
            var ticketCategoryNameParameter = ticketCategoryName != null ?
                new ObjectParameter("ticketCategoryName", ticketCategoryName) :
                new ObjectParameter("ticketCategoryName", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("sectionName", sectionName) :
                new ObjectParameter("sectionName", typeof(string));
    
            var ticketRateParameter = ticketRate.HasValue ?
                new ObjectParameter("ticketRate", ticketRate) :
                new ObjectParameter("ticketRate", typeof(decimal));
    
            var noOfTicketParameter = noOfTicket.HasValue ?
                new ObjectParameter("noOfTicket", noOfTicket) :
                new ObjectParameter("noOfTicket", typeof(long));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("totalPrice", totalPrice) :
                new ObjectParameter("totalPrice", typeof(decimal));
    
            var paymentMethodIdParameter = paymentMethodId.HasValue ?
                new ObjectParameter("paymentMethodId", paymentMethodId) :
                new ObjectParameter("paymentMethodId", typeof(int));
    
            var paymentMethodCodeParameter = paymentMethodCode != null ?
                new ObjectParameter("paymentMethodCode", paymentMethodCode) :
                new ObjectParameter("paymentMethodCode", typeof(string));
    
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("paymentMethodName", paymentMethodName) :
                new ObjectParameter("paymentMethodName", typeof(string));
    
            var paymentMerchantIdParameter = paymentMerchantId != null ?
                new ObjectParameter("paymentMerchantId", paymentMerchantId) :
                new ObjectParameter("paymentMerchantId", typeof(string));
    
            var isBookedParameter = isBooked.HasValue ?
                new ObjectParameter("IsBooked", isBooked) :
                new ObjectParameter("IsBooked", typeof(bool));
    
            var isPaymentDoneParameter = isPaymentDone.HasValue ?
                new ObjectParameter("IsPaymentDone", isPaymentDone) :
                new ObjectParameter("IsPaymentDone", typeof(bool));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var ticketURLParameter = ticketURL != null ?
                new ObjectParameter("TicketURL", ticketURL) :
                new ObjectParameter("TicketURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkPaymentDoneParameter = checkPaymentDone.HasValue ?
                new ObjectParameter("CheckPaymentDone", checkPaymentDone) :
                new ObjectParameter("CheckPaymentDone", typeof(int));
    
            var checkIsBookedParameter = checkIsBooked.HasValue ?
                new ObjectParameter("CheckIsBooked", checkIsBooked) :
                new ObjectParameter("CheckIsBooked", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EventDetails_DataTable_Result>("sp_EventDetails_DataTable", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, memberIdParameter, eventIdParameter, eventNameParameter, checkeventDateParameter, eventDateStringParameter, eventDateNepaliParameter, eventStartTimeParameter, eventEndTimeParameter, eventDescriptionParameter, venueNameParameter, venueAddressParameter, venueImagePath1Parameter, venueCapacityParameter, parkingAvailableParameter, latitudeParameter, longitudeParameter, eventTypeParameter, organizerNameParameter, bannerImagePathParameter, showArrivalTimeParameter, arrivalTimeParameter, isSingleDayEventParameter, merchantCodeParameter, customerNameParameter, customerMobileParameter, customerEmailParameter, ticketCategoryIdParameter, ticketCategoryNameParameter, sectionNameParameter, ticketRateParameter, noOfTicketParameter, totalPriceParameter, paymentMethodIdParameter, paymentMethodCodeParameter, paymentMethodNameParameter, paymentMerchantIdParameter, isBookedParameter, isPaymentDoneParameter, orderIdParameter, transactionUniqueIdParameter, ticketURLParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, checkDeleteParameter, checkActiveParameter, checkPaymentDoneParameter, checkIsBookedParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_EventDetails_DataTableCounter(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<long> memberId, Nullable<long> eventId, string eventName, string checkeventDate, string eventDateString, string eventDateNepali, string eventStartTime, string eventEndTime, string eventDescription, string venueName, string venueAddress, string venueImagePath1, Nullable<long> venueCapacity, string parkingAvailable, Nullable<int> latitude, Nullable<int> longitude, string eventType, string organizerName, string bannerImagePath, Nullable<bool> showArrivalTime, string arrivalTime, Nullable<bool> isSingleDayEvent, string merchantCode, string customerName, string customerMobile, string customerEmail, Nullable<long> ticketCategoryId, string ticketCategoryName, string sectionName, Nullable<decimal> ticketRate, Nullable<long> noOfTicket, Nullable<decimal> totalPrice, Nullable<int> paymentMethodId, string paymentMethodCode, string paymentMethodName, string paymentMerchantId, Nullable<bool> isBooked, Nullable<bool> isPaymentDone, string orderId, string transactionUniqueId, string ticketURL, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkPaymentDone, Nullable<int> checkIsBooked, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(long));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("eventName", eventName) :
                new ObjectParameter("eventName", typeof(string));
    
            var checkeventDateParameter = checkeventDate != null ?
                new ObjectParameter("CheckeventDate", checkeventDate) :
                new ObjectParameter("CheckeventDate", typeof(string));
    
            var eventDateStringParameter = eventDateString != null ?
                new ObjectParameter("eventDateString", eventDateString) :
                new ObjectParameter("eventDateString", typeof(string));
    
            var eventDateNepaliParameter = eventDateNepali != null ?
                new ObjectParameter("eventDateNepali", eventDateNepali) :
                new ObjectParameter("eventDateNepali", typeof(string));
    
            var eventStartTimeParameter = eventStartTime != null ?
                new ObjectParameter("eventStartTime", eventStartTime) :
                new ObjectParameter("eventStartTime", typeof(string));
    
            var eventEndTimeParameter = eventEndTime != null ?
                new ObjectParameter("eventEndTime", eventEndTime) :
                new ObjectParameter("eventEndTime", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("eventDescription", eventDescription) :
                new ObjectParameter("eventDescription", typeof(string));
    
            var venueNameParameter = venueName != null ?
                new ObjectParameter("venueName", venueName) :
                new ObjectParameter("venueName", typeof(string));
    
            var venueAddressParameter = venueAddress != null ?
                new ObjectParameter("venueAddress", venueAddress) :
                new ObjectParameter("venueAddress", typeof(string));
    
            var venueImagePath1Parameter = venueImagePath1 != null ?
                new ObjectParameter("venueImagePath1", venueImagePath1) :
                new ObjectParameter("venueImagePath1", typeof(string));
    
            var venueCapacityParameter = venueCapacity.HasValue ?
                new ObjectParameter("venueCapacity", venueCapacity) :
                new ObjectParameter("venueCapacity", typeof(long));
    
            var parkingAvailableParameter = parkingAvailable != null ?
                new ObjectParameter("parkingAvailable", parkingAvailable) :
                new ObjectParameter("parkingAvailable", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(int));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("eventType", eventType) :
                new ObjectParameter("eventType", typeof(string));
    
            var organizerNameParameter = organizerName != null ?
                new ObjectParameter("organizerName", organizerName) :
                new ObjectParameter("organizerName", typeof(string));
    
            var bannerImagePathParameter = bannerImagePath != null ?
                new ObjectParameter("bannerImagePath", bannerImagePath) :
                new ObjectParameter("bannerImagePath", typeof(string));
    
            var showArrivalTimeParameter = showArrivalTime.HasValue ?
                new ObjectParameter("showArrivalTime", showArrivalTime) :
                new ObjectParameter("showArrivalTime", typeof(bool));
    
            var arrivalTimeParameter = arrivalTime != null ?
                new ObjectParameter("arrivalTime", arrivalTime) :
                new ObjectParameter("arrivalTime", typeof(string));
    
            var isSingleDayEventParameter = isSingleDayEvent.HasValue ?
                new ObjectParameter("isSingleDayEvent", isSingleDayEvent) :
                new ObjectParameter("isSingleDayEvent", typeof(bool));
    
            var merchantCodeParameter = merchantCode != null ?
                new ObjectParameter("merchantCode", merchantCode) :
                new ObjectParameter("merchantCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var customerMobileParameter = customerMobile != null ?
                new ObjectParameter("customerMobile", customerMobile) :
                new ObjectParameter("customerMobile", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("customerEmail", customerEmail) :
                new ObjectParameter("customerEmail", typeof(string));
    
            var ticketCategoryIdParameter = ticketCategoryId.HasValue ?
                new ObjectParameter("ticketCategoryId", ticketCategoryId) :
                new ObjectParameter("ticketCategoryId", typeof(long));
    
            var ticketCategoryNameParameter = ticketCategoryName != null ?
                new ObjectParameter("ticketCategoryName", ticketCategoryName) :
                new ObjectParameter("ticketCategoryName", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("sectionName", sectionName) :
                new ObjectParameter("sectionName", typeof(string));
    
            var ticketRateParameter = ticketRate.HasValue ?
                new ObjectParameter("ticketRate", ticketRate) :
                new ObjectParameter("ticketRate", typeof(decimal));
    
            var noOfTicketParameter = noOfTicket.HasValue ?
                new ObjectParameter("noOfTicket", noOfTicket) :
                new ObjectParameter("noOfTicket", typeof(long));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("totalPrice", totalPrice) :
                new ObjectParameter("totalPrice", typeof(decimal));
    
            var paymentMethodIdParameter = paymentMethodId.HasValue ?
                new ObjectParameter("paymentMethodId", paymentMethodId) :
                new ObjectParameter("paymentMethodId", typeof(int));
    
            var paymentMethodCodeParameter = paymentMethodCode != null ?
                new ObjectParameter("paymentMethodCode", paymentMethodCode) :
                new ObjectParameter("paymentMethodCode", typeof(string));
    
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("paymentMethodName", paymentMethodName) :
                new ObjectParameter("paymentMethodName", typeof(string));
    
            var paymentMerchantIdParameter = paymentMerchantId != null ?
                new ObjectParameter("paymentMerchantId", paymentMerchantId) :
                new ObjectParameter("paymentMerchantId", typeof(string));
    
            var isBookedParameter = isBooked.HasValue ?
                new ObjectParameter("IsBooked", isBooked) :
                new ObjectParameter("IsBooked", typeof(bool));
    
            var isPaymentDoneParameter = isPaymentDone.HasValue ?
                new ObjectParameter("IsPaymentDone", isPaymentDone) :
                new ObjectParameter("IsPaymentDone", typeof(bool));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var ticketURLParameter = ticketURL != null ?
                new ObjectParameter("TicketURL", ticketURL) :
                new ObjectParameter("TicketURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkPaymentDoneParameter = checkPaymentDone.HasValue ?
                new ObjectParameter("CheckPaymentDone", checkPaymentDone) :
                new ObjectParameter("CheckPaymentDone", typeof(int));
    
            var checkIsBookedParameter = checkIsBooked.HasValue ?
                new ObjectParameter("CheckIsBooked", checkIsBooked) :
                new ObjectParameter("CheckIsBooked", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_EventDetails_DataTableCounter", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, memberIdParameter, eventIdParameter, eventNameParameter, checkeventDateParameter, eventDateStringParameter, eventDateNepaliParameter, eventStartTimeParameter, eventEndTimeParameter, eventDescriptionParameter, venueNameParameter, venueAddressParameter, venueImagePath1Parameter, venueCapacityParameter, parkingAvailableParameter, latitudeParameter, longitudeParameter, eventTypeParameter, organizerNameParameter, bannerImagePathParameter, showArrivalTimeParameter, arrivalTimeParameter, isSingleDayEventParameter, merchantCodeParameter, customerNameParameter, customerMobileParameter, customerEmailParameter, ticketCategoryIdParameter, ticketCategoryNameParameter, sectionNameParameter, ticketRateParameter, noOfTicketParameter, totalPriceParameter, paymentMethodIdParameter, paymentMethodCodeParameter, paymentMethodNameParameter, paymentMerchantIdParameter, isBookedParameter, isPaymentDoneParameter, orderIdParameter, transactionUniqueIdParameter, ticketURLParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, checkDeleteParameter, checkActiveParameter, checkPaymentDoneParameter, checkIsBookedParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_EventDetails_Get_Result> sp_EventDetails_Get(Nullable<long> memberId, Nullable<long> eventId, string eventName, string checkeventDate, string eventDateString, string eventDateNepali, string eventStartTime, string eventEndTime, string eventDescription, string venueName, string venueAddress, string venueImagePath1, Nullable<long> venueCapacity, string parkingAvailable, Nullable<int> latitude, Nullable<int> longitude, string eventType, string organizerName, string bannerImagePath, Nullable<bool> showArrivalTime, string arrivalTime, Nullable<bool> isSingleDayEvent, string merchantCode, string customerName, string customerMobile, string customerEmail, Nullable<long> ticketCategoryId, string ticketCategoryName, string sectionName, Nullable<decimal> ticketRate, Nullable<long> noOfTicket, Nullable<decimal> totalPrice, Nullable<int> paymentMethodId, string paymentMethodCode, string paymentMethodName, string paymentMerchantId, Nullable<bool> isBooked, Nullable<bool> isPaymentDone, string orderId, string transactionUniqueId, string ticketURL, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkPaymentDone, Nullable<int> checkIsBooked, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(long));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("eventName", eventName) :
                new ObjectParameter("eventName", typeof(string));
    
            var checkeventDateParameter = checkeventDate != null ?
                new ObjectParameter("CheckeventDate", checkeventDate) :
                new ObjectParameter("CheckeventDate", typeof(string));
    
            var eventDateStringParameter = eventDateString != null ?
                new ObjectParameter("eventDateString", eventDateString) :
                new ObjectParameter("eventDateString", typeof(string));
    
            var eventDateNepaliParameter = eventDateNepali != null ?
                new ObjectParameter("eventDateNepali", eventDateNepali) :
                new ObjectParameter("eventDateNepali", typeof(string));
    
            var eventStartTimeParameter = eventStartTime != null ?
                new ObjectParameter("eventStartTime", eventStartTime) :
                new ObjectParameter("eventStartTime", typeof(string));
    
            var eventEndTimeParameter = eventEndTime != null ?
                new ObjectParameter("eventEndTime", eventEndTime) :
                new ObjectParameter("eventEndTime", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("eventDescription", eventDescription) :
                new ObjectParameter("eventDescription", typeof(string));
    
            var venueNameParameter = venueName != null ?
                new ObjectParameter("venueName", venueName) :
                new ObjectParameter("venueName", typeof(string));
    
            var venueAddressParameter = venueAddress != null ?
                new ObjectParameter("venueAddress", venueAddress) :
                new ObjectParameter("venueAddress", typeof(string));
    
            var venueImagePath1Parameter = venueImagePath1 != null ?
                new ObjectParameter("venueImagePath1", venueImagePath1) :
                new ObjectParameter("venueImagePath1", typeof(string));
    
            var venueCapacityParameter = venueCapacity.HasValue ?
                new ObjectParameter("venueCapacity", venueCapacity) :
                new ObjectParameter("venueCapacity", typeof(long));
    
            var parkingAvailableParameter = parkingAvailable != null ?
                new ObjectParameter("parkingAvailable", parkingAvailable) :
                new ObjectParameter("parkingAvailable", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(int));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("eventType", eventType) :
                new ObjectParameter("eventType", typeof(string));
    
            var organizerNameParameter = organizerName != null ?
                new ObjectParameter("organizerName", organizerName) :
                new ObjectParameter("organizerName", typeof(string));
    
            var bannerImagePathParameter = bannerImagePath != null ?
                new ObjectParameter("bannerImagePath", bannerImagePath) :
                new ObjectParameter("bannerImagePath", typeof(string));
    
            var showArrivalTimeParameter = showArrivalTime.HasValue ?
                new ObjectParameter("showArrivalTime", showArrivalTime) :
                new ObjectParameter("showArrivalTime", typeof(bool));
    
            var arrivalTimeParameter = arrivalTime != null ?
                new ObjectParameter("arrivalTime", arrivalTime) :
                new ObjectParameter("arrivalTime", typeof(string));
    
            var isSingleDayEventParameter = isSingleDayEvent.HasValue ?
                new ObjectParameter("isSingleDayEvent", isSingleDayEvent) :
                new ObjectParameter("isSingleDayEvent", typeof(bool));
    
            var merchantCodeParameter = merchantCode != null ?
                new ObjectParameter("merchantCode", merchantCode) :
                new ObjectParameter("merchantCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var customerMobileParameter = customerMobile != null ?
                new ObjectParameter("customerMobile", customerMobile) :
                new ObjectParameter("customerMobile", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("customerEmail", customerEmail) :
                new ObjectParameter("customerEmail", typeof(string));
    
            var ticketCategoryIdParameter = ticketCategoryId.HasValue ?
                new ObjectParameter("ticketCategoryId", ticketCategoryId) :
                new ObjectParameter("ticketCategoryId", typeof(long));
    
            var ticketCategoryNameParameter = ticketCategoryName != null ?
                new ObjectParameter("ticketCategoryName", ticketCategoryName) :
                new ObjectParameter("ticketCategoryName", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("sectionName", sectionName) :
                new ObjectParameter("sectionName", typeof(string));
    
            var ticketRateParameter = ticketRate.HasValue ?
                new ObjectParameter("ticketRate", ticketRate) :
                new ObjectParameter("ticketRate", typeof(decimal));
    
            var noOfTicketParameter = noOfTicket.HasValue ?
                new ObjectParameter("noOfTicket", noOfTicket) :
                new ObjectParameter("noOfTicket", typeof(long));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("totalPrice", totalPrice) :
                new ObjectParameter("totalPrice", typeof(decimal));
    
            var paymentMethodIdParameter = paymentMethodId.HasValue ?
                new ObjectParameter("paymentMethodId", paymentMethodId) :
                new ObjectParameter("paymentMethodId", typeof(int));
    
            var paymentMethodCodeParameter = paymentMethodCode != null ?
                new ObjectParameter("paymentMethodCode", paymentMethodCode) :
                new ObjectParameter("paymentMethodCode", typeof(string));
    
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("paymentMethodName", paymentMethodName) :
                new ObjectParameter("paymentMethodName", typeof(string));
    
            var paymentMerchantIdParameter = paymentMerchantId != null ?
                new ObjectParameter("paymentMerchantId", paymentMerchantId) :
                new ObjectParameter("paymentMerchantId", typeof(string));
    
            var isBookedParameter = isBooked.HasValue ?
                new ObjectParameter("IsBooked", isBooked) :
                new ObjectParameter("IsBooked", typeof(bool));
    
            var isPaymentDoneParameter = isPaymentDone.HasValue ?
                new ObjectParameter("IsPaymentDone", isPaymentDone) :
                new ObjectParameter("IsPaymentDone", typeof(bool));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var ticketURLParameter = ticketURL != null ?
                new ObjectParameter("TicketURL", ticketURL) :
                new ObjectParameter("TicketURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkPaymentDoneParameter = checkPaymentDone.HasValue ?
                new ObjectParameter("CheckPaymentDone", checkPaymentDone) :
                new ObjectParameter("CheckPaymentDone", typeof(int));
    
            var checkIsBookedParameter = checkIsBooked.HasValue ?
                new ObjectParameter("CheckIsBooked", checkIsBooked) :
                new ObjectParameter("CheckIsBooked", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EventDetails_Get_Result>("sp_EventDetails_Get", memberIdParameter, eventIdParameter, eventNameParameter, checkeventDateParameter, eventDateStringParameter, eventDateNepaliParameter, eventStartTimeParameter, eventEndTimeParameter, eventDescriptionParameter, venueNameParameter, venueAddressParameter, venueImagePath1Parameter, venueCapacityParameter, parkingAvailableParameter, latitudeParameter, longitudeParameter, eventTypeParameter, organizerNameParameter, bannerImagePathParameter, showArrivalTimeParameter, arrivalTimeParameter, isSingleDayEventParameter, merchantCodeParameter, customerNameParameter, customerMobileParameter, customerEmailParameter, ticketCategoryIdParameter, ticketCategoryNameParameter, sectionNameParameter, ticketRateParameter, noOfTicketParameter, totalPriceParameter, paymentMethodIdParameter, paymentMethodCodeParameter, paymentMethodNameParameter, paymentMerchantIdParameter, isBookedParameter, isPaymentDoneParameter, orderIdParameter, transactionUniqueIdParameter, ticketURLParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkPaymentDoneParameter, checkIsBookedParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int sp_EventDetails_Update(Nullable<long> memberId, Nullable<long> eventId, string eventName, Nullable<System.DateTime> eventDate, string eventDateString, string eventDateNepali, string eventStartTime, string eventEndTime, string eventDescription, string venueName, string venueAddress, string venueImagePath1, Nullable<long> venueCapacity, string parkingAvailable, Nullable<int> latitude, Nullable<int> longitude, string eventType, string organizerName, string bannerImagePath, Nullable<bool> showArrivalTime, string arrivalTime, Nullable<bool> isSingleDayEvent, string merchantCode, string customerName, string customerMobile, string customerEmail, Nullable<long> ticketCategoryId, string ticketCategoryName, string sectionName, Nullable<decimal> ticketRate, Nullable<long> noOfTicket, Nullable<decimal> totalPrice, Nullable<int> paymentMethodId, string paymentMethodCode, string paymentMethodName, string paymentMerchantId, Nullable<bool> isBooked, Nullable<bool> isPaymentDone, string orderId, string transactionUniqueId, string ticketURL, Nullable<long> createdBy, string createdByName, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id, string eventTermsAndCondition, string eventContactDtls, Nullable<System.DateTime> ticketSentDatetime)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(long));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("eventName", eventName) :
                new ObjectParameter("eventName", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("eventDate", eventDate) :
                new ObjectParameter("eventDate", typeof(System.DateTime));
    
            var eventDateStringParameter = eventDateString != null ?
                new ObjectParameter("eventDateString", eventDateString) :
                new ObjectParameter("eventDateString", typeof(string));
    
            var eventDateNepaliParameter = eventDateNepali != null ?
                new ObjectParameter("eventDateNepali", eventDateNepali) :
                new ObjectParameter("eventDateNepali", typeof(string));
    
            var eventStartTimeParameter = eventStartTime != null ?
                new ObjectParameter("eventStartTime", eventStartTime) :
                new ObjectParameter("eventStartTime", typeof(string));
    
            var eventEndTimeParameter = eventEndTime != null ?
                new ObjectParameter("eventEndTime", eventEndTime) :
                new ObjectParameter("eventEndTime", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("eventDescription", eventDescription) :
                new ObjectParameter("eventDescription", typeof(string));
    
            var venueNameParameter = venueName != null ?
                new ObjectParameter("venueName", venueName) :
                new ObjectParameter("venueName", typeof(string));
    
            var venueAddressParameter = venueAddress != null ?
                new ObjectParameter("venueAddress", venueAddress) :
                new ObjectParameter("venueAddress", typeof(string));
    
            var venueImagePath1Parameter = venueImagePath1 != null ?
                new ObjectParameter("venueImagePath1", venueImagePath1) :
                new ObjectParameter("venueImagePath1", typeof(string));
    
            var venueCapacityParameter = venueCapacity.HasValue ?
                new ObjectParameter("venueCapacity", venueCapacity) :
                new ObjectParameter("venueCapacity", typeof(long));
    
            var parkingAvailableParameter = parkingAvailable != null ?
                new ObjectParameter("parkingAvailable", parkingAvailable) :
                new ObjectParameter("parkingAvailable", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(int));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("eventType", eventType) :
                new ObjectParameter("eventType", typeof(string));
    
            var organizerNameParameter = organizerName != null ?
                new ObjectParameter("organizerName", organizerName) :
                new ObjectParameter("organizerName", typeof(string));
    
            var bannerImagePathParameter = bannerImagePath != null ?
                new ObjectParameter("bannerImagePath", bannerImagePath) :
                new ObjectParameter("bannerImagePath", typeof(string));
    
            var showArrivalTimeParameter = showArrivalTime.HasValue ?
                new ObjectParameter("showArrivalTime", showArrivalTime) :
                new ObjectParameter("showArrivalTime", typeof(bool));
    
            var arrivalTimeParameter = arrivalTime != null ?
                new ObjectParameter("arrivalTime", arrivalTime) :
                new ObjectParameter("arrivalTime", typeof(string));
    
            var isSingleDayEventParameter = isSingleDayEvent.HasValue ?
                new ObjectParameter("isSingleDayEvent", isSingleDayEvent) :
                new ObjectParameter("isSingleDayEvent", typeof(bool));
    
            var merchantCodeParameter = merchantCode != null ?
                new ObjectParameter("merchantCode", merchantCode) :
                new ObjectParameter("merchantCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var customerMobileParameter = customerMobile != null ?
                new ObjectParameter("customerMobile", customerMobile) :
                new ObjectParameter("customerMobile", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("customerEmail", customerEmail) :
                new ObjectParameter("customerEmail", typeof(string));
    
            var ticketCategoryIdParameter = ticketCategoryId.HasValue ?
                new ObjectParameter("ticketCategoryId", ticketCategoryId) :
                new ObjectParameter("ticketCategoryId", typeof(long));
    
            var ticketCategoryNameParameter = ticketCategoryName != null ?
                new ObjectParameter("ticketCategoryName", ticketCategoryName) :
                new ObjectParameter("ticketCategoryName", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("sectionName", sectionName) :
                new ObjectParameter("sectionName", typeof(string));
    
            var ticketRateParameter = ticketRate.HasValue ?
                new ObjectParameter("ticketRate", ticketRate) :
                new ObjectParameter("ticketRate", typeof(decimal));
    
            var noOfTicketParameter = noOfTicket.HasValue ?
                new ObjectParameter("noOfTicket", noOfTicket) :
                new ObjectParameter("noOfTicket", typeof(long));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("totalPrice", totalPrice) :
                new ObjectParameter("totalPrice", typeof(decimal));
    
            var paymentMethodIdParameter = paymentMethodId.HasValue ?
                new ObjectParameter("paymentMethodId", paymentMethodId) :
                new ObjectParameter("paymentMethodId", typeof(int));
    
            var paymentMethodCodeParameter = paymentMethodCode != null ?
                new ObjectParameter("paymentMethodCode", paymentMethodCode) :
                new ObjectParameter("paymentMethodCode", typeof(string));
    
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("paymentMethodName", paymentMethodName) :
                new ObjectParameter("paymentMethodName", typeof(string));
    
            var paymentMerchantIdParameter = paymentMerchantId != null ?
                new ObjectParameter("paymentMerchantId", paymentMerchantId) :
                new ObjectParameter("paymentMerchantId", typeof(string));
    
            var isBookedParameter = isBooked.HasValue ?
                new ObjectParameter("IsBooked", isBooked) :
                new ObjectParameter("IsBooked", typeof(bool));
    
            var isPaymentDoneParameter = isPaymentDone.HasValue ?
                new ObjectParameter("IsPaymentDone", isPaymentDone) :
                new ObjectParameter("IsPaymentDone", typeof(bool));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var ticketURLParameter = ticketURL != null ?
                new ObjectParameter("TicketURL", ticketURL) :
                new ObjectParameter("TicketURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var eventTermsAndConditionParameter = eventTermsAndCondition != null ?
                new ObjectParameter("eventTermsAndCondition", eventTermsAndCondition) :
                new ObjectParameter("eventTermsAndCondition", typeof(string));
    
            var eventContactDtlsParameter = eventContactDtls != null ?
                new ObjectParameter("eventContactDtls", eventContactDtls) :
                new ObjectParameter("eventContactDtls", typeof(string));
    
            var ticketSentDatetimeParameter = ticketSentDatetime.HasValue ?
                new ObjectParameter("ticketSentDatetime", ticketSentDatetime) :
                new ObjectParameter("ticketSentDatetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EventDetails_Update", memberIdParameter, eventIdParameter, eventNameParameter, eventDateParameter, eventDateStringParameter, eventDateNepaliParameter, eventStartTimeParameter, eventEndTimeParameter, eventDescriptionParameter, venueNameParameter, venueAddressParameter, venueImagePath1Parameter, venueCapacityParameter, parkingAvailableParameter, latitudeParameter, longitudeParameter, eventTypeParameter, organizerNameParameter, bannerImagePathParameter, showArrivalTimeParameter, arrivalTimeParameter, isSingleDayEventParameter, merchantCodeParameter, customerNameParameter, customerMobileParameter, customerEmailParameter, ticketCategoryIdParameter, ticketCategoryNameParameter, sectionNameParameter, ticketRateParameter, noOfTicketParameter, totalPriceParameter, paymentMethodIdParameter, paymentMethodCodeParameter, paymentMethodNameParameter, paymentMerchantIdParameter, isBookedParameter, isPaymentDoneParameter, orderIdParameter, transactionUniqueIdParameter, ticketURLParameter, createdByParameter, createdByNameParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter, eventTermsAndConditionParameter, eventContactDtlsParameter, ticketSentDatetimeParameter);
        }
    
        public virtual int sp_EventDetailsExpire_Update()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EventDetailsExpire_Update");
        }
    
        public virtual ObjectResult<sp_ExcelNotificationCampaignIDs_Get_Result> sp_ExcelNotificationCampaignIDs_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> notificationCampaignID, string scheduleDateTime)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var notificationCampaignIDParameter = notificationCampaignID.HasValue ?
                new ObjectParameter("NotificationCampaignID", notificationCampaignID) :
                new ObjectParameter("NotificationCampaignID", typeof(long));
    
            var scheduleDateTimeParameter = scheduleDateTime != null ?
                new ObjectParameter("ScheduleDateTime", scheduleDateTime) :
                new ObjectParameter("ScheduleDateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ExcelNotificationCampaignIDs_Get_Result>("sp_ExcelNotificationCampaignIDs_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, notificationCampaignIDParameter, scheduleDateTimeParameter);
        }
    
        public virtual ObjectResult<sp_ExportData_Get_Result> sp_ExportData_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> type, string checkCreatedDate, string startDate, string endDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ExportData_Get_Result>("sp_ExportData_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, typeParameter, checkCreatedDateParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_Feedback_Datatable_Result> sp_Feedback_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Feedback_Datatable_Result>("sp_Feedback_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_Feedback_Get_Result> sp_Feedback_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string transactionUniqueId, Nullable<int> status, Nullable<int> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Feedback_Get_Result>("sp_Feedback_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, transactionUniqueIdParameter, statusParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_FlightBookingDetails_Datatable_Result> sp_FlightBookingDetails_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string flightid, Nullable<long> bookingId, string pnrNumber, string flightno, Nullable<long> memberId, string departuretime, Nullable<int> checkInbound, Nullable<int> checkFlightBooked, Nullable<int> checkTTL, string startDate, string endDate, string tripType)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var flightidParameter = flightid != null ?
                new ObjectParameter("Flightid", flightid) :
                new ObjectParameter("Flightid", typeof(string));
    
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var pnrNumberParameter = pnrNumber != null ?
                new ObjectParameter("PnrNumber", pnrNumber) :
                new ObjectParameter("PnrNumber", typeof(string));
    
            var flightnoParameter = flightno != null ?
                new ObjectParameter("flightno", flightno) :
                new ObjectParameter("flightno", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var departuretimeParameter = departuretime != null ?
                new ObjectParameter("Departuretime", departuretime) :
                new ObjectParameter("Departuretime", typeof(string));
    
            var checkInboundParameter = checkInbound.HasValue ?
                new ObjectParameter("CheckInbound", checkInbound) :
                new ObjectParameter("CheckInbound", typeof(int));
    
            var checkFlightBookedParameter = checkFlightBooked.HasValue ?
                new ObjectParameter("CheckFlightBooked", checkFlightBooked) :
                new ObjectParameter("CheckFlightBooked", typeof(int));
    
            var checkTTLParameter = checkTTL.HasValue ?
                new ObjectParameter("CheckTTL", checkTTL) :
                new ObjectParameter("CheckTTL", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var tripTypeParameter = tripType != null ?
                new ObjectParameter("TripType", tripType) :
                new ObjectParameter("TripType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FlightBookingDetails_Datatable_Result>("sp_FlightBookingDetails_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, flightidParameter, bookingIdParameter, pnrNumberParameter, flightnoParameter, memberIdParameter, departuretimeParameter, checkInboundParameter, checkFlightBookedParameter, checkTTLParameter, startDateParameter, endDateParameter, tripTypeParameter);
        }
    
        public virtual ObjectResult<sp_FlightBookingDetails_Get_Result> sp_FlightBookingDetails_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string flightid, Nullable<long> bookingId, Nullable<long> memberId, string departuretime, Nullable<int> checkInbound, Nullable<int> checkFlightBooked, Nullable<int> checkTTL, string startDate, string endDate, string tripType, string logIDs, string flightno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var flightidParameter = flightid != null ?
                new ObjectParameter("Flightid", flightid) :
                new ObjectParameter("Flightid", typeof(string));
    
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var departuretimeParameter = departuretime != null ?
                new ObjectParameter("Departuretime", departuretime) :
                new ObjectParameter("Departuretime", typeof(string));
    
            var checkInboundParameter = checkInbound.HasValue ?
                new ObjectParameter("CheckInbound", checkInbound) :
                new ObjectParameter("CheckInbound", typeof(int));
    
            var checkFlightBookedParameter = checkFlightBooked.HasValue ?
                new ObjectParameter("CheckFlightBooked", checkFlightBooked) :
                new ObjectParameter("CheckFlightBooked", typeof(int));
    
            var checkTTLParameter = checkTTL.HasValue ?
                new ObjectParameter("CheckTTL", checkTTL) :
                new ObjectParameter("CheckTTL", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var tripTypeParameter = tripType != null ?
                new ObjectParameter("TripType", tripType) :
                new ObjectParameter("TripType", typeof(string));
    
            var logIDsParameter = logIDs != null ?
                new ObjectParameter("LogIDs", logIDs) :
                new ObjectParameter("LogIDs", typeof(string));
    
            var flightnoParameter = flightno != null ?
                new ObjectParameter("Flightno", flightno) :
                new ObjectParameter("Flightno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FlightBookingDetails_Get_Result>("sp_FlightBookingDetails_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, flightidParameter, bookingIdParameter, memberIdParameter, departuretimeParameter, checkInboundParameter, checkFlightBookedParameter, checkTTLParameter, startDateParameter, endDateParameter, tripTypeParameter, logIDsParameter, flightnoParameter);
        }
    
        public virtual ObjectResult<sp_FlightBookingDetails_Get_plasma_Result> sp_FlightBookingDetails_Get_plasma(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string flightid, Nullable<long> bookingId, Nullable<long> memberId, string departuretime, Nullable<int> checkFlightBooked, Nullable<int> checkTTL, string startDate, string endDate, string tripType, string logIDs, string flightno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var flightidParameter = flightid != null ?
                new ObjectParameter("Flightid", flightid) :
                new ObjectParameter("Flightid", typeof(string));
    
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var departuretimeParameter = departuretime != null ?
                new ObjectParameter("Departuretime", departuretime) :
                new ObjectParameter("Departuretime", typeof(string));
    
            var checkFlightBookedParameter = checkFlightBooked.HasValue ?
                new ObjectParameter("CheckFlightBooked", checkFlightBooked) :
                new ObjectParameter("CheckFlightBooked", typeof(int));
    
            var checkTTLParameter = checkTTL.HasValue ?
                new ObjectParameter("CheckTTL", checkTTL) :
                new ObjectParameter("CheckTTL", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var tripTypeParameter = tripType != null ?
                new ObjectParameter("TripType", tripType) :
                new ObjectParameter("TripType", typeof(string));
    
            var logIDsParameter = logIDs != null ?
                new ObjectParameter("LogIDs", logIDs) :
                new ObjectParameter("LogIDs", typeof(string));
    
            var flightnoParameter = flightno != null ?
                new ObjectParameter("Flightno", flightno) :
                new ObjectParameter("Flightno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FlightBookingDetails_Get_plasma_Result>("sp_FlightBookingDetails_Get_plasma", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, flightidParameter, bookingIdParameter, memberIdParameter, departuretimeParameter, checkFlightBookedParameter, checkTTLParameter, startDateParameter, endDateParameter, tripTypeParameter, logIDsParameter, flightnoParameter);
        }
    
        public virtual ObjectResult<sp_FlightPassengersDetails_Datatable_Result> sp_FlightPassengersDetails_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, Nullable<int> checkAdmin, Nullable<long> bookingId, string firstName, string lastName, string type, string gender)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkAdminParameter = checkAdmin.HasValue ?
                new ObjectParameter("CheckAdmin", checkAdmin) :
                new ObjectParameter("CheckAdmin", typeof(int));
    
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FlightPassengersDetails_Datatable_Result>("sp_FlightPassengersDetails_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, checkAdminParameter, bookingIdParameter, firstNameParameter, lastNameParameter, typeParameter, genderParameter);
        }
    
        public virtual ObjectResult<sp_FlightPassengersDetails_Get_Result> sp_FlightPassengersDetails_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> bookingId, string firstName, string lastName, string type, string flightid, string gender, string remarks)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var flightidParameter = flightid != null ?
                new ObjectParameter("Flightid", flightid) :
                new ObjectParameter("Flightid", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FlightPassengersDetails_Get_Result>("sp_FlightPassengersDetails_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, bookingIdParameter, firstNameParameter, lastNameParameter, typeParameter, flightidParameter, genderParameter, remarksParameter);
        }
    
        public virtual ObjectResult<SP_Get_RunningTotal_Result> SP_Get_RunningTotal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Get_RunningTotal_Result>("SP_Get_RunningTotal");
        }
    
        public virtual ObjectResult<sp_GetFlightPassengersDetails_Result> sp_GetFlightPassengersDetails(string flightId, string bookingId, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, Nullable<int> isActive, Nullable<int> id, string updatedByName)
        {
            var flightIdParameter = flightId != null ?
                new ObjectParameter("FlightId", flightId) :
                new ObjectParameter("FlightId", typeof(string));
    
            var bookingIdParameter = bookingId != null ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFlightPassengersDetails_Result>("sp_GetFlightPassengersDetails", flightIdParameter, bookingIdParameter, createdByParameter, createdByNameParameter, updatedByParameter, isActiveParameter, idParameter, updatedByNameParameter);
        }
    
        public virtual ObjectResult<sp_GetFlightSwitchSettings_Result> sp_GetFlightSwitchSettings(Nullable<int> flightSwitchType, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, Nullable<int> isActive, Nullable<int> id, string updatedByName)
        {
            var flightSwitchTypeParameter = flightSwitchType.HasValue ?
                new ObjectParameter("FlightSwitchType", flightSwitchType) :
                new ObjectParameter("FlightSwitchType", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFlightSwitchSettings_Result>("sp_GetFlightSwitchSettings", flightSwitchTypeParameter, createdByParameter, createdByNameParameter, updatedByParameter, isActiveParameter, idParameter, updatedByNameParameter);
        }
    
        public virtual ObjectResult<sp_getfromReceipts_Result> sp_getfromReceipts(string txnId)
        {
            var txnIdParameter = txnId != null ?
                new ObjectParameter("txnId", txnId) :
                new ObjectParameter("txnId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getfromReceipts_Result>("sp_getfromReceipts", txnIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getKYC_isverified(string contactNo)
        {
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getKYC_isverified", contactNoParameter);
        }
    
        public virtual ObjectResult<sp_GetMerchantSortOrder_Result> sp_GetMerchantSortOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMerchantSortOrder_Result>("sp_GetMerchantSortOrder");
        }
    
        public virtual ObjectResult<sp_GetMerchantUser_Result> sp_GetMerchantUser(string aPI_User)
        {
            var aPI_UserParameter = aPI_User != null ?
                new ObjectParameter("API_User", aPI_User) :
                new ObjectParameter("API_User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMerchantUser_Result>("sp_GetMerchantUser", aPI_UserParameter);
        }
    
        public virtual ObjectResult<sp_GetMerchantUserdetail_Result> sp_GetMerchantUserdetail(string aPIUser)
        {
            var aPIUserParameter = aPIUser != null ?
                new ObjectParameter("APIUser", aPIUser) :
                new ObjectParameter("APIUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMerchantUserdetail_Result>("sp_GetMerchantUserdetail", aPIUserParameter);
        }
    
        public virtual ObjectResult<sp_GetMyPayments_Result> sp_GetMyPayments(string memberID, string providerTypeID)
        {
            var memberIDParameter = memberID != null ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(string));
    
            var providerTypeIDParameter = providerTypeID != null ?
                new ObjectParameter("ProviderTypeID", providerTypeID) :
                new ObjectParameter("ProviderTypeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMyPayments_Result>("sp_GetMyPayments", memberIDParameter, providerTypeIDParameter);
        }
    
        public virtual ObjectResult<string> sp_getNCHLGovtServiceName(string nCHLServiceName)
        {
            var nCHLServiceNameParameter = nCHLServiceName != null ?
                new ObjectParameter("NCHLServiceName", nCHLServiceName) :
                new ObjectParameter("NCHLServiceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getNCHLGovtServiceName", nCHLServiceNameParameter);
        }
    
        public virtual ObjectResult<sp_GetPlasmaTechIssueTicketResDetails_Result> sp_GetPlasmaTechIssueTicketResDetails(string flightId, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, Nullable<int> isActive, Nullable<int> id, string updatedByName, string memberId, string pnrNo, string returnFlightId)
        {
            var flightIdParameter = flightId != null ?
                new ObjectParameter("FlightId", flightId) :
                new ObjectParameter("FlightId", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var pnrNoParameter = pnrNo != null ?
                new ObjectParameter("PnrNo", pnrNo) :
                new ObjectParameter("PnrNo", typeof(string));
    
            var returnFlightIdParameter = returnFlightId != null ?
                new ObjectParameter("ReturnFlightId", returnFlightId) :
                new ObjectParameter("ReturnFlightId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPlasmaTechIssueTicketResDetails_Result>("sp_GetPlasmaTechIssueTicketResDetails", flightIdParameter, createdByParameter, createdByNameParameter, updatedByParameter, isActiveParameter, idParameter, updatedByNameParameter, memberIdParameter, pnrNoParameter, returnFlightIdParameter);
        }
    
        public virtual ObjectResult<sp_GetPlasmaTechPnrNoTicketResDetails_Result> sp_GetPlasmaTechPnrNoTicketResDetails(string flightId, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, Nullable<int> isActive, Nullable<int> id, string updatedByName, string memberId, string pnrNo, string returnFlightId)
        {
            var flightIdParameter = flightId != null ?
                new ObjectParameter("FlightId", flightId) :
                new ObjectParameter("FlightId", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var pnrNoParameter = pnrNo != null ?
                new ObjectParameter("PnrNo", pnrNo) :
                new ObjectParameter("PnrNo", typeof(string));
    
            var returnFlightIdParameter = returnFlightId != null ?
                new ObjectParameter("ReturnFlightId", returnFlightId) :
                new ObjectParameter("ReturnFlightId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPlasmaTechPnrNoTicketResDetails_Result>("sp_GetPlasmaTechPnrNoTicketResDetails", flightIdParameter, createdByParameter, createdByNameParameter, updatedByParameter, isActiveParameter, idParameter, updatedByNameParameter, memberIdParameter, pnrNoParameter, returnFlightIdParameter);
        }
    
        public virtual ObjectResult<string> sp_GetPrivateKey_Merchant(string merchantUniqueId)
        {
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetPrivateKey_Merchant", merchantUniqueIdParameter);
        }
    
        public virtual ObjectResult<string> sp_GetPublicKey_Merchant(string merchantUniqueId)
        {
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetPublicKey_Merchant", merchantUniqueIdParameter);
        }
    
        public virtual ObjectResult<sp_getReceipt_Result> sp_getReceipt(string txnId)
        {
            var txnIdParameter = txnId != null ?
                new ObjectParameter("txnId", txnId) :
                new ObjectParameter("txnId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getReceipt_Result>("sp_getReceipt", txnIdParameter);
        }
    
        public virtual ObjectResult<sp_getReceiptVendorResponse_Result> sp_getReceiptVendorResponse(string sessionId, string serviceId, string txnId)
        {
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(string));
    
            var serviceIdParameter = serviceId != null ?
                new ObjectParameter("serviceId", serviceId) :
                new ObjectParameter("serviceId", typeof(string));
    
            var txnIdParameter = txnId != null ?
                new ObjectParameter("txnId", txnId) :
                new ObjectParameter("txnId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getReceiptVendorResponse_Result>("sp_getReceiptVendorResponse", sessionIdParameter, serviceIdParameter, txnIdParameter);
        }
    
        public virtual ObjectResult<sp_GiftCashbackHistory_Datatable_Result> sp_GiftCashbackHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> createdBy, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> memberId, string transactionId, Nullable<decimal> prize, Nullable<int> status, string contactNumber, string memberName)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var prizeParameter = prize.HasValue ?
                new ObjectParameter("Prize", prize) :
                new ObjectParameter("Prize", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GiftCashbackHistory_Datatable_Result>("sp_GiftCashbackHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, createdByParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, memberIdParameter, transactionIdParameter, prizeParameter, statusParameter, contactNumberParameter, memberNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GiftCashbackHistory_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> createdBy, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> memberId, string transactionId, Nullable<decimal> prize, Nullable<int> status, string contactNumber, string memberName)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var prizeParameter = prize.HasValue ?
                new ObjectParameter("Prize", prize) :
                new ObjectParameter("Prize", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GiftCashbackHistory_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, createdByParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, memberIdParameter, transactionIdParameter, prizeParameter, statusParameter, contactNumberParameter, memberNameParameter);
        }
    
        public virtual ObjectResult<sp_GiftMPCoinsHistory_Datatable_Result> sp_GiftMPCoinsHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> createdBy, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> memberId, string transactionId, Nullable<decimal> prize, Nullable<int> status, string contactNumber, string memberName)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var prizeParameter = prize.HasValue ?
                new ObjectParameter("Prize", prize) :
                new ObjectParameter("Prize", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GiftMPCoinsHistory_Datatable_Result>("sp_GiftMPCoinsHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, createdByParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, memberIdParameter, transactionIdParameter, prizeParameter, statusParameter, contactNumberParameter, memberNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GiftMPCoinsHistory_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> createdBy, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> memberId, string transactionId, Nullable<decimal> prize, Nullable<int> status, string contactNumber, string memberName)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var prizeParameter = prize.HasValue ?
                new ObjectParameter("Prize", prize) :
                new ObjectParameter("Prize", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GiftMPCoinsHistory_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, createdByParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, memberIdParameter, transactionIdParameter, prizeParameter, statusParameter, contactNumberParameter, memberNameParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_InsertMyPayments_Result> sp_InsertMyPayments(Nullable<int> id, string jsonData, string providerName, string providerTypeId, string memberID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("JsonData", jsonData) :
                new ObjectParameter("JsonData", typeof(string));
    
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var providerTypeIdParameter = providerTypeId != null ?
                new ObjectParameter("ProviderTypeId", providerTypeId) :
                new ObjectParameter("ProviderTypeId", typeof(string));
    
            var memberIDParameter = memberID != null ?
                new ObjectParameter("memberID", memberID) :
                new ObjectParameter("memberID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertMyPayments_Result>("sp_InsertMyPayments", idParameter, jsonDataParameter, providerNameParameter, providerTypeIdParameter, memberIDParameter);
        }
    
        public virtual ObjectResult<sp_InsuranceDetail_Datatable_Result> sp_InsuranceDetail_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string transactionUniqueId, Nullable<int> insuranceType, Nullable<int> vendorType, string customerId, string mobileNumber, string startDate, string endDate, Nullable<long> memberId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var insuranceTypeParameter = insuranceType.HasValue ?
                new ObjectParameter("InsuranceType", insuranceType) :
                new ObjectParameter("InsuranceType", typeof(int));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsuranceDetail_Datatable_Result>("sp_InsuranceDetail_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, transactionUniqueIdParameter, insuranceTypeParameter, vendorTypeParameter, customerIdParameter, mobileNumberParameter, startDateParameter, endDateParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_InsuranceDetail_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string transactionUniqueId, Nullable<int> insuranceType, Nullable<int> vendorType, string customerId, string mobileNumber, string startDate, string endDate, Nullable<long> memberId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var insuranceTypeParameter = insuranceType.HasValue ?
                new ObjectParameter("InsuranceType", insuranceType) :
                new ObjectParameter("InsuranceType", typeof(int));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_InsuranceDetail_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, transactionUniqueIdParameter, insuranceTypeParameter, vendorTypeParameter, customerIdParameter, mobileNumberParameter, startDateParameter, endDateParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<sp_InsuranceDetail_Get_Result> sp_InsuranceDetail_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string transactionUniqueId, Nullable<int> insuranceType, Nullable<int> vendorType, string customerId, string mobileNumber, string startDate, string endDate, Nullable<long> memberId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var insuranceTypeParameter = insuranceType.HasValue ?
                new ObjectParameter("InsuranceType", insuranceType) :
                new ObjectParameter("InsuranceType", typeof(int));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsuranceDetail_Get_Result>("sp_InsuranceDetail_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, transactionUniqueIdParameter, insuranceTypeParameter, vendorTypeParameter, customerIdParameter, mobileNumberParameter, startDateParameter, endDateParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<sp_KYCRemarks_Datatable_Result> sp_KYCRemarks_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string createdByName, string title, Nullable<int> id)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_KYCRemarks_Datatable_Result>("sp_KYCRemarks_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, createdByNameParameter, titleParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_KYCRemarks_Get_Result> sp_KYCRemarks_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string title)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_KYCRemarks_Get_Result>("sp_KYCRemarks_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, titleParameter);
        }
    
        public virtual ObjectResult<sp_KYCStatusHistory_Datatable_Result> sp_KYCStatusHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, Nullable<int> checkAdmin, Nullable<long> memberId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkAdminParameter = checkAdmin.HasValue ?
                new ObjectParameter("CheckAdmin", checkAdmin) :
                new ObjectParameter("CheckAdmin", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_KYCStatusHistory_Datatable_Result>("sp_KYCStatusHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, checkAdminParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<sp_KYCStatusHistory_Get_Result> sp_KYCStatusHistory_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> checkAdmin, Nullable<int> kYCStatus, Nullable<long> memberId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkAdminParameter = checkAdmin.HasValue ?
                new ObjectParameter("CheckAdmin", checkAdmin) :
                new ObjectParameter("CheckAdmin", typeof(int));
    
            var kYCStatusParameter = kYCStatus.HasValue ?
                new ObjectParameter("KYCStatus", kYCStatus) :
                new ObjectParameter("KYCStatus", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_KYCStatusHistory_Get_Result>("sp_KYCStatusHistory_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, checkAdminParameter, kYCStatusParameter, memberIdParameter);
        }
    
        public virtual ObjectResult<sp_LocalLevel_Get_Result> sp_LocalLevel_Get(string localLevel, string districtCode, string localLevelCode)
        {
            var localLevelParameter = localLevel != null ?
                new ObjectParameter("LocalLevel", localLevel) :
                new ObjectParameter("LocalLevel", typeof(string));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var localLevelCodeParameter = localLevelCode != null ?
                new ObjectParameter("LocalLevelCode", localLevelCode) :
                new ObjectParameter("LocalLevelCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LocalLevel_Get_Result>("sp_LocalLevel_Get", localLevelParameter, districtCodeParameter, localLevelCodeParameter);
        }
    
        public virtual ObjectResult<sp_Logs_Datatable_Result> sp_Logs_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> type, string startDate, string endDate, Nullable<long> createdBy, string userId, Nullable<int> userType, Nullable<int> oldUserStatus, string contactNumber, Nullable<int> logActivity)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var oldUserStatusParameter = oldUserStatus.HasValue ?
                new ObjectParameter("OldUserStatus", oldUserStatus) :
                new ObjectParameter("OldUserStatus", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var logActivityParameter = logActivity.HasValue ?
                new ObjectParameter("LogActivity", logActivity) :
                new ObjectParameter("LogActivity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Logs_Datatable_Result>("sp_Logs_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, typeParameter, startDateParameter, endDateParameter, createdByParameter, userIdParameter, userTypeParameter, oldUserStatusParameter, contactNumberParameter, logActivityParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Logs_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> type, string startDate, string endDate, Nullable<long> createdBy, string userId, Nullable<int> userType, Nullable<int> oldUserStatus, string contactNumber, Nullable<int> logActivity)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var oldUserStatusParameter = oldUserStatus.HasValue ?
                new ObjectParameter("OldUserStatus", oldUserStatus) :
                new ObjectParameter("OldUserStatus", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var logActivityParameter = logActivity.HasValue ?
                new ObjectParameter("LogActivity", logActivity) :
                new ObjectParameter("LogActivity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Logs_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, typeParameter, startDateParameter, endDateParameter, createdByParameter, userIdParameter, userTypeParameter, oldUserStatusParameter, contactNumberParameter, logActivityParameter);
        }
    
        public virtual ObjectResult<sp_logs_Get_Result> sp_logs_Get(Nullable<int> id, Nullable<long> memberId, string userId, Nullable<int> checkApprovedByadmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkAdmin, Nullable<long> userMemberId, Nullable<int> take, Nullable<int> skip, string deviceCode, Nullable<int> checkIsMobile, string platform, Nullable<int> type, Nullable<long> createdBy, string createdByName, string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, string action, string startDate, string endDate, Nullable<int> userType, Nullable<int> oldUserStatus, string contactNumber, Nullable<int> logActivity)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var checkApprovedByadminParameter = checkApprovedByadmin.HasValue ?
                new ObjectParameter("CheckApprovedByadmin", checkApprovedByadmin) :
                new ObjectParameter("CheckApprovedByadmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkAdminParameter = checkAdmin.HasValue ?
                new ObjectParameter("CheckAdmin", checkAdmin) :
                new ObjectParameter("CheckAdmin", typeof(int));
    
            var userMemberIdParameter = userMemberId.HasValue ?
                new ObjectParameter("UserMemberId", userMemberId) :
                new ObjectParameter("UserMemberId", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var checkIsMobileParameter = checkIsMobile.HasValue ?
                new ObjectParameter("CheckIsMobile", checkIsMobile) :
                new ObjectParameter("CheckIsMobile", typeof(int));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var oldUserStatusParameter = oldUserStatus.HasValue ?
                new ObjectParameter("OldUserStatus", oldUserStatus) :
                new ObjectParameter("OldUserStatus", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var logActivityParameter = logActivity.HasValue ?
                new ObjectParameter("LogActivity", logActivity) :
                new ObjectParameter("LogActivity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_logs_Get_Result>("sp_logs_Get", idParameter, memberIdParameter, userIdParameter, checkApprovedByadminParameter, checkDeleteParameter, checkActiveParameter, checkAdminParameter, userMemberIdParameter, takeParameter, skipParameter, deviceCodeParameter, checkIsMobileParameter, platformParameter, typeParameter, createdByParameter, createdByNameParameter, sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, actionParameter, startDateParameter, endDateParameter, userTypeParameter, oldUserStatusParameter, contactNumberParameter, logActivityParameter);
        }
    
        public virtual ObjectResult<sp_Marque_Datatable_Result> sp_Marque_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Marque_Datatable_Result>("sp_Marque_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_Marque_Get_Result> sp_Marque_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, string title, string description, Nullable<int> priority, Nullable<int> marqueFor, string link)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var marqueForParameter = marqueFor.HasValue ?
                new ObjectParameter("MarqueFor", marqueFor) :
                new ObjectParameter("MarqueFor", typeof(int));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Marque_Get_Result>("sp_Marque_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, titleParameter, descriptionParameter, priorityParameter, marqueForParameter, linkParameter);
        }
    
        public virtual ObjectResult<sp_Menus_Get_Result> sp_Menus_Get(Nullable<long> id, string menuName, Nullable<int> checkParentId, Nullable<int> roleId, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> take, Nullable<int> skip, Nullable<long> createdBy, string createdByName, Nullable<int> checkInnerUrl, Nullable<int> checkAdminMenu)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var menuNameParameter = menuName != null ?
                new ObjectParameter("MenuName", menuName) :
                new ObjectParameter("MenuName", typeof(string));
    
            var checkParentIdParameter = checkParentId.HasValue ?
                new ObjectParameter("CheckParentId", checkParentId) :
                new ObjectParameter("CheckParentId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkInnerUrlParameter = checkInnerUrl.HasValue ?
                new ObjectParameter("CheckInnerUrl", checkInnerUrl) :
                new ObjectParameter("CheckInnerUrl", typeof(int));
    
            var checkAdminMenuParameter = checkAdminMenu.HasValue ?
                new ObjectParameter("CheckAdminMenu", checkAdminMenu) :
                new ObjectParameter("CheckAdminMenu", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Menus_Get_Result>("sp_Menus_Get", idParameter, menuNameParameter, checkParentIdParameter, roleIdParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, takeParameter, skipParameter, createdByParameter, createdByNameParameter, checkInnerUrlParameter, checkAdminMenuParameter);
        }
    
        public virtual int sp_MenusAssign_Delete(Nullable<long> id, Nullable<int> menuId, Nullable<int> isDeleted, Nullable<int> isApprovedByAdmin, Nullable<int> isActive, Nullable<int> parentId, Nullable<int> roleId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MenusAssign_Delete", idParameter, menuIdParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, parentIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<sp_MenusAssign_Get_Result> sp_MenusAssign_Get(Nullable<long> id, Nullable<int> menuId, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> take, Nullable<int> skip, Nullable<long> createdBy, string createdByName, Nullable<int> checkParentId, Nullable<int> roleId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkParentIdParameter = checkParentId.HasValue ?
                new ObjectParameter("CheckParentId", checkParentId) :
                new ObjectParameter("CheckParentId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MenusAssign_Get_Result>("sp_MenusAssign_Get", idParameter, menuIdParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, takeParameter, skipParameter, createdByParameter, createdByNameParameter, checkParentIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<sp_Merchant_Datatable_Result> sp_Merchant_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string merchantUniqueId, string name, string emailID, string contactNo, string startDate, string endDate, Nullable<int> checkPasswordReset, Nullable<int> merchantType)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkPasswordResetParameter = checkPasswordReset.HasValue ?
                new ObjectParameter("CheckPasswordReset", checkPasswordReset) :
                new ObjectParameter("CheckPasswordReset", typeof(int));
    
            var merchantTypeParameter = merchantType.HasValue ?
                new ObjectParameter("MerchantType", merchantType) :
                new ObjectParameter("MerchantType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Merchant_Datatable_Result>("sp_Merchant_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, merchantUniqueIdParameter, nameParameter, emailIDParameter, contactNoParameter, startDateParameter, endDateParameter, checkPasswordResetParameter, merchantTypeParameter);
        }
    
        public virtual ObjectResult<sp_Merchant_DumpGet_Result> sp_Merchant_DumpGet(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string merchantUniqueId, string firstName, string emailID, string contactNo, string startDate, string endDate, Nullable<int> checkPasswordReset, Nullable<int> merchantType)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkPasswordResetParameter = checkPasswordReset.HasValue ?
                new ObjectParameter("CheckPasswordReset", checkPasswordReset) :
                new ObjectParameter("CheckPasswordReset", typeof(int));
    
            var merchantTypeParameter = merchantType.HasValue ?
                new ObjectParameter("MerchantType", merchantType) :
                new ObjectParameter("MerchantType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Merchant_DumpGet_Result>("sp_Merchant_DumpGet", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, merchantUniqueIdParameter, firstNameParameter, emailIDParameter, contactNoParameter, startDateParameter, endDateParameter, checkPasswordResetParameter, merchantTypeParameter);
        }
    
        public virtual ObjectResult<sp_Merchant_Get_Result> sp_Merchant_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> memberId, Nullable<long> createdBy, string createdByName, string merchantUniqueId, string firstName, string emailID, string contactNo, string startDate, string endDate, Nullable<int> checkPasswordReset, string userName, Nullable<long> merchantMemberId, Nullable<int> roleId, string organizationName, Nullable<int> merchantType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkPasswordResetParameter = checkPasswordReset.HasValue ?
                new ObjectParameter("CheckPasswordReset", checkPasswordReset) :
                new ObjectParameter("CheckPasswordReset", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var organizationNameParameter = organizationName != null ?
                new ObjectParameter("OrganizationName", organizationName) :
                new ObjectParameter("OrganizationName", typeof(string));
    
            var merchantTypeParameter = merchantType.HasValue ?
                new ObjectParameter("MerchantType", merchantType) :
                new ObjectParameter("MerchantType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Merchant_Get_Result>("sp_Merchant_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, memberIdParameter, createdByParameter, createdByNameParameter, merchantUniqueIdParameter, firstNameParameter, emailIDParameter, contactNoParameter, startDateParameter, endDateParameter, checkPasswordResetParameter, userNameParameter, merchantMemberIdParameter, roleIdParameter, organizationNameParameter, merchantTypeParameter);
        }
    
        public virtual ObjectResult<sp_MerchantBankDetail_Datatable_Result> sp_MerchantBankDetail_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string name, string accountNumber, string merchantId, string bankCode, string bankName, string branchId, string branchName, Nullable<int> checkPrimary, string today, string weekly, string monthly, string startDate, string endDate)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var checkPrimaryParameter = checkPrimary.HasValue ?
                new ObjectParameter("CheckPrimary", checkPrimary) :
                new ObjectParameter("CheckPrimary", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantBankDetail_Datatable_Result>("sp_MerchantBankDetail_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, nameParameter, accountNumberParameter, merchantIdParameter, bankCodeParameter, bankNameParameter, branchIdParameter, branchNameParameter, checkPrimaryParameter, todayParameter, weeklyParameter, monthlyParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MerchantBankDetail_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string name, string accountNumber, string merchantId, string bankCode, string bankName, string branchId, string branchName, Nullable<int> checkPrimary, string today, string weekly, string monthly, string startDate, string endDate)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var checkPrimaryParameter = checkPrimary.HasValue ?
                new ObjectParameter("CheckPrimary", checkPrimary) :
                new ObjectParameter("CheckPrimary", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MerchantBankDetail_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, nameParameter, accountNumberParameter, merchantIdParameter, bankCodeParameter, bankNameParameter, branchIdParameter, branchNameParameter, checkPrimaryParameter, todayParameter, weeklyParameter, monthlyParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_MerchantBankDetail_Get_Result> sp_MerchantBankDetail_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, string name, string accountNumber, string merchantId, string bankCode, string bankName, string branchId, string branchName, Nullable<int> checkPrimary, string today, string weekly, string monthly, string startDate, string endDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var checkPrimaryParameter = checkPrimary.HasValue ?
                new ObjectParameter("CheckPrimary", checkPrimary) :
                new ObjectParameter("CheckPrimary", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantBankDetail_Get_Result>("sp_MerchantBankDetail_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, nameParameter, accountNumberParameter, merchantIdParameter, bankCodeParameter, bankNameParameter, branchIdParameter, branchNameParameter, checkPrimaryParameter, todayParameter, weeklyParameter, monthlyParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_MerchantCommission_AddNew(string merchantUniqueId, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> fixedCommission, Nullable<decimal> percentageCommission, Nullable<decimal> percentageRewardPoints, Nullable<decimal> percentageRewardPointsDebit, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> minimumAllowed, Nullable<decimal> maximumAllowed, Nullable<int> serviceId, Nullable<int> status, Nullable<int> type, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isActive, Nullable<bool> isApprovedByAdmin, Nullable<bool> isDeleted, Nullable<long> createdBy, string createdByName, Nullable<decimal> serviceCharge, Nullable<long> updatedBy, string updatedByName, Nullable<decimal> minimumAllowedSC, Nullable<decimal> maximumAllowedSC, Nullable<decimal> fixedCommissionMerchant, Nullable<decimal> percentageCommissionMerchant, Nullable<decimal> myPayContribution, Nullable<decimal> merchantContribution, Nullable<decimal> discount, Nullable<int> transactionCountLimit, Nullable<bool> isDefault, Nullable<decimal> fixedDiscount, Nullable<decimal> minimumDiscount, Nullable<decimal> maximumDiscount)
        {
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var fixedCommissionParameter = fixedCommission.HasValue ?
                new ObjectParameter("FixedCommission", fixedCommission) :
                new ObjectParameter("FixedCommission", typeof(decimal));
    
            var percentageCommissionParameter = percentageCommission.HasValue ?
                new ObjectParameter("PercentageCommission", percentageCommission) :
                new ObjectParameter("PercentageCommission", typeof(decimal));
    
            var percentageRewardPointsParameter = percentageRewardPoints.HasValue ?
                new ObjectParameter("PercentageRewardPoints", percentageRewardPoints) :
                new ObjectParameter("PercentageRewardPoints", typeof(decimal));
    
            var percentageRewardPointsDebitParameter = percentageRewardPointsDebit.HasValue ?
                new ObjectParameter("PercentageRewardPointsDebit", percentageRewardPointsDebit) :
                new ObjectParameter("PercentageRewardPointsDebit", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var minimumAllowedParameter = minimumAllowed.HasValue ?
                new ObjectParameter("MinimumAllowed", minimumAllowed) :
                new ObjectParameter("MinimumAllowed", typeof(decimal));
    
            var maximumAllowedParameter = maximumAllowed.HasValue ?
                new ObjectParameter("MaximumAllowed", maximumAllowed) :
                new ObjectParameter("MaximumAllowed", typeof(decimal));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var minimumAllowedSCParameter = minimumAllowedSC.HasValue ?
                new ObjectParameter("MinimumAllowedSC", minimumAllowedSC) :
                new ObjectParameter("MinimumAllowedSC", typeof(decimal));
    
            var maximumAllowedSCParameter = maximumAllowedSC.HasValue ?
                new ObjectParameter("MaximumAllowedSC", maximumAllowedSC) :
                new ObjectParameter("MaximumAllowedSC", typeof(decimal));
    
            var fixedCommissionMerchantParameter = fixedCommissionMerchant.HasValue ?
                new ObjectParameter("FixedCommissionMerchant", fixedCommissionMerchant) :
                new ObjectParameter("FixedCommissionMerchant", typeof(decimal));
    
            var percentageCommissionMerchantParameter = percentageCommissionMerchant.HasValue ?
                new ObjectParameter("PercentageCommissionMerchant", percentageCommissionMerchant) :
                new ObjectParameter("PercentageCommissionMerchant", typeof(decimal));
    
            var myPayContributionParameter = myPayContribution.HasValue ?
                new ObjectParameter("MyPayContribution", myPayContribution) :
                new ObjectParameter("MyPayContribution", typeof(decimal));
    
            var merchantContributionParameter = merchantContribution.HasValue ?
                new ObjectParameter("MerchantContribution", merchantContribution) :
                new ObjectParameter("MerchantContribution", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var transactionCountLimitParameter = transactionCountLimit.HasValue ?
                new ObjectParameter("TransactionCountLimit", transactionCountLimit) :
                new ObjectParameter("TransactionCountLimit", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var fixedDiscountParameter = fixedDiscount.HasValue ?
                new ObjectParameter("FixedDiscount", fixedDiscount) :
                new ObjectParameter("FixedDiscount", typeof(decimal));
    
            var minimumDiscountParameter = minimumDiscount.HasValue ?
                new ObjectParameter("MinimumDiscount", minimumDiscount) :
                new ObjectParameter("MinimumDiscount", typeof(decimal));
    
            var maximumDiscountParameter = maximumDiscount.HasValue ?
                new ObjectParameter("MaximumDiscount", maximumDiscount) :
                new ObjectParameter("MaximumDiscount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MerchantCommission_AddNew", merchantUniqueIdParameter, minimumAmountParameter, maximumAmountParameter, fixedCommissionParameter, percentageCommissionParameter, percentageRewardPointsParameter, percentageRewardPointsDebitParameter, fromDateParameter, toDateParameter, minimumAllowedParameter, maximumAllowedParameter, serviceIdParameter, statusParameter, typeParameter, createdDateParameter, updatedDateParameter, isActiveParameter, isApprovedByAdminParameter, isDeletedParameter, createdByParameter, createdByNameParameter, serviceChargeParameter, updatedByParameter, updatedByNameParameter, minimumAllowedSCParameter, maximumAllowedSCParameter, fixedCommissionMerchantParameter, percentageCommissionMerchantParameter, myPayContributionParameter, merchantContributionParameter, discountParameter, transactionCountLimitParameter, isDefaultParameter, fixedDiscountParameter, minimumDiscountParameter, maximumDiscountParameter);
        }
    
        public virtual ObjectResult<sp_MerchantCommission_Datatable_Result> sp_MerchantCommission_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, string merchantUniqueId, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> minimumAllowedSC, Nullable<decimal> maximumAllowedSC, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string fromDate, string toDate, Nullable<long> createdBy, Nullable<int> serviceId, string running, string expired, string scheduled, Nullable<int> checkIsDefault)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var minimumAllowedSCParameter = minimumAllowedSC.HasValue ?
                new ObjectParameter("MinimumAllowedSC", minimumAllowedSC) :
                new ObjectParameter("MinimumAllowedSC", typeof(decimal));
    
            var maximumAllowedSCParameter = maximumAllowedSC.HasValue ?
                new ObjectParameter("MaximumAllowedSC", maximumAllowedSC) :
                new ObjectParameter("MaximumAllowedSC", typeof(decimal));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var checkIsDefaultParameter = checkIsDefault.HasValue ?
                new ObjectParameter("CheckIsDefault", checkIsDefault) :
                new ObjectParameter("CheckIsDefault", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantCommission_Datatable_Result>("sp_MerchantCommission_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, merchantUniqueIdParameter, minimumAmountParameter, maximumAmountParameter, minimumAllowedSCParameter, maximumAllowedSCParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, fromDateParameter, toDateParameter, createdByParameter, serviceIdParameter, runningParameter, expiredParameter, scheduledParameter, checkIsDefaultParameter);
        }
    
        public virtual ObjectResult<sp_MerchantCommission_Get_Result> sp_MerchantCommission_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> serviceId, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, string fromDate, string toDate, Nullable<int> status, Nullable<int> type, string running, string expired, string scheduled, string merchantUniqueId, Nullable<int> checkIsDefault)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var checkIsDefaultParameter = checkIsDefault.HasValue ?
                new ObjectParameter("CheckIsDefault", checkIsDefault) :
                new ObjectParameter("CheckIsDefault", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantCommission_Get_Result>("sp_MerchantCommission_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, serviceIdParameter, minimumAmountParameter, maximumAmountParameter, fromDateParameter, toDateParameter, statusParameter, typeParameter, runningParameter, expiredParameter, scheduledParameter, merchantUniqueIdParameter, checkIsDefaultParameter);
        }
    
        public virtual int sp_MerchantCommission_Update(Nullable<long> id, string merchantUniqueId, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> fixedCommission, Nullable<decimal> percentageCommission, Nullable<decimal> percentageRewardPoints, Nullable<decimal> percentageRewardPointsDebit, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> minimumAllowed, Nullable<decimal> maximumAllowed, Nullable<int> serviceId, Nullable<int> status, Nullable<int> type, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isActive, Nullable<bool> isApprovedByAdmin, Nullable<bool> isDeleted, Nullable<long> createdBy, string createdByName, Nullable<decimal> serviceCharge, Nullable<long> updatedBy, string updatedByName, Nullable<decimal> minimumAllowedSC, Nullable<decimal> maximumAllowedSC, Nullable<decimal> fixedCommissionMerchant, Nullable<decimal> percentageCommissionMerchant, Nullable<decimal> myPayContribution, Nullable<decimal> merchantContribution, Nullable<decimal> discount, Nullable<int> transactionCountLimit, Nullable<bool> isDefault, Nullable<decimal> fixedDiscount, Nullable<decimal> minimumDiscount, Nullable<decimal> maximumDiscount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var fixedCommissionParameter = fixedCommission.HasValue ?
                new ObjectParameter("FixedCommission", fixedCommission) :
                new ObjectParameter("FixedCommission", typeof(decimal));
    
            var percentageCommissionParameter = percentageCommission.HasValue ?
                new ObjectParameter("PercentageCommission", percentageCommission) :
                new ObjectParameter("PercentageCommission", typeof(decimal));
    
            var percentageRewardPointsParameter = percentageRewardPoints.HasValue ?
                new ObjectParameter("PercentageRewardPoints", percentageRewardPoints) :
                new ObjectParameter("PercentageRewardPoints", typeof(decimal));
    
            var percentageRewardPointsDebitParameter = percentageRewardPointsDebit.HasValue ?
                new ObjectParameter("PercentageRewardPointsDebit", percentageRewardPointsDebit) :
                new ObjectParameter("PercentageRewardPointsDebit", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var minimumAllowedParameter = minimumAllowed.HasValue ?
                new ObjectParameter("MinimumAllowed", minimumAllowed) :
                new ObjectParameter("MinimumAllowed", typeof(decimal));
    
            var maximumAllowedParameter = maximumAllowed.HasValue ?
                new ObjectParameter("MaximumAllowed", maximumAllowed) :
                new ObjectParameter("MaximumAllowed", typeof(decimal));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var minimumAllowedSCParameter = minimumAllowedSC.HasValue ?
                new ObjectParameter("MinimumAllowedSC", minimumAllowedSC) :
                new ObjectParameter("MinimumAllowedSC", typeof(decimal));
    
            var maximumAllowedSCParameter = maximumAllowedSC.HasValue ?
                new ObjectParameter("MaximumAllowedSC", maximumAllowedSC) :
                new ObjectParameter("MaximumAllowedSC", typeof(decimal));
    
            var fixedCommissionMerchantParameter = fixedCommissionMerchant.HasValue ?
                new ObjectParameter("FixedCommissionMerchant", fixedCommissionMerchant) :
                new ObjectParameter("FixedCommissionMerchant", typeof(decimal));
    
            var percentageCommissionMerchantParameter = percentageCommissionMerchant.HasValue ?
                new ObjectParameter("PercentageCommissionMerchant", percentageCommissionMerchant) :
                new ObjectParameter("PercentageCommissionMerchant", typeof(decimal));
    
            var myPayContributionParameter = myPayContribution.HasValue ?
                new ObjectParameter("MyPayContribution", myPayContribution) :
                new ObjectParameter("MyPayContribution", typeof(decimal));
    
            var merchantContributionParameter = merchantContribution.HasValue ?
                new ObjectParameter("MerchantContribution", merchantContribution) :
                new ObjectParameter("MerchantContribution", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var transactionCountLimitParameter = transactionCountLimit.HasValue ?
                new ObjectParameter("TransactionCountLimit", transactionCountLimit) :
                new ObjectParameter("TransactionCountLimit", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var fixedDiscountParameter = fixedDiscount.HasValue ?
                new ObjectParameter("FixedDiscount", fixedDiscount) :
                new ObjectParameter("FixedDiscount", typeof(decimal));
    
            var minimumDiscountParameter = minimumDiscount.HasValue ?
                new ObjectParameter("MinimumDiscount", minimumDiscount) :
                new ObjectParameter("MinimumDiscount", typeof(decimal));
    
            var maximumDiscountParameter = maximumDiscount.HasValue ?
                new ObjectParameter("MaximumDiscount", maximumDiscount) :
                new ObjectParameter("MaximumDiscount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MerchantCommission_Update", idParameter, merchantUniqueIdParameter, minimumAmountParameter, maximumAmountParameter, fixedCommissionParameter, percentageCommissionParameter, percentageRewardPointsParameter, percentageRewardPointsDebitParameter, fromDateParameter, toDateParameter, minimumAllowedParameter, maximumAllowedParameter, serviceIdParameter, statusParameter, typeParameter, createdDateParameter, updatedDateParameter, isActiveParameter, isApprovedByAdminParameter, isDeletedParameter, createdByParameter, createdByNameParameter, serviceChargeParameter, updatedByParameter, updatedByNameParameter, minimumAllowedSCParameter, maximumAllowedSCParameter, fixedCommissionMerchantParameter, percentageCommissionMerchantParameter, myPayContributionParameter, merchantContributionParameter, discountParameter, transactionCountLimitParameter, isDefaultParameter, fixedDiscountParameter, minimumDiscountParameter, maximumDiscountParameter);
        }
    
        public virtual int sp_MerchantCommissionHistory_AddNew(string merchantUniqueId, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> fixedCommission, Nullable<decimal> percentageCommission, Nullable<decimal> percentageRewardPoints, Nullable<decimal> percentageRewardPointsDebit, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> minimumAllowed, Nullable<decimal> maximumAllowed, Nullable<int> serviceId, Nullable<int> status, Nullable<int> type, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isActive, Nullable<bool> isApprovedByAdmin, Nullable<bool> isDeleted, Nullable<long> createdBy, string createdByName, Nullable<decimal> serviceCharge, Nullable<long> updatedBy, string updatedByName, Nullable<decimal> minimumAllowedSC, Nullable<decimal> maximumAllowedSC, Nullable<long> merchantCommissionId, string ipAddress, Nullable<decimal> fixedCommissionMerchant, Nullable<decimal> percentageCommissionMerchant, Nullable<decimal> myPayContribution, Nullable<decimal> merchantContribution, Nullable<decimal> discount, Nullable<int> transactionCountLimit, Nullable<bool> isDefault, Nullable<decimal> fixedDiscount, Nullable<decimal> minimumDiscount, Nullable<decimal> maximumDiscount)
        {
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var fixedCommissionParameter = fixedCommission.HasValue ?
                new ObjectParameter("FixedCommission", fixedCommission) :
                new ObjectParameter("FixedCommission", typeof(decimal));
    
            var percentageCommissionParameter = percentageCommission.HasValue ?
                new ObjectParameter("PercentageCommission", percentageCommission) :
                new ObjectParameter("PercentageCommission", typeof(decimal));
    
            var percentageRewardPointsParameter = percentageRewardPoints.HasValue ?
                new ObjectParameter("PercentageRewardPoints", percentageRewardPoints) :
                new ObjectParameter("PercentageRewardPoints", typeof(decimal));
    
            var percentageRewardPointsDebitParameter = percentageRewardPointsDebit.HasValue ?
                new ObjectParameter("PercentageRewardPointsDebit", percentageRewardPointsDebit) :
                new ObjectParameter("PercentageRewardPointsDebit", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var minimumAllowedParameter = minimumAllowed.HasValue ?
                new ObjectParameter("MinimumAllowed", minimumAllowed) :
                new ObjectParameter("MinimumAllowed", typeof(decimal));
    
            var maximumAllowedParameter = maximumAllowed.HasValue ?
                new ObjectParameter("MaximumAllowed", maximumAllowed) :
                new ObjectParameter("MaximumAllowed", typeof(decimal));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var minimumAllowedSCParameter = minimumAllowedSC.HasValue ?
                new ObjectParameter("MinimumAllowedSC", minimumAllowedSC) :
                new ObjectParameter("MinimumAllowedSC", typeof(decimal));
    
            var maximumAllowedSCParameter = maximumAllowedSC.HasValue ?
                new ObjectParameter("MaximumAllowedSC", maximumAllowedSC) :
                new ObjectParameter("MaximumAllowedSC", typeof(decimal));
    
            var merchantCommissionIdParameter = merchantCommissionId.HasValue ?
                new ObjectParameter("MerchantCommissionId", merchantCommissionId) :
                new ObjectParameter("MerchantCommissionId", typeof(long));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var fixedCommissionMerchantParameter = fixedCommissionMerchant.HasValue ?
                new ObjectParameter("FixedCommissionMerchant", fixedCommissionMerchant) :
                new ObjectParameter("FixedCommissionMerchant", typeof(decimal));
    
            var percentageCommissionMerchantParameter = percentageCommissionMerchant.HasValue ?
                new ObjectParameter("PercentageCommissionMerchant", percentageCommissionMerchant) :
                new ObjectParameter("PercentageCommissionMerchant", typeof(decimal));
    
            var myPayContributionParameter = myPayContribution.HasValue ?
                new ObjectParameter("MyPayContribution", myPayContribution) :
                new ObjectParameter("MyPayContribution", typeof(decimal));
    
            var merchantContributionParameter = merchantContribution.HasValue ?
                new ObjectParameter("MerchantContribution", merchantContribution) :
                new ObjectParameter("MerchantContribution", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var transactionCountLimitParameter = transactionCountLimit.HasValue ?
                new ObjectParameter("TransactionCountLimit", transactionCountLimit) :
                new ObjectParameter("TransactionCountLimit", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var fixedDiscountParameter = fixedDiscount.HasValue ?
                new ObjectParameter("FixedDiscount", fixedDiscount) :
                new ObjectParameter("FixedDiscount", typeof(decimal));
    
            var minimumDiscountParameter = minimumDiscount.HasValue ?
                new ObjectParameter("MinimumDiscount", minimumDiscount) :
                new ObjectParameter("MinimumDiscount", typeof(decimal));
    
            var maximumDiscountParameter = maximumDiscount.HasValue ?
                new ObjectParameter("MaximumDiscount", maximumDiscount) :
                new ObjectParameter("MaximumDiscount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MerchantCommissionHistory_AddNew", merchantUniqueIdParameter, minimumAmountParameter, maximumAmountParameter, fixedCommissionParameter, percentageCommissionParameter, percentageRewardPointsParameter, percentageRewardPointsDebitParameter, fromDateParameter, toDateParameter, minimumAllowedParameter, maximumAllowedParameter, serviceIdParameter, statusParameter, typeParameter, createdDateParameter, updatedDateParameter, isActiveParameter, isApprovedByAdminParameter, isDeletedParameter, createdByParameter, createdByNameParameter, serviceChargeParameter, updatedByParameter, updatedByNameParameter, minimumAllowedSCParameter, maximumAllowedSCParameter, merchantCommissionIdParameter, ipAddressParameter, fixedCommissionMerchantParameter, percentageCommissionMerchantParameter, myPayContributionParameter, merchantContributionParameter, discountParameter, transactionCountLimitParameter, isDefaultParameter, fixedDiscountParameter, minimumDiscountParameter, maximumDiscountParameter);
        }
    
        public virtual ObjectResult<sp_MerchantCommissionHistory_Datatable_Result> sp_MerchantCommissionHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, string merchantUniqueId, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> minimumAllowedSC, Nullable<decimal> maximumAllowedSC, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string fromDate, string toDate, Nullable<long> createdBy, Nullable<int> serviceId, string running, string expired, string scheduled, Nullable<long> merchantCommissionId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var minimumAllowedSCParameter = minimumAllowedSC.HasValue ?
                new ObjectParameter("MinimumAllowedSC", minimumAllowedSC) :
                new ObjectParameter("MinimumAllowedSC", typeof(decimal));
    
            var maximumAllowedSCParameter = maximumAllowedSC.HasValue ?
                new ObjectParameter("MaximumAllowedSC", maximumAllowedSC) :
                new ObjectParameter("MaximumAllowedSC", typeof(decimal));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var merchantCommissionIdParameter = merchantCommissionId.HasValue ?
                new ObjectParameter("MerchantCommissionId", merchantCommissionId) :
                new ObjectParameter("MerchantCommissionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantCommissionHistory_Datatable_Result>("sp_MerchantCommissionHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, merchantUniqueIdParameter, minimumAmountParameter, maximumAmountParameter, minimumAllowedSCParameter, maximumAllowedSCParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, fromDateParameter, toDateParameter, createdByParameter, serviceIdParameter, runningParameter, expiredParameter, scheduledParameter, merchantCommissionIdParameter);
        }
    
        public virtual ObjectResult<sp_MerchantCommissionHistory_Get_Result> sp_MerchantCommissionHistory_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> serviceId, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, string fromDate, string toDate, Nullable<int> status, Nullable<int> type, string running, string expired, string scheduled, string merchantUniqueId, Nullable<long> merchantCommissionId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var merchantCommissionIdParameter = merchantCommissionId.HasValue ?
                new ObjectParameter("MerchantCommissionId", merchantCommissionId) :
                new ObjectParameter("MerchantCommissionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantCommissionHistory_Get_Result>("sp_MerchantCommissionHistory_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, serviceIdParameter, minimumAmountParameter, maximumAmountParameter, fromDateParameter, toDateParameter, statusParameter, typeParameter, runningParameter, expiredParameter, scheduledParameter, merchantUniqueIdParameter, merchantCommissionIdParameter);
        }
    
        public virtual int sp_MerchantCommissionHistory_Update(Nullable<long> id, string merchantUniqueId, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> fixedCommission, Nullable<decimal> percentageCommission, Nullable<decimal> percentageRewardPoints, Nullable<decimal> percentageRewardPointsDebit, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> minimumAllowed, Nullable<decimal> maximumAllowed, Nullable<int> serviceId, Nullable<int> status, Nullable<int> type, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isActive, Nullable<bool> isApprovedByAdmin, Nullable<bool> isDeleted, Nullable<long> createdBy, string createdByName, Nullable<decimal> serviceCharge, Nullable<long> updatedBy, string updatedByName, Nullable<decimal> minimumAllowedSC, Nullable<decimal> maximumAllowedSC, Nullable<long> merchantCommissionId, string ipAddress, Nullable<decimal> fixedCommissionMerchant, Nullable<decimal> percentageCommissionMerchant, Nullable<decimal> myPayContribution, Nullable<decimal> merchantContribution, Nullable<decimal> discount, Nullable<int> transactionCountLimit, Nullable<bool> isDefault, Nullable<decimal> fixedDiscount, Nullable<decimal> minimumDiscount, Nullable<decimal> maximumDiscount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var fixedCommissionParameter = fixedCommission.HasValue ?
                new ObjectParameter("FixedCommission", fixedCommission) :
                new ObjectParameter("FixedCommission", typeof(decimal));
    
            var percentageCommissionParameter = percentageCommission.HasValue ?
                new ObjectParameter("PercentageCommission", percentageCommission) :
                new ObjectParameter("PercentageCommission", typeof(decimal));
    
            var percentageRewardPointsParameter = percentageRewardPoints.HasValue ?
                new ObjectParameter("PercentageRewardPoints", percentageRewardPoints) :
                new ObjectParameter("PercentageRewardPoints", typeof(decimal));
    
            var percentageRewardPointsDebitParameter = percentageRewardPointsDebit.HasValue ?
                new ObjectParameter("PercentageRewardPointsDebit", percentageRewardPointsDebit) :
                new ObjectParameter("PercentageRewardPointsDebit", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var minimumAllowedParameter = minimumAllowed.HasValue ?
                new ObjectParameter("MinimumAllowed", minimumAllowed) :
                new ObjectParameter("MinimumAllowed", typeof(decimal));
    
            var maximumAllowedParameter = maximumAllowed.HasValue ?
                new ObjectParameter("MaximumAllowed", maximumAllowed) :
                new ObjectParameter("MaximumAllowed", typeof(decimal));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var minimumAllowedSCParameter = minimumAllowedSC.HasValue ?
                new ObjectParameter("MinimumAllowedSC", minimumAllowedSC) :
                new ObjectParameter("MinimumAllowedSC", typeof(decimal));
    
            var maximumAllowedSCParameter = maximumAllowedSC.HasValue ?
                new ObjectParameter("MaximumAllowedSC", maximumAllowedSC) :
                new ObjectParameter("MaximumAllowedSC", typeof(decimal));
    
            var merchantCommissionIdParameter = merchantCommissionId.HasValue ?
                new ObjectParameter("MerchantCommissionId", merchantCommissionId) :
                new ObjectParameter("MerchantCommissionId", typeof(long));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var fixedCommissionMerchantParameter = fixedCommissionMerchant.HasValue ?
                new ObjectParameter("FixedCommissionMerchant", fixedCommissionMerchant) :
                new ObjectParameter("FixedCommissionMerchant", typeof(decimal));
    
            var percentageCommissionMerchantParameter = percentageCommissionMerchant.HasValue ?
                new ObjectParameter("PercentageCommissionMerchant", percentageCommissionMerchant) :
                new ObjectParameter("PercentageCommissionMerchant", typeof(decimal));
    
            var myPayContributionParameter = myPayContribution.HasValue ?
                new ObjectParameter("MyPayContribution", myPayContribution) :
                new ObjectParameter("MyPayContribution", typeof(decimal));
    
            var merchantContributionParameter = merchantContribution.HasValue ?
                new ObjectParameter("MerchantContribution", merchantContribution) :
                new ObjectParameter("MerchantContribution", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var transactionCountLimitParameter = transactionCountLimit.HasValue ?
                new ObjectParameter("TransactionCountLimit", transactionCountLimit) :
                new ObjectParameter("TransactionCountLimit", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var fixedDiscountParameter = fixedDiscount.HasValue ?
                new ObjectParameter("FixedDiscount", fixedDiscount) :
                new ObjectParameter("FixedDiscount", typeof(decimal));
    
            var minimumDiscountParameter = minimumDiscount.HasValue ?
                new ObjectParameter("MinimumDiscount", minimumDiscount) :
                new ObjectParameter("MinimumDiscount", typeof(decimal));
    
            var maximumDiscountParameter = maximumDiscount.HasValue ?
                new ObjectParameter("MaximumDiscount", maximumDiscount) :
                new ObjectParameter("MaximumDiscount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MerchantCommissionHistory_Update", idParameter, merchantUniqueIdParameter, minimumAmountParameter, maximumAmountParameter, fixedCommissionParameter, percentageCommissionParameter, percentageRewardPointsParameter, percentageRewardPointsDebitParameter, fromDateParameter, toDateParameter, minimumAllowedParameter, maximumAllowedParameter, serviceIdParameter, statusParameter, typeParameter, createdDateParameter, updatedDateParameter, isActiveParameter, isApprovedByAdminParameter, isDeletedParameter, createdByParameter, createdByNameParameter, serviceChargeParameter, updatedByParameter, updatedByNameParameter, minimumAllowedSCParameter, maximumAllowedSCParameter, merchantCommissionIdParameter, ipAddressParameter, fixedCommissionMerchantParameter, percentageCommissionMerchantParameter, myPayContributionParameter, merchantContributionParameter, discountParameter, transactionCountLimitParameter, isDefaultParameter, fixedDiscountParameter, minimumDiscountParameter, maximumDiscountParameter);
        }
    
        public virtual ObjectResult<sp_MerchantDashboard_Get_Result> sp_MerchantDashboard_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string type, string merchantUniqueId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantDashboard_Get_Result>("sp_MerchantDashboard_Get", idParameter, takeParameter, skipParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, typeParameter, merchantUniqueIdParameter);
        }
    
        public virtual int sp_MerchantIPAddress_AddNew(Nullable<long> merchantMemberId, string merchantUniqueId, string mechantName, string merchantOrganization, string iPAddress, Nullable<long> createdBy, string createdByName, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive)
        {
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var mechantNameParameter = mechantName != null ?
                new ObjectParameter("MechantName", mechantName) :
                new ObjectParameter("MechantName", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MerchantIPAddress_AddNew", merchantMemberIdParameter, merchantUniqueIdParameter, mechantNameParameter, merchantOrganizationParameter, iPAddressParameter, createdByParameter, createdByNameParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_MerchantIPAddress_DataTable_Result> sp_MerchantIPAddress_DataTable(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<long> merchantMemberId, string merchantUniqueId, string mechantName, string merchantOrganization, string iPAddress, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var mechantNameParameter = mechantName != null ?
                new ObjectParameter("MechantName", mechantName) :
                new ObjectParameter("MechantName", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantIPAddress_DataTable_Result>("sp_MerchantIPAddress_DataTable", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, merchantMemberIdParameter, merchantUniqueIdParameter, mechantNameParameter, merchantOrganizationParameter, iPAddressParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MerchantIPAddress_DataTableCounter(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<long> merchantMemberId, string merchantUniqueId, string mechantName, string merchantOrganization, string iPAddress, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var mechantNameParameter = mechantName != null ?
                new ObjectParameter("MechantName", mechantName) :
                new ObjectParameter("MechantName", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MerchantIPAddress_DataTableCounter", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, merchantMemberIdParameter, merchantUniqueIdParameter, mechantNameParameter, merchantOrganizationParameter, iPAddressParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_MerchantIPAddress_Get_Result> sp_MerchantIPAddress_Get(Nullable<long> merchantMemberId, string merchantUniqueId, string mechantName, string merchantOrganization, string iPAddress, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var mechantNameParameter = mechantName != null ?
                new ObjectParameter("MechantName", mechantName) :
                new ObjectParameter("MechantName", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantIPAddress_Get_Result>("sp_MerchantIPAddress_Get", merchantMemberIdParameter, merchantUniqueIdParameter, mechantNameParameter, merchantOrganizationParameter, iPAddressParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int sp_MerchantIPAddress_Update(Nullable<long> merchantMemberId, string merchantUniqueId, string mechantName, string merchantOrganization, string iPAddress, Nullable<long> createdBy, string createdByName, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id)
        {
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var mechantNameParameter = mechantName != null ?
                new ObjectParameter("MechantName", mechantName) :
                new ObjectParameter("MechantName", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MerchantIPAddress_Update", merchantMemberIdParameter, merchantUniqueIdParameter, mechantNameParameter, merchantOrganizationParameter, iPAddressParameter, createdByParameter, createdByNameParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_MerchantOrders_Datatable_Result> sp_MerchantOrders_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string ordersId, string merchantUniqueId, string startDate, string endDate, string trackerId, Nullable<int> status, string memberName, string memberContactNumber, string transactionId, string parentTransactionId, Nullable<int> sign, Nullable<int> type)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var ordersIdParameter = ordersId != null ?
                new ObjectParameter("OrdersId", ordersId) :
                new ObjectParameter("OrdersId", typeof(string));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var trackerIdParameter = trackerId != null ?
                new ObjectParameter("TrackerId", trackerId) :
                new ObjectParameter("TrackerId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantOrders_Datatable_Result>("sp_MerchantOrders_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, ordersIdParameter, merchantUniqueIdParameter, startDateParameter, endDateParameter, trackerIdParameter, statusParameter, memberNameParameter, memberContactNumberParameter, transactionIdParameter, parentTransactionIdParameter, signParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_MerchantOrders_DatatableCounter_Result> sp_MerchantOrders_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string ordersId, string merchantUniqueId, string startDate, string endDate, string trackerId, Nullable<int> status, string memberName, string memberContactNumber, string transactionId, string parentTransactionId, Nullable<int> sign, Nullable<int> type, Nullable<int> isWalletWithdrawal)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var ordersIdParameter = ordersId != null ?
                new ObjectParameter("OrdersId", ordersId) :
                new ObjectParameter("OrdersId", typeof(string));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var trackerIdParameter = trackerId != null ?
                new ObjectParameter("TrackerId", trackerId) :
                new ObjectParameter("TrackerId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var isWalletWithdrawalParameter = isWalletWithdrawal.HasValue ?
                new ObjectParameter("IsWalletWithdrawal", isWalletWithdrawal) :
                new ObjectParameter("IsWalletWithdrawal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantOrders_DatatableCounter_Result>("sp_MerchantOrders_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, ordersIdParameter, merchantUniqueIdParameter, startDateParameter, endDateParameter, trackerIdParameter, statusParameter, memberNameParameter, memberContactNumberParameter, transactionIdParameter, parentTransactionIdParameter, signParameter, typeParameter, isWalletWithdrawalParameter);
        }
    
        public virtual ObjectResult<sp_MerchantOrders_DumpGet_Result> sp_MerchantOrders_DumpGet(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string ordersId, string merchantUniqueId, string startDate, string endDate, string trackerId, Nullable<int> status, string memberName, string memberContactNumber, string transactionId, Nullable<int> sign, Nullable<int> type)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var ordersIdParameter = ordersId != null ?
                new ObjectParameter("OrdersId", ordersId) :
                new ObjectParameter("OrdersId", typeof(string));
    
            var merchantUniqueIdParameter = merchantUniqueId != null ?
                new ObjectParameter("MerchantUniqueId", merchantUniqueId) :
                new ObjectParameter("MerchantUniqueId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var trackerIdParameter = trackerId != null ?
                new ObjectParameter("TrackerId", trackerId) :
                new ObjectParameter("TrackerId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantOrders_DumpGet_Result>("sp_MerchantOrders_DumpGet", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, ordersIdParameter, merchantUniqueIdParameter, startDateParameter, endDateParameter, trackerIdParameter, statusParameter, memberNameParameter, memberContactNumberParameter, transactionIdParameter, signParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_MerchantOrders_Get_Result> sp_MerchantOrders_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string startDate, string endDate, string orderId, Nullable<long> memberId, Nullable<long> createdBy, string createdByName, string orderToken, string merchantId, string transactionId, string parentTransactionId, Nullable<int> sign, Nullable<int> status, Nullable<int> type, string trackerId, string memberContactNumber, string memberName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var orderTokenParameter = orderToken != null ?
                new ObjectParameter("OrderToken", orderToken) :
                new ObjectParameter("OrderToken", typeof(string));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var trackerIdParameter = trackerId != null ?
                new ObjectParameter("TrackerId", trackerId) :
                new ObjectParameter("TrackerId", typeof(string));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantOrders_Get_Result>("sp_MerchantOrders_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, startDateParameter, endDateParameter, orderIdParameter, memberIdParameter, createdByParameter, createdByNameParameter, orderTokenParameter, merchantIdParameter, transactionIdParameter, parentTransactionIdParameter, signParameter, statusParameter, typeParameter, trackerIdParameter, memberContactNumberParameter, memberNameParameter);
        }
    
        public virtual int sp_MerchantOrderUpdte(string mId, string status, string remarks, string type)
        {
            var mIdParameter = mId != null ?
                new ObjectParameter("MId", mId) :
                new ObjectParameter("MId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MerchantOrderUpdte", mIdParameter, statusParameter, remarksParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_MerchantSettings_Get_Result> sp_MerchantSettings_Get(Nullable<decimal> minimumWithdrawalAmount, Nullable<decimal> maximumWithdrawalAmount, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var minimumWithdrawalAmountParameter = minimumWithdrawalAmount.HasValue ?
                new ObjectParameter("MinimumWithdrawalAmount", minimumWithdrawalAmount) :
                new ObjectParameter("MinimumWithdrawalAmount", typeof(decimal));
    
            var maximumWithdrawalAmountParameter = maximumWithdrawalAmount.HasValue ?
                new ObjectParameter("MaximumWithdrawalAmount", maximumWithdrawalAmount) :
                new ObjectParameter("MaximumWithdrawalAmount", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantSettings_Get_Result>("sp_MerchantSettings_Get", minimumWithdrawalAmountParameter, maximumWithdrawalAmountParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<string> sp_MerchantWithdrawalRequest_DailyLimitCheck_Get(string merchantId)
        {
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_MerchantWithdrawalRequest_DailyLimitCheck_Get", merchantIdParameter);
        }
    
        public virtual ObjectResult<sp_MerchantWithdrawalRequest_Datatable_Result> sp_MerchantWithdrawalRequest_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<decimal> amount, Nullable<long> bankId, string merchantId, Nullable<int> status, string startDate, string endDate, Nullable<int> withdrawalRequestType, Nullable<int> checkWithdrawalApproveByAdmin)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(long));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var withdrawalRequestTypeParameter = withdrawalRequestType.HasValue ?
                new ObjectParameter("WithdrawalRequestType", withdrawalRequestType) :
                new ObjectParameter("WithdrawalRequestType", typeof(int));
    
            var checkWithdrawalApproveByAdminParameter = checkWithdrawalApproveByAdmin.HasValue ?
                new ObjectParameter("CheckWithdrawalApproveByAdmin", checkWithdrawalApproveByAdmin) :
                new ObjectParameter("CheckWithdrawalApproveByAdmin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantWithdrawalRequest_Datatable_Result>("sp_MerchantWithdrawalRequest_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, amountParameter, bankIdParameter, merchantIdParameter, statusParameter, startDateParameter, endDateParameter, withdrawalRequestTypeParameter, checkWithdrawalApproveByAdminParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MerchantWithdrawalRequest_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<decimal> amount, Nullable<long> bankId, string merchantId, Nullable<int> status, string startDate, string endDate, Nullable<int> withdrawalRequestType, Nullable<int> checkWithdrawalApproveByAdmin)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(long));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var withdrawalRequestTypeParameter = withdrawalRequestType.HasValue ?
                new ObjectParameter("WithdrawalRequestType", withdrawalRequestType) :
                new ObjectParameter("WithdrawalRequestType", typeof(int));
    
            var checkWithdrawalApproveByAdminParameter = checkWithdrawalApproveByAdmin.HasValue ?
                new ObjectParameter("CheckWithdrawalApproveByAdmin", checkWithdrawalApproveByAdmin) :
                new ObjectParameter("CheckWithdrawalApproveByAdmin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MerchantWithdrawalRequest_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, amountParameter, bankIdParameter, merchantIdParameter, statusParameter, startDateParameter, endDateParameter, withdrawalRequestTypeParameter, checkWithdrawalApproveByAdminParameter);
        }
    
        public virtual ObjectResult<sp_MerchantWithdrawalRequest_Get_Result> sp_MerchantWithdrawalRequest_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string orderId, Nullable<long> updatedBy, string updatedByName, Nullable<decimal> amount, Nullable<long> bankId, string merchantId, Nullable<int> status, string startDate, string endDate, Nullable<int> withdrawalRequestType, Nullable<int> checkWithdrawalApproveByAdmin)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(long));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var withdrawalRequestTypeParameter = withdrawalRequestType.HasValue ?
                new ObjectParameter("WithdrawalRequestType", withdrawalRequestType) :
                new ObjectParameter("WithdrawalRequestType", typeof(int));
    
            var checkWithdrawalApproveByAdminParameter = checkWithdrawalApproveByAdmin.HasValue ?
                new ObjectParameter("CheckWithdrawalApproveByAdmin", checkWithdrawalApproveByAdmin) :
                new ObjectParameter("CheckWithdrawalApproveByAdmin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MerchantWithdrawalRequest_Get_Result>("sp_MerchantWithdrawalRequest_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, orderIdParameter, updatedByParameter, updatedByNameParameter, amountParameter, bankIdParameter, merchantIdParameter, statusParameter, startDateParameter, endDateParameter, withdrawalRequestTypeParameter, checkWithdrawalApproveByAdminParameter);
        }
    
        public virtual ObjectResult<sp_NCHLServiceCreateUpdate_Result> sp_NCHLServiceCreateUpdate(string batchId, string instructionId, string endToEndId, string appId, string vendorType, string amount, Nullable<int> status, string creationDate, string transactionId, Nullable<decimal> memberId, string lodgeRequest, string lodgeResponse, string confirmRequest, string confirmResponse, string statementType)
        {
            var batchIdParameter = batchId != null ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(string));
    
            var instructionIdParameter = instructionId != null ?
                new ObjectParameter("instructionId", instructionId) :
                new ObjectParameter("instructionId", typeof(string));
    
            var endToEndIdParameter = endToEndId != null ?
                new ObjectParameter("EndToEndId", endToEndId) :
                new ObjectParameter("EndToEndId", typeof(string));
    
            var appIdParameter = appId != null ?
                new ObjectParameter("appId", appId) :
                new ObjectParameter("appId", typeof(string));
    
            var vendorTypeParameter = vendorType != null ?
                new ObjectParameter("vendorType", vendorType) :
                new ObjectParameter("vendorType", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var creationDateParameter = creationDate != null ?
                new ObjectParameter("creationDate", creationDate) :
                new ObjectParameter("creationDate", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("transactionId", transactionId) :
                new ObjectParameter("transactionId", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("memberId", memberId) :
                new ObjectParameter("memberId", typeof(decimal));
    
            var lodgeRequestParameter = lodgeRequest != null ?
                new ObjectParameter("lodgeRequest", lodgeRequest) :
                new ObjectParameter("lodgeRequest", typeof(string));
    
            var lodgeResponseParameter = lodgeResponse != null ?
                new ObjectParameter("lodgeResponse", lodgeResponse) :
                new ObjectParameter("lodgeResponse", typeof(string));
    
            var confirmRequestParameter = confirmRequest != null ?
                new ObjectParameter("confirmRequest", confirmRequest) :
                new ObjectParameter("confirmRequest", typeof(string));
    
            var confirmResponseParameter = confirmResponse != null ?
                new ObjectParameter("confirmResponse", confirmResponse) :
                new ObjectParameter("confirmResponse", typeof(string));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NCHLServiceCreateUpdate_Result>("sp_NCHLServiceCreateUpdate", batchIdParameter, instructionIdParameter, endToEndIdParameter, appIdParameter, vendorTypeParameter, amountParameter, statusParameter, creationDateParameter, transactionIdParameter, memberIdParameter, lodgeRequestParameter, lodgeResponseParameter, confirmRequestParameter, confirmResponseParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<sp_NEA_Details_Get_Result> sp_NEA_Details_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> sessionId, Nullable<long> customerId, string transactionId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NEA_Details_Get_Result>("sp_NEA_Details_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, sessionIdParameter, customerIdParameter, transactionIdParameter);
        }
    
        public virtual ObjectResult<sp_NepalPayQR_Detail_Result> sp_NepalPayQR_Detail(string flag, string instructionId, string validationTraceId, Nullable<decimal> amount, Nullable<decimal> interchangeFee, Nullable<decimal> transactionFee, string merchantName, string merchantCity, string merchantCountryCode, string merchantBillNo, string merchantTxnRef, string merchantPostalcode, string merchantPan, string qrType, string qrString, string merchantCategoryCode, string payerName, string payerPanId, string payerMobileNumber, string payerEmailAddress, string debtorAccount, string debtorAgent, string debtorAgentBranch, string encKeySerial, string token, string transactionStatus, string createdby, Nullable<long> memberId, string status, string transactionId, string id, string orginalTxnId, string refundedTxnId, string refundType, string issuerId, string refundReasonMessage, string myPayOrginalTxnId, string myPayRefundedTxnId, string nQrTxnId, string narration, string instrument, string acquirerid)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var instructionIdParameter = instructionId != null ?
                new ObjectParameter("instructionId", instructionId) :
                new ObjectParameter("instructionId", typeof(string));
    
            var validationTraceIdParameter = validationTraceId != null ?
                new ObjectParameter("validationTraceId", validationTraceId) :
                new ObjectParameter("validationTraceId", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var interchangeFeeParameter = interchangeFee.HasValue ?
                new ObjectParameter("interchangeFee", interchangeFee) :
                new ObjectParameter("interchangeFee", typeof(decimal));
    
            var transactionFeeParameter = transactionFee.HasValue ?
                new ObjectParameter("transactionFee", transactionFee) :
                new ObjectParameter("transactionFee", typeof(decimal));
    
            var merchantNameParameter = merchantName != null ?
                new ObjectParameter("merchantName", merchantName) :
                new ObjectParameter("merchantName", typeof(string));
    
            var merchantCityParameter = merchantCity != null ?
                new ObjectParameter("merchantCity", merchantCity) :
                new ObjectParameter("merchantCity", typeof(string));
    
            var merchantCountryCodeParameter = merchantCountryCode != null ?
                new ObjectParameter("merchantCountryCode", merchantCountryCode) :
                new ObjectParameter("merchantCountryCode", typeof(string));
    
            var merchantBillNoParameter = merchantBillNo != null ?
                new ObjectParameter("merchantBillNo", merchantBillNo) :
                new ObjectParameter("merchantBillNo", typeof(string));
    
            var merchantTxnRefParameter = merchantTxnRef != null ?
                new ObjectParameter("merchantTxnRef", merchantTxnRef) :
                new ObjectParameter("merchantTxnRef", typeof(string));
    
            var merchantPostalcodeParameter = merchantPostalcode != null ?
                new ObjectParameter("merchantPostalcode", merchantPostalcode) :
                new ObjectParameter("merchantPostalcode", typeof(string));
    
            var merchantPanParameter = merchantPan != null ?
                new ObjectParameter("merchantPan", merchantPan) :
                new ObjectParameter("merchantPan", typeof(string));
    
            var qrTypeParameter = qrType != null ?
                new ObjectParameter("qrType", qrType) :
                new ObjectParameter("qrType", typeof(string));
    
            var qrStringParameter = qrString != null ?
                new ObjectParameter("qrString", qrString) :
                new ObjectParameter("qrString", typeof(string));
    
            var merchantCategoryCodeParameter = merchantCategoryCode != null ?
                new ObjectParameter("merchantCategoryCode", merchantCategoryCode) :
                new ObjectParameter("merchantCategoryCode", typeof(string));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("payerName", payerName) :
                new ObjectParameter("payerName", typeof(string));
    
            var payerPanIdParameter = payerPanId != null ?
                new ObjectParameter("payerPanId", payerPanId) :
                new ObjectParameter("payerPanId", typeof(string));
    
            var payerMobileNumberParameter = payerMobileNumber != null ?
                new ObjectParameter("payerMobileNumber", payerMobileNumber) :
                new ObjectParameter("payerMobileNumber", typeof(string));
    
            var payerEmailAddressParameter = payerEmailAddress != null ?
                new ObjectParameter("payerEmailAddress", payerEmailAddress) :
                new ObjectParameter("payerEmailAddress", typeof(string));
    
            var debtorAccountParameter = debtorAccount != null ?
                new ObjectParameter("debtorAccount", debtorAccount) :
                new ObjectParameter("debtorAccount", typeof(string));
    
            var debtorAgentParameter = debtorAgent != null ?
                new ObjectParameter("debtorAgent", debtorAgent) :
                new ObjectParameter("debtorAgent", typeof(string));
    
            var debtorAgentBranchParameter = debtorAgentBranch != null ?
                new ObjectParameter("debtorAgentBranch", debtorAgentBranch) :
                new ObjectParameter("debtorAgentBranch", typeof(string));
    
            var encKeySerialParameter = encKeySerial != null ?
                new ObjectParameter("encKeySerial", encKeySerial) :
                new ObjectParameter("encKeySerial", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            var transactionStatusParameter = transactionStatus != null ?
                new ObjectParameter("transactionStatus", transactionStatus) :
                new ObjectParameter("transactionStatus", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var orginalTxnIdParameter = orginalTxnId != null ?
                new ObjectParameter("OrginalTxnId", orginalTxnId) :
                new ObjectParameter("OrginalTxnId", typeof(string));
    
            var refundedTxnIdParameter = refundedTxnId != null ?
                new ObjectParameter("RefundedTxnId", refundedTxnId) :
                new ObjectParameter("RefundedTxnId", typeof(string));
    
            var refundTypeParameter = refundType != null ?
                new ObjectParameter("RefundType", refundType) :
                new ObjectParameter("RefundType", typeof(string));
    
            var issuerIdParameter = issuerId != null ?
                new ObjectParameter("IssuerId", issuerId) :
                new ObjectParameter("IssuerId", typeof(string));
    
            var refundReasonMessageParameter = refundReasonMessage != null ?
                new ObjectParameter("RefundReasonMessage", refundReasonMessage) :
                new ObjectParameter("RefundReasonMessage", typeof(string));
    
            var myPayOrginalTxnIdParameter = myPayOrginalTxnId != null ?
                new ObjectParameter("MyPayOrginalTxnId", myPayOrginalTxnId) :
                new ObjectParameter("MyPayOrginalTxnId", typeof(string));
    
            var myPayRefundedTxnIdParameter = myPayRefundedTxnId != null ?
                new ObjectParameter("MyPayRefundedTxnId", myPayRefundedTxnId) :
                new ObjectParameter("MyPayRefundedTxnId", typeof(string));
    
            var nQrTxnIdParameter = nQrTxnId != null ?
                new ObjectParameter("nQrTxnId", nQrTxnId) :
                new ObjectParameter("nQrTxnId", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("narration", narration) :
                new ObjectParameter("narration", typeof(string));
    
            var instrumentParameter = instrument != null ?
                new ObjectParameter("instrument", instrument) :
                new ObjectParameter("instrument", typeof(string));
    
            var acquireridParameter = acquirerid != null ?
                new ObjectParameter("acquirerid", acquirerid) :
                new ObjectParameter("acquirerid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NepalPayQR_Detail_Result>("sp_NepalPayQR_Detail", flagParameter, instructionIdParameter, validationTraceIdParameter, amountParameter, interchangeFeeParameter, transactionFeeParameter, merchantNameParameter, merchantCityParameter, merchantCountryCodeParameter, merchantBillNoParameter, merchantTxnRefParameter, merchantPostalcodeParameter, merchantPanParameter, qrTypeParameter, qrStringParameter, merchantCategoryCodeParameter, payerNameParameter, payerPanIdParameter, payerMobileNumberParameter, payerEmailAddressParameter, debtorAccountParameter, debtorAgentParameter, debtorAgentBranchParameter, encKeySerialParameter, tokenParameter, transactionStatusParameter, createdbyParameter, memberIdParameter, statusParameter, transactionIdParameter, idParameter, orginalTxnIdParameter, refundedTxnIdParameter, refundTypeParameter, issuerIdParameter, refundReasonMessageParameter, myPayOrginalTxnIdParameter, myPayRefundedTxnIdParameter, nQrTxnIdParameter, narrationParameter, instrumentParameter, acquireridParameter);
        }
    
        public virtual ObjectResult<sp_Notification_Datatable_Result> sp_Notification_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, Nullable<long> memberId, string startDate, string endDate)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Notification_Datatable_Result>("sp_Notification_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, memberIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Notification_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, Nullable<long> memberId, string startDate, string endDate)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Notification_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, memberIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_Notification_Get_Result> sp_Notification_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> memberId, Nullable<int> notificationType, Nullable<int> readStatus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var notificationTypeParameter = notificationType.HasValue ?
                new ObjectParameter("NotificationType", notificationType) :
                new ObjectParameter("NotificationType", typeof(int));
    
            var readStatusParameter = readStatus.HasValue ?
                new ObjectParameter("ReadStatus", readStatus) :
                new ObjectParameter("ReadStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Notification_Get_Result>("sp_Notification_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, memberIdParameter, notificationTypeParameter, readStatusParameter);
        }
    
        public virtual ObjectResult<sp_NotificationCampaign_Datatable_Result> sp_NotificationCampaign_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, Nullable<int> checkSentStatus, Nullable<int> checkKycStatus, Nullable<int> checkDeviceTypeStatus, Nullable<int> checkGenderStatus, Nullable<int> checkOldUserStatus, Nullable<int> checkRedirectType)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkSentStatusParameter = checkSentStatus.HasValue ?
                new ObjectParameter("CheckSentStatus", checkSentStatus) :
                new ObjectParameter("CheckSentStatus", typeof(int));
    
            var checkKycStatusParameter = checkKycStatus.HasValue ?
                new ObjectParameter("CheckKycStatus", checkKycStatus) :
                new ObjectParameter("CheckKycStatus", typeof(int));
    
            var checkDeviceTypeStatusParameter = checkDeviceTypeStatus.HasValue ?
                new ObjectParameter("CheckDeviceTypeStatus", checkDeviceTypeStatus) :
                new ObjectParameter("CheckDeviceTypeStatus", typeof(int));
    
            var checkGenderStatusParameter = checkGenderStatus.HasValue ?
                new ObjectParameter("CheckGenderStatus", checkGenderStatus) :
                new ObjectParameter("CheckGenderStatus", typeof(int));
    
            var checkOldUserStatusParameter = checkOldUserStatus.HasValue ?
                new ObjectParameter("CheckOldUserStatus", checkOldUserStatus) :
                new ObjectParameter("CheckOldUserStatus", typeof(int));
    
            var checkRedirectTypeParameter = checkRedirectType.HasValue ?
                new ObjectParameter("CheckRedirectType", checkRedirectType) :
                new ObjectParameter("CheckRedirectType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationCampaign_Datatable_Result>("sp_NotificationCampaign_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, checkSentStatusParameter, checkKycStatusParameter, checkDeviceTypeStatusParameter, checkGenderStatusParameter, checkOldUserStatusParameter, checkRedirectTypeParameter);
        }
    
        public virtual ObjectResult<sp_NotificationCampaign_Get_Result> sp_NotificationCampaign_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkCompleted, Nullable<long> createdBy, string createdByName, Nullable<int> checkSentStatus, Nullable<int> checkKycStatus, Nullable<int> checkGenderStatus, Nullable<int> checkOldUserStatus, Nullable<int> checkDeviceTypeStatus, Nullable<int> checkRedirectType, Nullable<long> memberId, string uRL, string province, string district, Nullable<int> geography, string scheduleDateTime)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkCompletedParameter = checkCompleted.HasValue ?
                new ObjectParameter("CheckCompleted", checkCompleted) :
                new ObjectParameter("CheckCompleted", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkSentStatusParameter = checkSentStatus.HasValue ?
                new ObjectParameter("CheckSentStatus", checkSentStatus) :
                new ObjectParameter("CheckSentStatus", typeof(int));
    
            var checkKycStatusParameter = checkKycStatus.HasValue ?
                new ObjectParameter("CheckKycStatus", checkKycStatus) :
                new ObjectParameter("CheckKycStatus", typeof(int));
    
            var checkGenderStatusParameter = checkGenderStatus.HasValue ?
                new ObjectParameter("CheckGenderStatus", checkGenderStatus) :
                new ObjectParameter("CheckGenderStatus", typeof(int));
    
            var checkOldUserStatusParameter = checkOldUserStatus.HasValue ?
                new ObjectParameter("CheckOldUserStatus", checkOldUserStatus) :
                new ObjectParameter("CheckOldUserStatus", typeof(int));
    
            var checkDeviceTypeStatusParameter = checkDeviceTypeStatus.HasValue ?
                new ObjectParameter("CheckDeviceTypeStatus", checkDeviceTypeStatus) :
                new ObjectParameter("CheckDeviceTypeStatus", typeof(int));
    
            var checkRedirectTypeParameter = checkRedirectType.HasValue ?
                new ObjectParameter("CheckRedirectType", checkRedirectType) :
                new ObjectParameter("CheckRedirectType", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var geographyParameter = geography.HasValue ?
                new ObjectParameter("Geography", geography) :
                new ObjectParameter("Geography", typeof(int));
    
            var scheduleDateTimeParameter = scheduleDateTime != null ?
                new ObjectParameter("ScheduleDateTime", scheduleDateTime) :
                new ObjectParameter("ScheduleDateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationCampaign_Get_Result>("sp_NotificationCampaign_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, checkCompletedParameter, createdByParameter, createdByNameParameter, checkSentStatusParameter, checkKycStatusParameter, checkGenderStatusParameter, checkOldUserStatusParameter, checkDeviceTypeStatusParameter, checkRedirectTypeParameter, memberIdParameter, uRLParameter, provinceParameter, districtParameter, geographyParameter, scheduleDateTimeParameter);
        }
    
        public virtual ObjectResult<sp_NotificationCampaignExcel_Datatable_Result> sp_NotificationCampaignExcel_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, Nullable<int> checkSentStatus, Nullable<int> checkDeviceTypeStatus, Nullable<int> checkRedirectType)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkSentStatusParameter = checkSentStatus.HasValue ?
                new ObjectParameter("CheckSentStatus", checkSentStatus) :
                new ObjectParameter("CheckSentStatus", typeof(int));
    
            var checkDeviceTypeStatusParameter = checkDeviceTypeStatus.HasValue ?
                new ObjectParameter("CheckDeviceTypeStatus", checkDeviceTypeStatus) :
                new ObjectParameter("CheckDeviceTypeStatus", typeof(int));
    
            var checkRedirectTypeParameter = checkRedirectType.HasValue ?
                new ObjectParameter("CheckRedirectType", checkRedirectType) :
                new ObjectParameter("CheckRedirectType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationCampaignExcel_Datatable_Result>("sp_NotificationCampaignExcel_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, checkSentStatusParameter, checkDeviceTypeStatusParameter, checkRedirectTypeParameter);
        }
    
        public virtual ObjectResult<sp_NotificationCampaignExcel_Get_Result> sp_NotificationCampaignExcel_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkCompleted, Nullable<long> createdBy, string createdByName, Nullable<int> checkSentStatus, Nullable<int> checkDeviceTypeStatus, Nullable<int> checkRedirectType, Nullable<long> memberId, string scheduleDateTime, Nullable<int> checkKycStatus, Nullable<int> checkGenderStatus, Nullable<int> checkOldUserStatus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkCompletedParameter = checkCompleted.HasValue ?
                new ObjectParameter("CheckCompleted", checkCompleted) :
                new ObjectParameter("CheckCompleted", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkSentStatusParameter = checkSentStatus.HasValue ?
                new ObjectParameter("CheckSentStatus", checkSentStatus) :
                new ObjectParameter("CheckSentStatus", typeof(int));
    
            var checkDeviceTypeStatusParameter = checkDeviceTypeStatus.HasValue ?
                new ObjectParameter("CheckDeviceTypeStatus", checkDeviceTypeStatus) :
                new ObjectParameter("CheckDeviceTypeStatus", typeof(int));
    
            var checkRedirectTypeParameter = checkRedirectType.HasValue ?
                new ObjectParameter("CheckRedirectType", checkRedirectType) :
                new ObjectParameter("CheckRedirectType", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var scheduleDateTimeParameter = scheduleDateTime != null ?
                new ObjectParameter("ScheduleDateTime", scheduleDateTime) :
                new ObjectParameter("ScheduleDateTime", typeof(string));
    
            var checkKycStatusParameter = checkKycStatus.HasValue ?
                new ObjectParameter("CheckKycStatus", checkKycStatus) :
                new ObjectParameter("CheckKycStatus", typeof(int));
    
            var checkGenderStatusParameter = checkGenderStatus.HasValue ?
                new ObjectParameter("CheckGenderStatus", checkGenderStatus) :
                new ObjectParameter("CheckGenderStatus", typeof(int));
    
            var checkOldUserStatusParameter = checkOldUserStatus.HasValue ?
                new ObjectParameter("CheckOldUserStatus", checkOldUserStatus) :
                new ObjectParameter("CheckOldUserStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationCampaignExcel_Get_Result>("sp_NotificationCampaignExcel_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, checkCompletedParameter, createdByParameter, createdByNameParameter, checkSentStatusParameter, checkDeviceTypeStatusParameter, checkRedirectTypeParameter, memberIdParameter, scheduleDateTimeParameter, checkKycStatusParameter, checkGenderStatusParameter, checkOldUserStatusParameter);
        }
    
        public virtual int sp_NotificationCampaignExcelData_AddNew(string contactNumber, Nullable<long> notificationCampaignExcelId, Nullable<int> sentStatus, Nullable<System.DateTime> sentDate, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> memberId, string memberName)
        {
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var notificationCampaignExcelIdParameter = notificationCampaignExcelId.HasValue ?
                new ObjectParameter("NotificationCampaignExcelId", notificationCampaignExcelId) :
                new ObjectParameter("NotificationCampaignExcelId", typeof(long));
    
            var sentStatusParameter = sentStatus.HasValue ?
                new ObjectParameter("SentStatus", sentStatus) :
                new ObjectParameter("SentStatus", typeof(int));
    
            var sentDateParameter = sentDate.HasValue ?
                new ObjectParameter("SentDate", sentDate) :
                new ObjectParameter("SentDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotificationCampaignExcelData_AddNew", contactNumberParameter, notificationCampaignExcelIdParameter, sentStatusParameter, sentDateParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, memberIdParameter, memberNameParameter);
        }
    
        public virtual ObjectResult<sp_NotificationCampaignExcelData_DataTable_Result> sp_NotificationCampaignExcelData_DataTable(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, string contactNumber, Nullable<long> notificationCampaignExcelId, Nullable<int> sentStatus, string checkSentDate, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var notificationCampaignExcelIdParameter = notificationCampaignExcelId.HasValue ?
                new ObjectParameter("NotificationCampaignExcelId", notificationCampaignExcelId) :
                new ObjectParameter("NotificationCampaignExcelId", typeof(long));
    
            var sentStatusParameter = sentStatus.HasValue ?
                new ObjectParameter("SentStatus", sentStatus) :
                new ObjectParameter("SentStatus", typeof(int));
    
            var checkSentDateParameter = checkSentDate != null ?
                new ObjectParameter("CheckSentDate", checkSentDate) :
                new ObjectParameter("CheckSentDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationCampaignExcelData_DataTable_Result>("sp_NotificationCampaignExcelData_DataTable", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, contactNumberParameter, notificationCampaignExcelIdParameter, sentStatusParameter, checkSentDateParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_NotificationCampaignExcelData_DataTableCounter(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, string contactNumber, Nullable<long> notificationCampaignExcelId, Nullable<int> sentStatus, string checkSentDate, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var notificationCampaignExcelIdParameter = notificationCampaignExcelId.HasValue ?
                new ObjectParameter("NotificationCampaignExcelId", notificationCampaignExcelId) :
                new ObjectParameter("NotificationCampaignExcelId", typeof(long));
    
            var sentStatusParameter = sentStatus.HasValue ?
                new ObjectParameter("SentStatus", sentStatus) :
                new ObjectParameter("SentStatus", typeof(int));
    
            var checkSentDateParameter = checkSentDate != null ?
                new ObjectParameter("CheckSentDate", checkSentDate) :
                new ObjectParameter("CheckSentDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_NotificationCampaignExcelData_DataTableCounter", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, contactNumberParameter, notificationCampaignExcelIdParameter, sentStatusParameter, checkSentDateParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_NotificationCampaignExcelData_Get_Result> sp_NotificationCampaignExcelData_Get(string contactNumber, Nullable<long> notificationCampaignExcelId, Nullable<int> sentStatus, string checkSentDate, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var notificationCampaignExcelIdParameter = notificationCampaignExcelId.HasValue ?
                new ObjectParameter("NotificationCampaignExcelId", notificationCampaignExcelId) :
                new ObjectParameter("NotificationCampaignExcelId", typeof(long));
    
            var sentStatusParameter = sentStatus.HasValue ?
                new ObjectParameter("SentStatus", sentStatus) :
                new ObjectParameter("SentStatus", typeof(int));
    
            var checkSentDateParameter = checkSentDate != null ?
                new ObjectParameter("CheckSentDate", checkSentDate) :
                new ObjectParameter("CheckSentDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationCampaignExcelData_Get_Result>("sp_NotificationCampaignExcelData_Get", contactNumberParameter, notificationCampaignExcelIdParameter, sentStatusParameter, checkSentDateParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int sp_NotificationCampaignExcelData_Update(string contactNumber, Nullable<long> notificationCampaignExcelId, Nullable<int> sentStatus, Nullable<System.DateTime> sentDate, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id, Nullable<long> memberId, string memberName)
        {
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var notificationCampaignExcelIdParameter = notificationCampaignExcelId.HasValue ?
                new ObjectParameter("NotificationCampaignExcelId", notificationCampaignExcelId) :
                new ObjectParameter("NotificationCampaignExcelId", typeof(long));
    
            var sentStatusParameter = sentStatus.HasValue ?
                new ObjectParameter("SentStatus", sentStatus) :
                new ObjectParameter("SentStatus", typeof(int));
    
            var sentDateParameter = sentDate.HasValue ?
                new ObjectParameter("SentDate", sentDate) :
                new ObjectParameter("SentDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotificationCampaignExcelData_Update", contactNumberParameter, notificationCampaignExcelIdParameter, sentStatusParameter, sentDateParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter, memberIdParameter, memberNameParameter);
        }
    
        public virtual ObjectResult<sp_NotificationCampaignIDs_Get_Result> sp_NotificationCampaignIDs_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> notificationCampaignID, string scheduleDateTime, string province, string district)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var notificationCampaignIDParameter = notificationCampaignID.HasValue ?
                new ObjectParameter("NotificationCampaignID", notificationCampaignID) :
                new ObjectParameter("NotificationCampaignID", typeof(long));
    
            var scheduleDateTimeParameter = scheduleDateTime != null ?
                new ObjectParameter("ScheduleDateTime", scheduleDateTime) :
                new ObjectParameter("ScheduleDateTime", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationCampaignIDs_Get_Result>("sp_NotificationCampaignIDs_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, notificationCampaignIDParameter, scheduleDateTimeParameter, provinceParameter, districtParameter);
        }
    
        public virtual ObjectResult<sp_NRB_Get_Result> sp_NRB_Get(Nullable<long> memberId, Nullable<int> type, Nullable<decimal> startAmount, Nullable<decimal> endAmount, string startDate, string endDate, Nullable<int> annexture)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var startAmountParameter = startAmount.HasValue ?
                new ObjectParameter("StartAmount", startAmount) :
                new ObjectParameter("StartAmount", typeof(decimal));
    
            var endAmountParameter = endAmount.HasValue ?
                new ObjectParameter("EndAmount", endAmount) :
                new ObjectParameter("EndAmount", typeof(decimal));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var annextureParameter = annexture.HasValue ?
                new ObjectParameter("Annexture", annexture) :
                new ObjectParameter("Annexture", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NRB_Get_Result>("sp_NRB_Get", memberIdParameter, typeParameter, startAmountParameter, endAmountParameter, startDateParameter, endDateParameter, annextureParameter);
        }
    
        public virtual ObjectResult<sp_Occupation_Get_Result> sp_Occupation_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, string categoryName, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> position, Nullable<long> createdBy, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Occupation_Get_Result>("sp_Occupation_Get", idParameter, takeParameter, skipParameter, categoryNameParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, positionParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_OfferBanners_Get_Result> sp_OfferBanners_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string name, string checkFromDate, string checkToDate, Nullable<int> type, string running, string expired, string scheduled, Nullable<int> priority, Nullable<int> isHome, string uRL)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var checkFromDateParameter = checkFromDate != null ?
                new ObjectParameter("CheckFromDate", checkFromDate) :
                new ObjectParameter("CheckFromDate", typeof(string));
    
            var checkToDateParameter = checkToDate != null ?
                new ObjectParameter("CheckToDate", checkToDate) :
                new ObjectParameter("CheckToDate", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var expiredParameter = expired != null ?
                new ObjectParameter("Expired", expired) :
                new ObjectParameter("Expired", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var isHomeParameter = isHome.HasValue ?
                new ObjectParameter("IsHome", isHome) :
                new ObjectParameter("IsHome", typeof(int));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OfferBanners_Get_Result>("sp_OfferBanners_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, nameParameter, checkFromDateParameter, checkToDateParameter, typeParameter, runningParameter, expiredParameter, scheduledParameter, priorityParameter, isHomeParameter, uRLParameter);
        }
    
        public virtual ObjectResult<sp_OldUserExport_Get_Result> sp_OldUserExport_Get(Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> createdBy, string name, Nullable<int> isKYCApproved, Nullable<int> roleId, string email, string contactNumber, string refCode, string checkPasswordReset, string checkNotPasswordReset, string checkPin, string checkNotPin, string checkFirstName, string checkNotFirstName, Nullable<int> checkOldAndNewUser, string loginFromDate, string loginToDate, Nullable<long> refId, string refCodeAttempted)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isKYCApprovedParameter = isKYCApproved.HasValue ?
                new ObjectParameter("IsKYCApproved", isKYCApproved) :
                new ObjectParameter("IsKYCApproved", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var checkPasswordResetParameter = checkPasswordReset != null ?
                new ObjectParameter("CheckPasswordReset", checkPasswordReset) :
                new ObjectParameter("CheckPasswordReset", typeof(string));
    
            var checkNotPasswordResetParameter = checkNotPasswordReset != null ?
                new ObjectParameter("CheckNotPasswordReset", checkNotPasswordReset) :
                new ObjectParameter("CheckNotPasswordReset", typeof(string));
    
            var checkPinParameter = checkPin != null ?
                new ObjectParameter("CheckPin", checkPin) :
                new ObjectParameter("CheckPin", typeof(string));
    
            var checkNotPinParameter = checkNotPin != null ?
                new ObjectParameter("CheckNotPin", checkNotPin) :
                new ObjectParameter("CheckNotPin", typeof(string));
    
            var checkFirstNameParameter = checkFirstName != null ?
                new ObjectParameter("CheckFirstName", checkFirstName) :
                new ObjectParameter("CheckFirstName", typeof(string));
    
            var checkNotFirstNameParameter = checkNotFirstName != null ?
                new ObjectParameter("CheckNotFirstName", checkNotFirstName) :
                new ObjectParameter("CheckNotFirstName", typeof(string));
    
            var checkOldAndNewUserParameter = checkOldAndNewUser.HasValue ?
                new ObjectParameter("CheckOldAndNewUser", checkOldAndNewUser) :
                new ObjectParameter("CheckOldAndNewUser", typeof(int));
    
            var loginFromDateParameter = loginFromDate != null ?
                new ObjectParameter("LoginFromDate", loginFromDate) :
                new ObjectParameter("LoginFromDate", typeof(string));
    
            var loginToDateParameter = loginToDate != null ?
                new ObjectParameter("LoginToDate", loginToDate) :
                new ObjectParameter("LoginToDate", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var refCodeAttemptedParameter = refCodeAttempted != null ?
                new ObjectParameter("RefCodeAttempted", refCodeAttempted) :
                new ObjectParameter("RefCodeAttempted", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OldUserExport_Get_Result>("sp_OldUserExport_Get", memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, createdByParameter, nameParameter, isKYCApprovedParameter, roleIdParameter, emailParameter, contactNumberParameter, refCodeParameter, checkPasswordResetParameter, checkNotPasswordResetParameter, checkPinParameter, checkNotPinParameter, checkFirstNameParameter, checkNotFirstNameParameter, checkOldAndNewUserParameter, loginFromDateParameter, loginToDateParameter, refIdParameter, refCodeAttemptedParameter);
        }
    
        public virtual ObjectResult<sp_ProviderLogoList_Get_Result> sp_ProviderLogoList_Get(string providerName, Nullable<int> providerServiceCategoryId, Nullable<int> providerTypeId, string providerServiceName, string providerLogoURL, Nullable<int> isActive, Nullable<long> id, Nullable<int> take)
        {
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var providerServiceCategoryIdParameter = providerServiceCategoryId.HasValue ?
                new ObjectParameter("ProviderServiceCategoryId", providerServiceCategoryId) :
                new ObjectParameter("ProviderServiceCategoryId", typeof(int));
    
            var providerTypeIdParameter = providerTypeId.HasValue ?
                new ObjectParameter("ProviderTypeId", providerTypeId) :
                new ObjectParameter("ProviderTypeId", typeof(int));
    
            var providerServiceNameParameter = providerServiceName != null ?
                new ObjectParameter("ProviderServiceName", providerServiceName) :
                new ObjectParameter("ProviderServiceName", typeof(string));
    
            var providerLogoURLParameter = providerLogoURL != null ?
                new ObjectParameter("ProviderLogoURL", providerLogoURL) :
                new ObjectParameter("ProviderLogoURL", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProviderLogoList_Get_Result>("sp_ProviderLogoList_Get", providerNameParameter, providerServiceCategoryIdParameter, providerTypeIdParameter, providerServiceNameParameter, providerLogoURLParameter, isActiveParameter, idParameter, takeParameter);
        }
    
        public virtual ObjectResult<sp_ProviderLogosList_Datatable_Result> sp_ProviderLogosList_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> id, Nullable<long> providerServiceCategoryId, Nullable<int> checkIsServiceDown)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var providerServiceCategoryIdParameter = providerServiceCategoryId.HasValue ?
                new ObjectParameter("ProviderServiceCategoryId", providerServiceCategoryId) :
                new ObjectParameter("ProviderServiceCategoryId", typeof(long));
    
            var checkIsServiceDownParameter = checkIsServiceDown.HasValue ?
                new ObjectParameter("CheckIsServiceDown", checkIsServiceDown) :
                new ObjectParameter("CheckIsServiceDown", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProviderLogosList_Datatable_Result>("sp_ProviderLogosList_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, idParameter, providerServiceCategoryIdParameter, checkIsServiceDownParameter);
        }
    
        public virtual ObjectResult<sp_ProviderServiceCategoryList_Datatable_Result> sp_ProviderServiceCategoryList_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> id)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProviderServiceCategoryList_Datatable_Result>("sp_ProviderServiceCategoryList_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_ProviderServiceCategoryList_Get_Result> sp_ProviderServiceCategoryList_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, string providerCategoryName, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> roleId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var providerCategoryNameParameter = providerCategoryName != null ?
                new ObjectParameter("ProviderCategoryName", providerCategoryName) :
                new ObjectParameter("ProviderCategoryName", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProviderServiceCategoryList_Get_Result>("sp_ProviderServiceCategoryList_Get", idParameter, takeParameter, skipParameter, providerCategoryNameParameter, checkDeleteParameter, checkActiveParameter, roleIdParameter);
        }
    
        public virtual int sp_ProviderServiceCategoryList_Update(Nullable<long> providerServiceCategoryId, Nullable<bool> isServiceDown)
        {
            var providerServiceCategoryIdParameter = providerServiceCategoryId.HasValue ?
                new ObjectParameter("ProviderServiceCategoryId", providerServiceCategoryId) :
                new ObjectParameter("ProviderServiceCategoryId", typeof(long));
    
            var isServiceDownParameter = isServiceDown.HasValue ?
                new ObjectParameter("IsServiceDown", isServiceDown) :
                new ObjectParameter("IsServiceDown", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProviderServiceCategoryList_Update", providerServiceCategoryIdParameter, isServiceDownParameter);
        }
    
        public virtual ObjectResult<sp_Province_Get_Result> sp_Province_Get(string province, string provinceCode, string countryCode)
        {
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var provinceCodeParameter = provinceCode != null ?
                new ObjectParameter("ProvinceCode", provinceCode) :
                new ObjectParameter("ProvinceCode", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Province_Get_Result>("sp_Province_Get", provinceParameter, provinceCodeParameter, countryCodeParameter);
        }
    
        public virtual ObjectResult<sp_Purpose_Get_Result> sp_Purpose_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, string categoryName, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> position, Nullable<long> createdBy, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Purpose_Get_Result>("sp_Purpose_Get", idParameter, takeParameter, skipParameter, categoryNameParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, positionParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual int SP_REBUILD_NON_CLUSTER_INXEX()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_REBUILD_NON_CLUSTER_INXEX");
        }
    
        public virtual ObjectResult<sp_RecentTransactions_Get_Result> sp_RecentTransactions_Get(string sortOrder, Nullable<int> offsetValue, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> type, string customerID, Nullable<int> roleId)
        {
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RecentTransactions_Get_Result>("sp_RecentTransactions_Get", sortOrderParameter, offsetValueParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, typeParameter, customerIDParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<sp_RedeemPoints_Datatable_Result> sp_RedeemPoints_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string title, string startDate, string endDate)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RedeemPoints_Datatable_Result>("sp_RedeemPoints_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, titleParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_RedeemPoints_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string title, string startDate, string endDate)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_RedeemPoints_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, titleParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_RedeemPoints_Get_Result> sp_RedeemPoints_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string startDate, string endDate, string title)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RedeemPoints_Get_Result>("sp_RedeemPoints_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, startDateParameter, endDateParameter, titleParameter);
        }
    
        public virtual ObjectResult<sp_ReferEarn_Export_Result> sp_ReferEarn_Export(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, string startDate, string endDate, Nullable<long> createdBy, Nullable<int> status, Nullable<int> sign, string memberName, Nullable<decimal> amount, Nullable<decimal> currentBalance, string vendorTransactionId, string reference, string contactNumber, string recieverName, string recieverContactNumber, Nullable<int> walletType, string today, string weekly, string monthly, string refCode, string parentTransactionId, Nullable<int> vendorType)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReferEarn_Export_Result>("sp_ReferEarn_Export", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, startDateParameter, endDateParameter, createdByParameter, statusParameter, signParameter, memberNameParameter, amountParameter, currentBalanceParameter, vendorTransactionIdParameter, referenceParameter, contactNumberParameter, recieverNameParameter, recieverContactNumberParameter, walletTypeParameter, todayParameter, weeklyParameter, monthlyParameter, refCodeParameter, parentTransactionIdParameter, vendorTypeParameter);
        }
    
        public virtual ObjectResult<sp_ReferEarnImage_Get_Result> sp_ReferEarnImage_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string createdByName, Nullable<int> checkDelete)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReferEarnImage_Get_Result>("sp_ReferEarnImage_Get", idParameter, takeParameter, skipParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, createdByNameParameter, checkDeleteParameter);
        }
    
        public virtual ObjectResult<sp_RegisterVerification_OTP_Check_Result> sp_RegisterVerification_OTP_Check(string contactNumber, string oTP, Nullable<int> verificationType, Nullable<int> phoneExtension, string deviceCode)
        {
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            var verificationTypeParameter = verificationType.HasValue ?
                new ObjectParameter("VerificationType", verificationType) :
                new ObjectParameter("VerificationType", typeof(int));
    
            var phoneExtensionParameter = phoneExtension.HasValue ?
                new ObjectParameter("PhoneExtension", phoneExtension) :
                new ObjectParameter("PhoneExtension", typeof(int));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RegisterVerification_OTP_Check_Result>("sp_RegisterVerification_OTP_Check", contactNumberParameter, oTPParameter, verificationTypeParameter, phoneExtensionParameter, deviceCodeParameter);
        }
    
        public virtual ObjectResult<sp_RemittanceAPIRequest_Get_Result> sp_RemittanceAPIRequest_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> vendorType, string req_Input, string res_Output, string req_Khalti_Input, string res_Khalti_Output, string req_URL, string req_Token, string req_ReferenceNo, string req_Khalti_ReferenceNo, string req_Khalti_URL, string res_Khalti_Status, string res_Khalti_State, string res_Khalti_Message, string res_Khalti_Id, string transactionUniqueId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var req_InputParameter = req_Input != null ?
                new ObjectParameter("Req_Input", req_Input) :
                new ObjectParameter("Req_Input", typeof(string));
    
            var res_OutputParameter = res_Output != null ?
                new ObjectParameter("Res_Output", res_Output) :
                new ObjectParameter("Res_Output", typeof(string));
    
            var req_Khalti_InputParameter = req_Khalti_Input != null ?
                new ObjectParameter("Req_Khalti_Input", req_Khalti_Input) :
                new ObjectParameter("Req_Khalti_Input", typeof(string));
    
            var res_Khalti_OutputParameter = res_Khalti_Output != null ?
                new ObjectParameter("Res_Khalti_Output", res_Khalti_Output) :
                new ObjectParameter("Res_Khalti_Output", typeof(string));
    
            var req_URLParameter = req_URL != null ?
                new ObjectParameter("Req_URL", req_URL) :
                new ObjectParameter("Req_URL", typeof(string));
    
            var req_TokenParameter = req_Token != null ?
                new ObjectParameter("Req_Token", req_Token) :
                new ObjectParameter("Req_Token", typeof(string));
    
            var req_ReferenceNoParameter = req_ReferenceNo != null ?
                new ObjectParameter("Req_ReferenceNo", req_ReferenceNo) :
                new ObjectParameter("Req_ReferenceNo", typeof(string));
    
            var req_Khalti_ReferenceNoParameter = req_Khalti_ReferenceNo != null ?
                new ObjectParameter("Req_Khalti_ReferenceNo", req_Khalti_ReferenceNo) :
                new ObjectParameter("Req_Khalti_ReferenceNo", typeof(string));
    
            var req_Khalti_URLParameter = req_Khalti_URL != null ?
                new ObjectParameter("Req_Khalti_URL", req_Khalti_URL) :
                new ObjectParameter("Req_Khalti_URL", typeof(string));
    
            var res_Khalti_StatusParameter = res_Khalti_Status != null ?
                new ObjectParameter("Res_Khalti_Status", res_Khalti_Status) :
                new ObjectParameter("Res_Khalti_Status", typeof(string));
    
            var res_Khalti_StateParameter = res_Khalti_State != null ?
                new ObjectParameter("Res_Khalti_State", res_Khalti_State) :
                new ObjectParameter("Res_Khalti_State", typeof(string));
    
            var res_Khalti_MessageParameter = res_Khalti_Message != null ?
                new ObjectParameter("Res_Khalti_Message", res_Khalti_Message) :
                new ObjectParameter("Res_Khalti_Message", typeof(string));
    
            var res_Khalti_IdParameter = res_Khalti_Id != null ?
                new ObjectParameter("Res_Khalti_Id", res_Khalti_Id) :
                new ObjectParameter("Res_Khalti_Id", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RemittanceAPIRequest_Get_Result>("sp_RemittanceAPIRequest_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, vendorTypeParameter, req_InputParameter, res_OutputParameter, req_Khalti_InputParameter, res_Khalti_OutputParameter, req_URLParameter, req_TokenParameter, req_ReferenceNoParameter, req_Khalti_ReferenceNoParameter, req_Khalti_URLParameter, res_Khalti_StatusParameter, res_Khalti_StateParameter, res_Khalti_MessageParameter, res_Khalti_IdParameter, transactionUniqueIdParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ReorganizeIndex_Scheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ReorganizeIndex_Scheduler");
        }
    
        public virtual ObjectResult<sp_RequestFund_Datatable_Result> sp_RequestFund_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> createdBy, Nullable<long> memberId, Nullable<long> senderMemberId, Nullable<int> requestStatus, string today, string weekly, string monthly)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var senderMemberIdParameter = senderMemberId.HasValue ?
                new ObjectParameter("SenderMemberId", senderMemberId) :
                new ObjectParameter("SenderMemberId", typeof(long));
    
            var requestStatusParameter = requestStatus.HasValue ?
                new ObjectParameter("RequestStatus", requestStatus) :
                new ObjectParameter("RequestStatus", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RequestFund_Datatable_Result>("sp_RequestFund_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, createdByParameter, memberIdParameter, senderMemberIdParameter, requestStatusParameter, todayParameter, weeklyParameter, monthlyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_RequestFund_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> createdBy, Nullable<long> memberId, Nullable<long> senderMemberId, Nullable<int> requestStatus, string today, string weekly, string monthly)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var senderMemberIdParameter = senderMemberId.HasValue ?
                new ObjectParameter("SenderMemberId", senderMemberId) :
                new ObjectParameter("SenderMemberId", typeof(long));
    
            var requestStatusParameter = requestStatus.HasValue ?
                new ObjectParameter("RequestStatus", requestStatus) :
                new ObjectParameter("RequestStatus", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_RequestFund_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, createdByParameter, memberIdParameter, senderMemberIdParameter, requestStatusParameter, todayParameter, weeklyParameter, monthlyParameter);
        }
    
        public virtual ObjectResult<sp_RequestFund_Get_Result> sp_RequestFund_Get(Nullable<long> memberId, Nullable<long> senderMemberId, Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> requestStatus, string today, string weekly, string monthly, string startDate, string endDate, Nullable<int> type)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var senderMemberIdParameter = senderMemberId.HasValue ?
                new ObjectParameter("SenderMemberId", senderMemberId) :
                new ObjectParameter("SenderMemberId", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var requestStatusParameter = requestStatus.HasValue ?
                new ObjectParameter("RequestStatus", requestStatus) :
                new ObjectParameter("RequestStatus", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RequestFund_Get_Result>("sp_RequestFund_Get", memberIdParameter, senderMemberIdParameter, idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, requestStatusParameter, todayParameter, weeklyParameter, monthlyParameter, startDateParameter, endDateParameter, typeParameter);
        }
    
        public virtual int sp_RewardPointTransactions_AddNew(Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string remarks, string description, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> createdBy, string createdByName, Nullable<int> vendorServiceID)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var vendorServiceIDParameter = vendorServiceID.HasValue ?
                new ObjectParameter("VendorServiceID", vendorServiceID) :
                new ObjectParameter("VendorServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RewardPointTransactions_AddNew", memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, remarksParameter, descriptionParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, createdByParameter, createdByNameParameter, vendorServiceIDParameter);
        }
    
        public virtual ObjectResult<sp_RewardPointTransactions_Datatable_Result> sp_RewardPointTransactions_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, Nullable<int> type, string startDate, string endDate, Nullable<long> createdBy, Nullable<int> status, Nullable<int> sign, string memberName, Nullable<decimal> amount, Nullable<decimal> currentBalance, string vendorTransactionId, string reference, Nullable<int> vendorServiceID)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var vendorServiceIDParameter = vendorServiceID.HasValue ?
                new ObjectParameter("VendorServiceID", vendorServiceID) :
                new ObjectParameter("VendorServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RewardPointTransactions_Datatable_Result>("sp_RewardPointTransactions_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, typeParameter, startDateParameter, endDateParameter, createdByParameter, statusParameter, signParameter, memberNameParameter, amountParameter, currentBalanceParameter, vendorTransactionIdParameter, referenceParameter, vendorServiceIDParameter);
        }
    
        public virtual ObjectResult<sp_RewardPointTransactions_DatatableCounter_Result> sp_RewardPointTransactions_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, Nullable<int> type, string startDate, string endDate, Nullable<long> createdBy, Nullable<int> status, Nullable<int> sign, string memberName, Nullable<decimal> amount, Nullable<decimal> currentBalance, string vendorTransactionId, string reference, Nullable<int> vendorServiceID)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var vendorServiceIDParameter = vendorServiceID.HasValue ?
                new ObjectParameter("VendorServiceID", vendorServiceID) :
                new ObjectParameter("VendorServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RewardPointTransactions_DatatableCounter_Result>("sp_RewardPointTransactions_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, typeParameter, startDateParameter, endDateParameter, createdByParameter, statusParameter, signParameter, memberNameParameter, amountParameter, currentBalanceParameter, vendorTransactionIdParameter, referenceParameter, vendorServiceIDParameter);
        }
    
        public virtual ObjectResult<sp_RewardPointTransactions_Get_Result> sp_RewardPointTransactions_Get(Nullable<long> id, Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<int> take, Nullable<int> skip, string startDate, string endDate, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string checkCreatedDate, Nullable<long> createdBy, string createdByName, Nullable<int> vendorServiceID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var vendorServiceIDParameter = vendorServiceID.HasValue ?
                new ObjectParameter("VendorServiceID", vendorServiceID) :
                new ObjectParameter("VendorServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RewardPointTransactions_Get_Result>("sp_RewardPointTransactions_Get", idParameter, memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, takeParameter, skipParameter, startDateParameter, endDateParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, checkCreatedDateParameter, createdByParameter, createdByNameParameter, vendorServiceIDParameter);
        }
    
        public virtual int sp_RewardPointTransactions_Update(Nullable<long> id, Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string remarks, string description, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string reference, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> createdBy, string createdByName, Nullable<int> vendorServiceID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var vendorServiceIDParameter = vendorServiceID.HasValue ?
                new ObjectParameter("VendorServiceID", vendorServiceID) :
                new ObjectParameter("VendorServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RewardPointTransactions_Update", idParameter, memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, remarksParameter, descriptionParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, referenceParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, createdByParameter, createdByNameParameter, vendorServiceIDParameter);
        }
    
        public virtual ObjectResult<sp_Role_Get_Result> sp_Role_Get(Nullable<long> id, string roleName, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> take, Nullable<int> skip, Nullable<long> createdBy, string createdByName, Nullable<int> checkIsAdminLogin)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkIsAdminLoginParameter = checkIsAdminLogin.HasValue ?
                new ObjectParameter("CheckIsAdminLogin", checkIsAdminLogin) :
                new ObjectParameter("CheckIsAdminLogin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Role_Get_Result>("sp_Role_Get", idParameter, roleNameParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, takeParameter, skipParameter, createdByParameter, createdByNameParameter, checkIsAdminLoginParameter);
        }
    
        public virtual ObjectResult<sp_SectorList_Get_Result> sp_SectorList_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, string sectorName, string sectorCode, Nullable<int> checkActive, Nullable<int> roleId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var sectorNameParameter = sectorName != null ?
                new ObjectParameter("SectorName", sectorName) :
                new ObjectParameter("SectorName", typeof(string));
    
            var sectorCodeParameter = sectorCode != null ?
                new ObjectParameter("SectorCode", sectorCode) :
                new ObjectParameter("SectorCode", typeof(string));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SectorList_Get_Result>("sp_SectorList_Get", idParameter, takeParameter, skipParameter, sectorNameParameter, sectorCodeParameter, checkActiveParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ServiceActivityMonitor_Scheduler()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ServiceActivityMonitor_Scheduler");
        }
    
        public virtual int sp_ServiceInactiveRemarks_AddNew(Nullable<int> serviceId, string remarks, string action, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceInactiveRemarks_AddNew", serviceIdParameter, remarksParameter, actionParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_ServiceInactiveRemarks_DataTable_Result> sp_ServiceInactiveRemarks_DataTable(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<int> serviceId, string remarks, string action, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ServiceInactiveRemarks_DataTable_Result>("sp_ServiceInactiveRemarks_DataTable", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, serviceIdParameter, remarksParameter, actionParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ServiceInactiveRemarks_DataTableCounter(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<int> serviceId, string remarks, string action, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ServiceInactiveRemarks_DataTableCounter", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, serviceIdParameter, remarksParameter, actionParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_ServiceInactiveRemarks_Get_Result> sp_ServiceInactiveRemarks_Get(Nullable<int> serviceId, string remarks, string action, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ServiceInactiveRemarks_Get_Result>("sp_ServiceInactiveRemarks_Get", serviceIdParameter, remarksParameter, actionParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int sp_ServiceInactiveRemarks_Update(Nullable<int> serviceId, string remarks, string action, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceInactiveRemarks_Update", serviceIdParameter, remarksParameter, actionParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_Settings_Datatable_Result> sp_Settings_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, Nullable<int> type)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Settings_Datatable_Result>("sp_Settings_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_Settings_Get_Result> sp_Settings_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<decimal> registrationCommission, Nullable<decimal> kYCCommission, Nullable<decimal> transactionCommission, Nullable<decimal> registrationRewardPoint, Nullable<decimal> kYCRewardPoint, Nullable<decimal> transactionRewardPoint, Nullable<int> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var registrationCommissionParameter = registrationCommission.HasValue ?
                new ObjectParameter("RegistrationCommission", registrationCommission) :
                new ObjectParameter("RegistrationCommission", typeof(decimal));
    
            var kYCCommissionParameter = kYCCommission.HasValue ?
                new ObjectParameter("KYCCommission", kYCCommission) :
                new ObjectParameter("KYCCommission", typeof(decimal));
    
            var transactionCommissionParameter = transactionCommission.HasValue ?
                new ObjectParameter("TransactionCommission", transactionCommission) :
                new ObjectParameter("TransactionCommission", typeof(decimal));
    
            var registrationRewardPointParameter = registrationRewardPoint.HasValue ?
                new ObjectParameter("RegistrationRewardPoint", registrationRewardPoint) :
                new ObjectParameter("RegistrationRewardPoint", typeof(decimal));
    
            var kYCRewardPointParameter = kYCRewardPoint.HasValue ?
                new ObjectParameter("KYCRewardPoint", kYCRewardPoint) :
                new ObjectParameter("KYCRewardPoint", typeof(decimal));
    
            var transactionRewardPointParameter = transactionRewardPoint.HasValue ?
                new ObjectParameter("TransactionRewardPoint", transactionRewardPoint) :
                new ObjectParameter("TransactionRewardPoint", typeof(decimal));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Settings_Get_Result>("sp_Settings_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, registrationCommissionParameter, kYCCommissionParameter, transactionCommissionParameter, registrationRewardPointParameter, kYCRewardPointParameter, transactionRewardPointParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_SettingsHistory_Datatable_Result> sp_SettingsHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, Nullable<int> type)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SettingsHistory_Datatable_Result>("sp_SettingsHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_ShareReferLink_Datatable_Result> sp_ShareReferLink_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string refCode, string startDate, string endDate)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShareReferLink_Datatable_Result>("sp_ShareReferLink_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, refCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_ShareReferLink_Get_Result> sp_ShareReferLink_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, string refCode, string platForm, string iPAddress, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string createdByName, Nullable<int> checkDelete, Nullable<int> checkOpened)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var platFormParameter = platForm != null ?
                new ObjectParameter("PlatForm", platForm) :
                new ObjectParameter("PlatForm", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkOpenedParameter = checkOpened.HasValue ?
                new ObjectParameter("CheckOpened", checkOpened) :
                new ObjectParameter("CheckOpened", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShareReferLink_Get_Result>("sp_ShareReferLink_Get", idParameter, takeParameter, skipParameter, refCodeParameter, platFormParameter, iPAddressParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, createdByNameParameter, checkDeleteParameter, checkOpenedParameter);
        }
    
        public virtual ObjectResult<sp_State_Get_Result> sp_State_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, string stateName, string stateCountry, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var stateCountryParameter = stateCountry != null ?
                new ObjectParameter("StateCountry", stateCountry) :
                new ObjectParameter("StateCountry", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_State_Get_Result>("sp_State_Get", idParameter, takeParameter, skipParameter, stateNameParameter, stateCountryParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual int sp_SubAgentFees_AddNew(Nullable<long> subAgentId, string fullName, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> conversionRate, Nullable<decimal> minimumConversionRate, Nullable<decimal> maximumConversionRate, Nullable<decimal> subAgentFee, Nullable<decimal> adminFees, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> createdBy, string createdByName)
        {
            var subAgentIdParameter = subAgentId.HasValue ?
                new ObjectParameter("SubAgentId", subAgentId) :
                new ObjectParameter("SubAgentId", typeof(long));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var conversionRateParameter = conversionRate.HasValue ?
                new ObjectParameter("ConversionRate", conversionRate) :
                new ObjectParameter("ConversionRate", typeof(decimal));
    
            var minimumConversionRateParameter = minimumConversionRate.HasValue ?
                new ObjectParameter("MinimumConversionRate", minimumConversionRate) :
                new ObjectParameter("MinimumConversionRate", typeof(decimal));
    
            var maximumConversionRateParameter = maximumConversionRate.HasValue ?
                new ObjectParameter("MaximumConversionRate", maximumConversionRate) :
                new ObjectParameter("MaximumConversionRate", typeof(decimal));
    
            var subAgentFeeParameter = subAgentFee.HasValue ?
                new ObjectParameter("SubAgentFee", subAgentFee) :
                new ObjectParameter("SubAgentFee", typeof(decimal));
    
            var adminFeesParameter = adminFees.HasValue ?
                new ObjectParameter("AdminFees", adminFees) :
                new ObjectParameter("AdminFees", typeof(decimal));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubAgentFees_AddNew", subAgentIdParameter, fullNameParameter, minimumAmountParameter, maximumAmountParameter, conversionRateParameter, minimumConversionRateParameter, maximumConversionRateParameter, subAgentFeeParameter, adminFeesParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_SubAgentFees_Get_Result> sp_SubAgentFees_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> subAgentId, string fullName, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> conversionRate, Nullable<decimal> minimumConversionRate, Nullable<decimal> maximumConversionRate, Nullable<decimal> subAgentFee, Nullable<decimal> adminFees, Nullable<long> createdBy, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var subAgentIdParameter = subAgentId.HasValue ?
                new ObjectParameter("SubAgentId", subAgentId) :
                new ObjectParameter("SubAgentId", typeof(long));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var conversionRateParameter = conversionRate.HasValue ?
                new ObjectParameter("ConversionRate", conversionRate) :
                new ObjectParameter("ConversionRate", typeof(decimal));
    
            var minimumConversionRateParameter = minimumConversionRate.HasValue ?
                new ObjectParameter("MinimumConversionRate", minimumConversionRate) :
                new ObjectParameter("MinimumConversionRate", typeof(decimal));
    
            var maximumConversionRateParameter = maximumConversionRate.HasValue ?
                new ObjectParameter("MaximumConversionRate", maximumConversionRate) :
                new ObjectParameter("MaximumConversionRate", typeof(decimal));
    
            var subAgentFeeParameter = subAgentFee.HasValue ?
                new ObjectParameter("SubAgentFee", subAgentFee) :
                new ObjectParameter("SubAgentFee", typeof(decimal));
    
            var adminFeesParameter = adminFees.HasValue ?
                new ObjectParameter("AdminFees", adminFees) :
                new ObjectParameter("AdminFees", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SubAgentFees_Get_Result>("sp_SubAgentFees_Get", idParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, subAgentIdParameter, fullNameParameter, minimumAmountParameter, maximumAmountParameter, conversionRateParameter, minimumConversionRateParameter, maximumConversionRateParameter, subAgentFeeParameter, adminFeesParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual int sp_SubAgentFees_Update(Nullable<long> id, Nullable<long> subAgentId, string fullName, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> conversionRate, Nullable<decimal> minimumConversionRate, Nullable<decimal> maximumConversionRate, Nullable<decimal> subAgentFee, Nullable<decimal> adminFees, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> createdBy, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var subAgentIdParameter = subAgentId.HasValue ?
                new ObjectParameter("SubAgentId", subAgentId) :
                new ObjectParameter("SubAgentId", typeof(long));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var conversionRateParameter = conversionRate.HasValue ?
                new ObjectParameter("ConversionRate", conversionRate) :
                new ObjectParameter("ConversionRate", typeof(decimal));
    
            var minimumConversionRateParameter = minimumConversionRate.HasValue ?
                new ObjectParameter("MinimumConversionRate", minimumConversionRate) :
                new ObjectParameter("MinimumConversionRate", typeof(decimal));
    
            var maximumConversionRateParameter = maximumConversionRate.HasValue ?
                new ObjectParameter("MaximumConversionRate", maximumConversionRate) :
                new ObjectParameter("MaximumConversionRate", typeof(decimal));
    
            var subAgentFeeParameter = subAgentFee.HasValue ?
                new ObjectParameter("SubAgentFee", subAgentFee) :
                new ObjectParameter("SubAgentFee", typeof(decimal));
    
            var adminFeesParameter = adminFees.HasValue ?
                new ObjectParameter("AdminFees", adminFees) :
                new ObjectParameter("AdminFees", typeof(decimal));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubAgentFees_Update", idParameter, subAgentIdParameter, fullNameParameter, minimumAmountParameter, maximumAmountParameter, conversionRateParameter, minimumConversionRateParameter, maximumConversionRateParameter, subAgentFeeParameter, adminFeesParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual int sp_SubAgentFeesHistory_AddNew(Nullable<long> subAgentId, string fullName, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> conversionRate, Nullable<decimal> minimumConversionRate, Nullable<decimal> maximumConversionRate, Nullable<decimal> subAgentFee, Nullable<decimal> adminFees, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<bool> isAdmin, Nullable<long> createdBy, string createdByName)
        {
            var subAgentIdParameter = subAgentId.HasValue ?
                new ObjectParameter("SubAgentId", subAgentId) :
                new ObjectParameter("SubAgentId", typeof(long));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var conversionRateParameter = conversionRate.HasValue ?
                new ObjectParameter("ConversionRate", conversionRate) :
                new ObjectParameter("ConversionRate", typeof(decimal));
    
            var minimumConversionRateParameter = minimumConversionRate.HasValue ?
                new ObjectParameter("MinimumConversionRate", minimumConversionRate) :
                new ObjectParameter("MinimumConversionRate", typeof(decimal));
    
            var maximumConversionRateParameter = maximumConversionRate.HasValue ?
                new ObjectParameter("MaximumConversionRate", maximumConversionRate) :
                new ObjectParameter("MaximumConversionRate", typeof(decimal));
    
            var subAgentFeeParameter = subAgentFee.HasValue ?
                new ObjectParameter("SubAgentFee", subAgentFee) :
                new ObjectParameter("SubAgentFee", typeof(decimal));
    
            var adminFeesParameter = adminFees.HasValue ?
                new ObjectParameter("AdminFees", adminFees) :
                new ObjectParameter("AdminFees", typeof(decimal));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubAgentFeesHistory_AddNew", subAgentIdParameter, fullNameParameter, minimumAmountParameter, maximumAmountParameter, conversionRateParameter, minimumConversionRateParameter, maximumConversionRateParameter, subAgentFeeParameter, adminFeesParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, isAdminParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_SubAgentFeesHistory_Get_Result> sp_SubAgentFeesHistory_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> subAgentId, string fullName, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> conversionRate, Nullable<decimal> minimumConversionRate, Nullable<decimal> maximumConversionRate, Nullable<decimal> subAgentFee, Nullable<decimal> adminFees, string dateTo, string dateFrom, Nullable<int> isAdmin, string today, string weekly, string monthly, Nullable<long> createdBy, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var subAgentIdParameter = subAgentId.HasValue ?
                new ObjectParameter("SubAgentId", subAgentId) :
                new ObjectParameter("SubAgentId", typeof(long));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var conversionRateParameter = conversionRate.HasValue ?
                new ObjectParameter("ConversionRate", conversionRate) :
                new ObjectParameter("ConversionRate", typeof(decimal));
    
            var minimumConversionRateParameter = minimumConversionRate.HasValue ?
                new ObjectParameter("MinimumConversionRate", minimumConversionRate) :
                new ObjectParameter("MinimumConversionRate", typeof(decimal));
    
            var maximumConversionRateParameter = maximumConversionRate.HasValue ?
                new ObjectParameter("MaximumConversionRate", maximumConversionRate) :
                new ObjectParameter("MaximumConversionRate", typeof(decimal));
    
            var subAgentFeeParameter = subAgentFee.HasValue ?
                new ObjectParameter("SubAgentFee", subAgentFee) :
                new ObjectParameter("SubAgentFee", typeof(decimal));
    
            var adminFeesParameter = adminFees.HasValue ?
                new ObjectParameter("AdminFees", adminFees) :
                new ObjectParameter("AdminFees", typeof(decimal));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SubAgentFeesHistory_Get_Result>("sp_SubAgentFeesHistory_Get", idParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, subAgentIdParameter, fullNameParameter, minimumAmountParameter, maximumAmountParameter, conversionRateParameter, minimumConversionRateParameter, maximumConversionRateParameter, subAgentFeeParameter, adminFeesParameter, dateToParameter, dateFromParameter, isAdminParameter, todayParameter, weeklyParameter, monthlyParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual int sp_SubAgentFeesHistory_Update(Nullable<long> id, Nullable<long> subAgentId, string fullName, Nullable<decimal> minimumAmount, Nullable<decimal> maximumAmount, Nullable<decimal> conversionRate, Nullable<decimal> minimumConversionRate, Nullable<decimal> maximumConversionRate, Nullable<decimal> subAgentFee, Nullable<decimal> adminFees, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<bool> isAdmin, Nullable<long> createdBy, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var subAgentIdParameter = subAgentId.HasValue ?
                new ObjectParameter("SubAgentId", subAgentId) :
                new ObjectParameter("SubAgentId", typeof(long));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var minimumAmountParameter = minimumAmount.HasValue ?
                new ObjectParameter("MinimumAmount", minimumAmount) :
                new ObjectParameter("MinimumAmount", typeof(decimal));
    
            var maximumAmountParameter = maximumAmount.HasValue ?
                new ObjectParameter("MaximumAmount", maximumAmount) :
                new ObjectParameter("MaximumAmount", typeof(decimal));
    
            var conversionRateParameter = conversionRate.HasValue ?
                new ObjectParameter("ConversionRate", conversionRate) :
                new ObjectParameter("ConversionRate", typeof(decimal));
    
            var minimumConversionRateParameter = minimumConversionRate.HasValue ?
                new ObjectParameter("MinimumConversionRate", minimumConversionRate) :
                new ObjectParameter("MinimumConversionRate", typeof(decimal));
    
            var maximumConversionRateParameter = maximumConversionRate.HasValue ?
                new ObjectParameter("MaximumConversionRate", maximumConversionRate) :
                new ObjectParameter("MaximumConversionRate", typeof(decimal));
    
            var subAgentFeeParameter = subAgentFee.HasValue ?
                new ObjectParameter("SubAgentFee", subAgentFee) :
                new ObjectParameter("SubAgentFee", typeof(decimal));
    
            var adminFeesParameter = adminFees.HasValue ?
                new ObjectParameter("AdminFees", adminFees) :
                new ObjectParameter("AdminFees", typeof(decimal));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubAgentFeesHistory_Update", idParameter, subAgentIdParameter, fullNameParameter, minimumAmountParameter, maximumAmountParameter, conversionRateParameter, minimumConversionRateParameter, maximumConversionRateParameter, subAgentFeeParameter, adminFeesParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, isAdminParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_TicketImages_Get_Result> sp_TicketImages_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> checkIsAdmin, string replyUniqueId, string ticketId, Nullable<long> replyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var checkIsAdminParameter = checkIsAdmin.HasValue ?
                new ObjectParameter("CheckIsAdmin", checkIsAdmin) :
                new ObjectParameter("CheckIsAdmin", typeof(int));
    
            var replyUniqueIdParameter = replyUniqueId != null ?
                new ObjectParameter("ReplyUniqueId", replyUniqueId) :
                new ObjectParameter("ReplyUniqueId", typeof(string));
    
            var ticketIdParameter = ticketId != null ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(string));
    
            var replyIdParameter = replyId.HasValue ?
                new ObjectParameter("ReplyId", replyId) :
                new ObjectParameter("ReplyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TicketImages_Get_Result>("sp_TicketImages_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, checkIsAdminParameter, replyUniqueIdParameter, ticketIdParameter, replyIdParameter);
        }
    
        public virtual ObjectResult<sp_TicketRecordDetail_Get_Result> sp_TicketRecordDetail_Get(Nullable<int> take, Nullable<long> createdBy)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TicketRecordDetail_Get_Result>("sp_TicketRecordDetail_Get", takeParameter, createdByParameter);
        }
    
        public virtual ObjectResult<sp_Tickets_Get_Result> sp_Tickets_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string ticketId, Nullable<int> status, Nullable<long> assignedBy, Nullable<long> assignedTo, Nullable<int> priority, Nullable<int> categoryId, string email, string name, string ticketTitle, string contactNumber, Nullable<int> checkIsAttached, Nullable<int> checkIsSeen, Nullable<int> checkIsFavourite, string transactionId, string startDate, string endDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var ticketIdParameter = ticketId != null ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var assignedByParameter = assignedBy.HasValue ?
                new ObjectParameter("AssignedBy", assignedBy) :
                new ObjectParameter("AssignedBy", typeof(long));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(long));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var ticketTitleParameter = ticketTitle != null ?
                new ObjectParameter("TicketTitle", ticketTitle) :
                new ObjectParameter("TicketTitle", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var checkIsAttachedParameter = checkIsAttached.HasValue ?
                new ObjectParameter("CheckIsAttached", checkIsAttached) :
                new ObjectParameter("CheckIsAttached", typeof(int));
    
            var checkIsSeenParameter = checkIsSeen.HasValue ?
                new ObjectParameter("CheckIsSeen", checkIsSeen) :
                new ObjectParameter("CheckIsSeen", typeof(int));
    
            var checkIsFavouriteParameter = checkIsFavourite.HasValue ?
                new ObjectParameter("CheckIsFavourite", checkIsFavourite) :
                new ObjectParameter("CheckIsFavourite", typeof(int));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Tickets_Get_Result>("sp_Tickets_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, ticketIdParameter, statusParameter, assignedByParameter, assignedToParameter, priorityParameter, categoryIdParameter, emailParameter, nameParameter, ticketTitleParameter, contactNumberParameter, checkIsAttachedParameter, checkIsSeenParameter, checkIsFavouriteParameter, transactionIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_TicketsCategory_Get_Result> sp_TicketsCategory_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, string categoryName, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> position)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TicketsCategory_Get_Result>("sp_TicketsCategory_Get", idParameter, takeParameter, skipParameter, categoryNameParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, positionParameter);
        }
    
        public virtual ObjectResult<sp_TicketsReply_Get_Result> sp_TicketsReply_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string ticketId, Nullable<int> type, Nullable<int> checkIsAdmin, Nullable<int> checkIsNote, Nullable<int> checkIsMainMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var ticketIdParameter = ticketId != null ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var checkIsAdminParameter = checkIsAdmin.HasValue ?
                new ObjectParameter("CheckIsAdmin", checkIsAdmin) :
                new ObjectParameter("CheckIsAdmin", typeof(int));
    
            var checkIsNoteParameter = checkIsNote.HasValue ?
                new ObjectParameter("CheckIsNote", checkIsNote) :
                new ObjectParameter("CheckIsNote", typeof(int));
    
            var checkIsMainMessageParameter = checkIsMainMessage.HasValue ?
                new ObjectParameter("CheckIsMainMessage", checkIsMainMessage) :
                new ObjectParameter("CheckIsMainMessage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TicketsReply_Get_Result>("sp_TicketsReply_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, ticketIdParameter, typeParameter, checkIsAdminParameter, checkIsNoteParameter, checkIsMainMessageParameter);
        }
    
        public virtual ObjectResult<sp_TouristBus_Detail_Result> sp_TouristBus_Detail(string flag, Nullable<long> memberId, string companyName, string ticketno, string from_Location, string to_Location, Nullable<System.DateTime> date, string time, string staffnum, Nullable<decimal> cashback, Nullable<decimal> comission, Nullable<decimal> amount, string seat, string totalSeat, string pickup_Location, string busNo, string walletTransactionId, string createdBy, string updatedBy, string name, string contactNumber, string drop_Location, Nullable<long> busDetailId, string paymentStatus, string transactionId)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var ticketnoParameter = ticketno != null ?
                new ObjectParameter("Ticketno", ticketno) :
                new ObjectParameter("Ticketno", typeof(string));
    
            var from_LocationParameter = from_Location != null ?
                new ObjectParameter("from_Location", from_Location) :
                new ObjectParameter("from_Location", typeof(string));
    
            var to_LocationParameter = to_Location != null ?
                new ObjectParameter("to_Location", to_Location) :
                new ObjectParameter("to_Location", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var timeParameter = time != null ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(string));
    
            var staffnumParameter = staffnum != null ?
                new ObjectParameter("staffnum", staffnum) :
                new ObjectParameter("staffnum", typeof(string));
    
            var cashbackParameter = cashback.HasValue ?
                new ObjectParameter("Cashback", cashback) :
                new ObjectParameter("Cashback", typeof(decimal));
    
            var comissionParameter = comission.HasValue ?
                new ObjectParameter("Comission", comission) :
                new ObjectParameter("Comission", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var seatParameter = seat != null ?
                new ObjectParameter("Seat", seat) :
                new ObjectParameter("Seat", typeof(string));
    
            var totalSeatParameter = totalSeat != null ?
                new ObjectParameter("TotalSeat", totalSeat) :
                new ObjectParameter("TotalSeat", typeof(string));
    
            var pickup_LocationParameter = pickup_Location != null ?
                new ObjectParameter("Pickup_Location", pickup_Location) :
                new ObjectParameter("Pickup_Location", typeof(string));
    
            var busNoParameter = busNo != null ?
                new ObjectParameter("BusNo", busNo) :
                new ObjectParameter("BusNo", typeof(string));
    
            var walletTransactionIdParameter = walletTransactionId != null ?
                new ObjectParameter("WalletTransactionId", walletTransactionId) :
                new ObjectParameter("WalletTransactionId", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var drop_LocationParameter = drop_Location != null ?
                new ObjectParameter("drop_Location", drop_Location) :
                new ObjectParameter("drop_Location", typeof(string));
    
            var busDetailIdParameter = busDetailId.HasValue ?
                new ObjectParameter("BusDetailId", busDetailId) :
                new ObjectParameter("BusDetailId", typeof(long));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TouristBus_Detail_Result>("sp_TouristBus_Detail", flagParameter, memberIdParameter, companyNameParameter, ticketnoParameter, from_LocationParameter, to_LocationParameter, dateParameter, timeParameter, staffnumParameter, cashbackParameter, comissionParameter, amountParameter, seatParameter, totalSeatParameter, pickup_LocationParameter, busNoParameter, walletTransactionIdParameter, createdByParameter, updatedByParameter, nameParameter, contactNumberParameter, drop_LocationParameter, busDetailIdParameter, paymentStatusParameter, transactionIdParameter);
        }
    
        public virtual ObjectResult<sp_TransactionLimit_Datatable_Result> sp_TransactionLimit_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, Nullable<long> createdBy, Nullable<int> kycType)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var kycTypeParameter = kycType.HasValue ?
                new ObjectParameter("KycType", kycType) :
                new ObjectParameter("KycType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionLimit_Datatable_Result>("sp_TransactionLimit_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, createdByParameter, kycTypeParameter);
        }
    
        public virtual ObjectResult<sp_TransactionLimit_Get_Result> sp_TransactionLimit_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> transactionTransferType, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> isKycVerified)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var transactionTransferTypeParameter = transactionTransferType.HasValue ?
                new ObjectParameter("TransactionTransferType", transactionTransferType) :
                new ObjectParameter("TransactionTransferType", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var isKycVerifiedParameter = isKycVerified.HasValue ?
                new ObjectParameter("IsKycVerified", isKycVerified) :
                new ObjectParameter("IsKycVerified", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionLimit_Get_Result>("sp_TransactionLimit_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, transactionTransferTypeParameter, checkActiveParameter, createdByParameter, createdByNameParameter, isKycVerifiedParameter);
        }
    
        public virtual ObjectResult<string> sp_TransactionLimitCheck_Get(Nullable<int> serviceTypeId, Nullable<int> transactionTransferType, Nullable<int> memberId, Nullable<decimal> transactionAmount, Nullable<int> signStatus)
        {
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            var transactionTransferTypeParameter = transactionTransferType.HasValue ?
                new ObjectParameter("TransactionTransferType", transactionTransferType) :
                new ObjectParameter("TransactionTransferType", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            var transactionAmountParameter = transactionAmount.HasValue ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(decimal));
    
            var signStatusParameter = signStatus.HasValue ?
                new ObjectParameter("SignStatus", signStatus) :
                new ObjectParameter("SignStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_TransactionLimitCheck_Get", serviceTypeIdParameter, transactionTransferTypeParameter, memberIdParameter, transactionAmountParameter, signStatusParameter);
        }
    
        public virtual ObjectResult<sp_TransactionLimitHistory_Datatable_Result> sp_TransactionLimitHistory_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, Nullable<int> kycStatus)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var kycStatusParameter = kycStatus.HasValue ?
                new ObjectParameter("KycStatus", kycStatus) :
                new ObjectParameter("KycStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TransactionLimitHistory_Datatable_Result>("sp_TransactionLimitHistory_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, kycStatusParameter);
        }
    
        public virtual ObjectResult<sp_UpdateMyPayment_Result> sp_UpdateMyPayment(Nullable<int> id, string jsonData, string providerName, string providerTypeId, string memberID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("JsonData", jsonData) :
                new ObjectParameter("JsonData", typeof(string));
    
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var providerTypeIdParameter = providerTypeId != null ?
                new ObjectParameter("ProviderTypeId", providerTypeId) :
                new ObjectParameter("ProviderTypeId", typeof(string));
    
            var memberIDParameter = memberID != null ?
                new ObjectParameter("memberID", memberID) :
                new ObjectParameter("memberID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UpdateMyPayment_Result>("sp_UpdateMyPayment", idParameter, jsonDataParameter, providerNameParameter, providerTypeIdParameter, memberIDParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_UserAuthorization_Get_Result> sp_UserAuthorization_Get(Nullable<long> id, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByadmin, Nullable<int> take, Nullable<int> skip, string userName, string token, string iPAddress, Nullable<long> createdBy, string createdByName, Nullable<int> isActive, Nullable<int> isDeleted, Nullable<int> isUpdated, Nullable<long> updatedBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByadminParameter = checkApprovedByadmin.HasValue ?
                new ObjectParameter("CheckApprovedByadmin", checkApprovedByadmin) :
                new ObjectParameter("CheckApprovedByadmin", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(int));
    
            var isUpdatedParameter = isUpdated.HasValue ?
                new ObjectParameter("IsUpdated", isUpdated) :
                new ObjectParameter("IsUpdated", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserAuthorization_Get_Result>("sp_UserAuthorization_Get", idParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByadminParameter, takeParameter, skipParameter, userNameParameter, tokenParameter, iPAddressParameter, createdByParameter, createdByNameParameter, isActiveParameter, isDeletedParameter, isUpdatedParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<sp_UserBankDetail_Datatable_Result> sp_UserBankDetail_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string name, string accountNumber, Nullable<long> memberId, string bankCode, string bankName, string branchId, string branchName, Nullable<int> checkPrimary, string today, string weekly, string monthly)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var checkPrimaryParameter = checkPrimary.HasValue ?
                new ObjectParameter("CheckPrimary", checkPrimary) :
                new ObjectParameter("CheckPrimary", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserBankDetail_Datatable_Result>("sp_UserBankDetail_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, nameParameter, accountNumberParameter, memberIdParameter, bankCodeParameter, bankNameParameter, branchIdParameter, branchNameParameter, checkPrimaryParameter, todayParameter, weeklyParameter, monthlyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UserBankDetail_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string name, string accountNumber, Nullable<long> memberId, string bankCode, string bankName, string branchId, string branchName, Nullable<int> checkPrimary, string today, string weekly, string monthly)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var checkPrimaryParameter = checkPrimary.HasValue ?
                new ObjectParameter("CheckPrimary", checkPrimary) :
                new ObjectParameter("CheckPrimary", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UserBankDetail_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, nameParameter, accountNumberParameter, memberIdParameter, bankCodeParameter, bankNameParameter, branchIdParameter, branchNameParameter, checkPrimaryParameter, todayParameter, weeklyParameter, monthlyParameter);
        }
    
        public virtual ObjectResult<sp_UserBankDetail_Get_Result> sp_UserBankDetail_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, string name, string accountNumber, Nullable<long> memberId, string bankCode, string bankName, string branchId, string branchName, Nullable<int> checkPrimary, string today, string weekly, string monthly)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var checkPrimaryParameter = checkPrimary.HasValue ?
                new ObjectParameter("CheckPrimary", checkPrimary) :
                new ObjectParameter("CheckPrimary", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserBankDetail_Get_Result>("sp_UserBankDetail_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, nameParameter, accountNumberParameter, memberIdParameter, bankCodeParameter, bankNameParameter, branchIdParameter, branchNameParameter, checkPrimaryParameter, todayParameter, weeklyParameter, monthlyParameter);
        }
    
        public virtual ObjectResult<sp_UserDocuments_Get_Result> sp_UserDocuments_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string reference, string @event, string email, Nullable<long> memberId, Nullable<long> createdBy, Nullable<int> checkNotRejected, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("event", @event) :
                new ObjectParameter("event", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var checkNotRejectedParameter = checkNotRejected.HasValue ?
                new ObjectParameter("CheckNotRejected", checkNotRejected) :
                new ObjectParameter("CheckNotRejected", typeof(int));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserDocuments_Get_Result>("sp_UserDocuments_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, referenceParameter, eventParameter, emailParameter, memberIdParameter, createdByParameter, checkNotRejectedParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_UserInActiveRemarks_Datatable_Result> sp_UserInActiveRemarks_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<long> createdBy, string createdByName, Nullable<long> memberId, Nullable<int> id, string contactNumber, string firstName, string startDate, string endDate)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserInActiveRemarks_Datatable_Result>("sp_UserInActiveRemarks_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, createdByParameter, createdByNameParameter, memberIdParameter, idParameter, contactNumberParameter, firstNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_UserInActiveRemarks_Get_Result> sp_UserInActiveRemarks_Get(Nullable<int> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> memberId, string contactNumber, string firstName, string startDate, string endDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserInActiveRemarks_Get_Result>("sp_UserInActiveRemarks_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, memberIdParameter, contactNumberParameter, firstNameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_UserKYCExport_Get_Result> sp_UserKYCExport_Get(Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, string name, Nullable<int> isKYCApproved, string email, string contactNumber, string refCode, string reviewDateFrom, string reviewDateTo)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isKYCApprovedParameter = isKYCApproved.HasValue ?
                new ObjectParameter("IsKYCApproved", isKYCApproved) :
                new ObjectParameter("IsKYCApproved", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var reviewDateFromParameter = reviewDateFrom != null ?
                new ObjectParameter("ReviewDateFrom", reviewDateFrom) :
                new ObjectParameter("ReviewDateFrom", typeof(string));
    
            var reviewDateToParameter = reviewDateTo != null ?
                new ObjectParameter("ReviewDateTo", reviewDateTo) :
                new ObjectParameter("ReviewDateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserKYCExport_Get_Result>("sp_UserKYCExport_Get", memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, nameParameter, isKYCApprovedParameter, emailParameter, contactNumberParameter, refCodeParameter, reviewDateFromParameter, reviewDateToParameter);
        }
    
        public virtual int sp_UserOTPAttempt_AddNew(Nullable<long> memberId, string contactNumber, Nullable<int> attemptCount, Nullable<System.DateTime> attemptDateTime, Nullable<long> createdBy, string createdByName, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<int> oTPSendCount, Nullable<System.DateTime> lastOTPSendDateTime)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var attemptCountParameter = attemptCount.HasValue ?
                new ObjectParameter("AttemptCount", attemptCount) :
                new ObjectParameter("AttemptCount", typeof(int));
    
            var attemptDateTimeParameter = attemptDateTime.HasValue ?
                new ObjectParameter("AttemptDateTime", attemptDateTime) :
                new ObjectParameter("AttemptDateTime", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var oTPSendCountParameter = oTPSendCount.HasValue ?
                new ObjectParameter("OTPSendCount", oTPSendCount) :
                new ObjectParameter("OTPSendCount", typeof(int));
    
            var lastOTPSendDateTimeParameter = lastOTPSendDateTime.HasValue ?
                new ObjectParameter("LastOTPSendDateTime", lastOTPSendDateTime) :
                new ObjectParameter("LastOTPSendDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserOTPAttempt_AddNew", memberIdParameter, contactNumberParameter, attemptCountParameter, attemptDateTimeParameter, createdByParameter, createdByNameParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, oTPSendCountParameter, lastOTPSendDateTimeParameter);
        }
    
        public virtual ObjectResult<sp_UserOTPAttempt_DataTable_Result> sp_UserOTPAttempt_DataTable(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<long> memberId, string contactNumber, Nullable<int> attemptCount, string checkAttemptDateTime, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var attemptCountParameter = attemptCount.HasValue ?
                new ObjectParameter("AttemptCount", attemptCount) :
                new ObjectParameter("AttemptCount", typeof(int));
    
            var checkAttemptDateTimeParameter = checkAttemptDateTime != null ?
                new ObjectParameter("CheckAttemptDateTime", checkAttemptDateTime) :
                new ObjectParameter("CheckAttemptDateTime", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserOTPAttempt_DataTable_Result>("sp_UserOTPAttempt_DataTable", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, memberIdParameter, contactNumberParameter, attemptCountParameter, checkAttemptDateTimeParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UserOTPAttempt_DataTableCounter(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<long> memberId, string contactNumber, Nullable<int> attemptCount, string checkAttemptDateTime, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var attemptCountParameter = attemptCount.HasValue ?
                new ObjectParameter("AttemptCount", attemptCount) :
                new ObjectParameter("AttemptCount", typeof(int));
    
            var checkAttemptDateTimeParameter = checkAttemptDateTime != null ?
                new ObjectParameter("CheckAttemptDateTime", checkAttemptDateTime) :
                new ObjectParameter("CheckAttemptDateTime", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UserOTPAttempt_DataTableCounter", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, memberIdParameter, contactNumberParameter, attemptCountParameter, checkAttemptDateTimeParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_UserOTPAttempt_Get_Result> sp_UserOTPAttempt_Get(Nullable<long> memberId, string contactNumber, Nullable<int> attemptCount, string checkAttemptDateTime, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var attemptCountParameter = attemptCount.HasValue ?
                new ObjectParameter("AttemptCount", attemptCount) :
                new ObjectParameter("AttemptCount", typeof(int));
    
            var checkAttemptDateTimeParameter = checkAttemptDateTime != null ?
                new ObjectParameter("CheckAttemptDateTime", checkAttemptDateTime) :
                new ObjectParameter("CheckAttemptDateTime", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserOTPAttempt_Get_Result>("sp_UserOTPAttempt_Get", memberIdParameter, contactNumberParameter, attemptCountParameter, checkAttemptDateTimeParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int sp_UserOTPAttempt_Update(Nullable<long> memberId, string contactNumber, Nullable<int> attemptCount, Nullable<System.DateTime> attemptDateTime, Nullable<long> createdBy, string createdByName, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id, Nullable<int> oTPSendCount, Nullable<System.DateTime> lastOTPSendDateTime)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var attemptCountParameter = attemptCount.HasValue ?
                new ObjectParameter("AttemptCount", attemptCount) :
                new ObjectParameter("AttemptCount", typeof(int));
    
            var attemptDateTimeParameter = attemptDateTime.HasValue ?
                new ObjectParameter("AttemptDateTime", attemptDateTime) :
                new ObjectParameter("AttemptDateTime", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var oTPSendCountParameter = oTPSendCount.HasValue ?
                new ObjectParameter("OTPSendCount", oTPSendCount) :
                new ObjectParameter("OTPSendCount", typeof(int));
    
            var lastOTPSendDateTimeParameter = lastOTPSendDateTime.HasValue ?
                new ObjectParameter("LastOTPSendDateTime", lastOTPSendDateTime) :
                new ObjectParameter("LastOTPSendDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserOTPAttempt_Update", memberIdParameter, contactNumberParameter, attemptCountParameter, attemptDateTimeParameter, createdByParameter, createdByNameParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter, oTPSendCountParameter, lastOTPSendDateTimeParameter);
        }
    
        public virtual ObjectResult<sp_Users_Balance_Result> sp_Users_Balance(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_Balance_Result>("sp_Users_Balance", memberIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Users_BankPrimary_Update(Nullable<long> memberId, Nullable<long> createdBy, string createdByName)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Users_BankPrimary_Update", memberIdParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_Users_BusSewaDetails_Result> sp_Users_BusSewaDetails(Nullable<long> memberId, Nullable<long> serviceId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_BusSewaDetails_Result>("sp_Users_BusSewaDetails", memberIdParameter, serviceIdParameter);
        }
    
        public virtual ObjectResult<sp_Users_CableCarDetails_Result> sp_Users_CableCarDetails(Nullable<long> memberId, Nullable<long> serviceId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_CableCarDetails_Result>("sp_Users_CableCarDetails", memberIdParameter, serviceIdParameter);
        }
    
        public virtual int sp_Users_ChangePassword(Nullable<long> id, string password, string transactionPassword, Nullable<bool> isResetPasswordFromAdmin, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var transactionPasswordParameter = transactionPassword != null ?
                new ObjectParameter("TransactionPassword", transactionPassword) :
                new ObjectParameter("TransactionPassword", typeof(string));
    
            var isResetPasswordFromAdminParameter = isResetPasswordFromAdmin.HasValue ?
                new ObjectParameter("IsResetPasswordFromAdmin", isResetPasswordFromAdmin) :
                new ObjectParameter("IsResetPasswordFromAdmin", typeof(bool));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_ChangePassword", idParameter, passwordParameter, transactionPasswordParameter, isResetPasswordFromAdminParameter, ipAddressParameter);
        }
    
        public virtual int sp_Users_ConfirmEmail(Nullable<long> id, Nullable<bool> isEmailVerified, string email, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isEmailVerifiedParameter = isEmailVerified.HasValue ?
                new ObjectParameter("IsEmailVerified", isEmailVerified) :
                new ObjectParameter("IsEmailVerified", typeof(bool));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_ConfirmEmail", idParameter, isEmailVerifiedParameter, emailParameter, ipAddressParameter);
        }
    
        public virtual ObjectResult<sp_Users_Datatable_Result> sp_Users_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> createdBy, string name, Nullable<int> isKYCApproved, Nullable<int> roleId, string email, string contactNumber, string refCode, string checkPasswordReset, string checkNotPasswordReset, string checkPin, string checkNotPin, string checkFirstName, string checkNotFirstName, Nullable<int> checkOldAndNewUser, string loginFromDate, string loginToDate, Nullable<long> refId, string refCodeAttempted, string reviewDateFrom, string reviewDateTo, string documentNumber, string deviceId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isKYCApprovedParameter = isKYCApproved.HasValue ?
                new ObjectParameter("IsKYCApproved", isKYCApproved) :
                new ObjectParameter("IsKYCApproved", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var checkPasswordResetParameter = checkPasswordReset != null ?
                new ObjectParameter("CheckPasswordReset", checkPasswordReset) :
                new ObjectParameter("CheckPasswordReset", typeof(string));
    
            var checkNotPasswordResetParameter = checkNotPasswordReset != null ?
                new ObjectParameter("CheckNotPasswordReset", checkNotPasswordReset) :
                new ObjectParameter("CheckNotPasswordReset", typeof(string));
    
            var checkPinParameter = checkPin != null ?
                new ObjectParameter("CheckPin", checkPin) :
                new ObjectParameter("CheckPin", typeof(string));
    
            var checkNotPinParameter = checkNotPin != null ?
                new ObjectParameter("CheckNotPin", checkNotPin) :
                new ObjectParameter("CheckNotPin", typeof(string));
    
            var checkFirstNameParameter = checkFirstName != null ?
                new ObjectParameter("CheckFirstName", checkFirstName) :
                new ObjectParameter("CheckFirstName", typeof(string));
    
            var checkNotFirstNameParameter = checkNotFirstName != null ?
                new ObjectParameter("CheckNotFirstName", checkNotFirstName) :
                new ObjectParameter("CheckNotFirstName", typeof(string));
    
            var checkOldAndNewUserParameter = checkOldAndNewUser.HasValue ?
                new ObjectParameter("CheckOldAndNewUser", checkOldAndNewUser) :
                new ObjectParameter("CheckOldAndNewUser", typeof(int));
    
            var loginFromDateParameter = loginFromDate != null ?
                new ObjectParameter("LoginFromDate", loginFromDate) :
                new ObjectParameter("LoginFromDate", typeof(string));
    
            var loginToDateParameter = loginToDate != null ?
                new ObjectParameter("LoginToDate", loginToDate) :
                new ObjectParameter("LoginToDate", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var refCodeAttemptedParameter = refCodeAttempted != null ?
                new ObjectParameter("RefCodeAttempted", refCodeAttempted) :
                new ObjectParameter("RefCodeAttempted", typeof(string));
    
            var reviewDateFromParameter = reviewDateFrom != null ?
                new ObjectParameter("ReviewDateFrom", reviewDateFrom) :
                new ObjectParameter("ReviewDateFrom", typeof(string));
    
            var reviewDateToParameter = reviewDateTo != null ?
                new ObjectParameter("ReviewDateTo", reviewDateTo) :
                new ObjectParameter("ReviewDateTo", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_Datatable_Result>("sp_Users_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, createdByParameter, nameParameter, isKYCApprovedParameter, roleIdParameter, emailParameter, contactNumberParameter, refCodeParameter, checkPasswordResetParameter, checkNotPasswordResetParameter, checkPinParameter, checkNotPinParameter, checkFirstNameParameter, checkNotFirstNameParameter, checkOldAndNewUserParameter, loginFromDateParameter, loginToDateParameter, refIdParameter, refCodeAttemptedParameter, reviewDateFromParameter, reviewDateToParameter, documentNumberParameter, deviceIdParameter);
        }
    
        public virtual int sp_Users_EnablePushNotification(Nullable<long> id, Nullable<bool> enablePushNotification, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var enablePushNotificationParameter = enablePushNotification.HasValue ?
                new ObjectParameter("EnablePushNotification", enablePushNotification) :
                new ObjectParameter("EnablePushNotification", typeof(bool));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_EnablePushNotification", idParameter, enablePushNotificationParameter, ipAddressParameter);
        }
    
        public virtual ObjectResult<sp_Users_Export_Result> sp_Users_Export()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_Export_Result>("sp_Users_Export");
        }
    
        public virtual ObjectResult<sp_Users_Get_Result> sp_Users_Get(Nullable<long> id, string userId, string userName, string roleName, string contactNumber, Nullable<int> roleId, string firstName, string email, Nullable<int> take, Nullable<int> skip, string password, string deviceCode, string verificationCode, string platForm, Nullable<long> memberId, Nullable<int> countryId, string refCode, Nullable<long> refId, string nationalIdProofFront, string nationalIdProofBack, Nullable<int> isKYCApproved, Nullable<int> stateId, Nullable<int> isPhoneVerified, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string checkCreatedDate, string sort, Nullable<int> isEmailVerified, Nullable<decimal> totalAmount, Nullable<int> checkRefId, Nullable<int> checkDirectId, Nullable<int> checkDeviceCode, string dateTo, string dateFrom, Nullable<int> employeeType, Nullable<int> proofType, Nullable<long> createdBy, string createdByName, string updatedBy, string checkPasswordReset, string checkNotPasswordReset, string checkPin, string checkNotPin, string checkFirstName, string checkNotFirstName, Nullable<int> checkOldAndNewUser, string loginFromDate, string loginToDate, string jwtToken, string refCodeAttempted, string deviceId, string reviewDateTo, string reviewDateFrom, string documentNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var platFormParameter = platForm != null ?
                new ObjectParameter("PlatForm", platForm) :
                new ObjectParameter("PlatForm", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var nationalIdProofFrontParameter = nationalIdProofFront != null ?
                new ObjectParameter("NationalIdProofFront", nationalIdProofFront) :
                new ObjectParameter("NationalIdProofFront", typeof(string));
    
            var nationalIdProofBackParameter = nationalIdProofBack != null ?
                new ObjectParameter("NationalIdProofBack", nationalIdProofBack) :
                new ObjectParameter("NationalIdProofBack", typeof(string));
    
            var isKYCApprovedParameter = isKYCApproved.HasValue ?
                new ObjectParameter("IsKYCApproved", isKYCApproved) :
                new ObjectParameter("IsKYCApproved", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var isPhoneVerifiedParameter = isPhoneVerified.HasValue ?
                new ObjectParameter("IsPhoneVerified", isPhoneVerified) :
                new ObjectParameter("IsPhoneVerified", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var isEmailVerifiedParameter = isEmailVerified.HasValue ?
                new ObjectParameter("IsEmailVerified", isEmailVerified) :
                new ObjectParameter("IsEmailVerified", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var checkRefIdParameter = checkRefId.HasValue ?
                new ObjectParameter("CheckRefId", checkRefId) :
                new ObjectParameter("CheckRefId", typeof(int));
    
            var checkDirectIdParameter = checkDirectId.HasValue ?
                new ObjectParameter("CheckDirectId", checkDirectId) :
                new ObjectParameter("CheckDirectId", typeof(int));
    
            var checkDeviceCodeParameter = checkDeviceCode.HasValue ?
                new ObjectParameter("CheckDeviceCode", checkDeviceCode) :
                new ObjectParameter("CheckDeviceCode", typeof(int));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var proofTypeParameter = proofType.HasValue ?
                new ObjectParameter("ProofType", proofType) :
                new ObjectParameter("ProofType", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var checkPasswordResetParameter = checkPasswordReset != null ?
                new ObjectParameter("CheckPasswordReset", checkPasswordReset) :
                new ObjectParameter("CheckPasswordReset", typeof(string));
    
            var checkNotPasswordResetParameter = checkNotPasswordReset != null ?
                new ObjectParameter("CheckNotPasswordReset", checkNotPasswordReset) :
                new ObjectParameter("CheckNotPasswordReset", typeof(string));
    
            var checkPinParameter = checkPin != null ?
                new ObjectParameter("CheckPin", checkPin) :
                new ObjectParameter("CheckPin", typeof(string));
    
            var checkNotPinParameter = checkNotPin != null ?
                new ObjectParameter("CheckNotPin", checkNotPin) :
                new ObjectParameter("CheckNotPin", typeof(string));
    
            var checkFirstNameParameter = checkFirstName != null ?
                new ObjectParameter("CheckFirstName", checkFirstName) :
                new ObjectParameter("CheckFirstName", typeof(string));
    
            var checkNotFirstNameParameter = checkNotFirstName != null ?
                new ObjectParameter("CheckNotFirstName", checkNotFirstName) :
                new ObjectParameter("CheckNotFirstName", typeof(string));
    
            var checkOldAndNewUserParameter = checkOldAndNewUser.HasValue ?
                new ObjectParameter("CheckOldAndNewUser", checkOldAndNewUser) :
                new ObjectParameter("CheckOldAndNewUser", typeof(int));
    
            var loginFromDateParameter = loginFromDate != null ?
                new ObjectParameter("LoginFromDate", loginFromDate) :
                new ObjectParameter("LoginFromDate", typeof(string));
    
            var loginToDateParameter = loginToDate != null ?
                new ObjectParameter("LoginToDate", loginToDate) :
                new ObjectParameter("LoginToDate", typeof(string));
    
            var jwtTokenParameter = jwtToken != null ?
                new ObjectParameter("JwtToken", jwtToken) :
                new ObjectParameter("JwtToken", typeof(string));
    
            var refCodeAttemptedParameter = refCodeAttempted != null ?
                new ObjectParameter("RefCodeAttempted", refCodeAttempted) :
                new ObjectParameter("RefCodeAttempted", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var reviewDateToParameter = reviewDateTo != null ?
                new ObjectParameter("ReviewDateTo", reviewDateTo) :
                new ObjectParameter("ReviewDateTo", typeof(string));
    
            var reviewDateFromParameter = reviewDateFrom != null ?
                new ObjectParameter("ReviewDateFrom", reviewDateFrom) :
                new ObjectParameter("ReviewDateFrom", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_Get_Result>("sp_Users_Get", idParameter, userIdParameter, userNameParameter, roleNameParameter, contactNumberParameter, roleIdParameter, firstNameParameter, emailParameter, takeParameter, skipParameter, passwordParameter, deviceCodeParameter, verificationCodeParameter, platFormParameter, memberIdParameter, countryIdParameter, refCodeParameter, refIdParameter, nationalIdProofFrontParameter, nationalIdProofBackParameter, isKYCApprovedParameter, stateIdParameter, isPhoneVerifiedParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, checkCreatedDateParameter, sortParameter, isEmailVerifiedParameter, totalAmountParameter, checkRefIdParameter, checkDirectIdParameter, checkDeviceCodeParameter, dateToParameter, dateFromParameter, employeeTypeParameter, proofTypeParameter, createdByParameter, createdByNameParameter, updatedByParameter, checkPasswordResetParameter, checkNotPasswordResetParameter, checkPinParameter, checkNotPinParameter, checkFirstNameParameter, checkNotFirstNameParameter, checkOldAndNewUserParameter, loginFromDateParameter, loginToDateParameter, jwtTokenParameter, refCodeAttemptedParameter, deviceIdParameter, reviewDateToParameter, reviewDateFromParameter, documentNumberParameter);
        }
    
        public virtual ObjectResult<sp_Users_Get_all_Result> sp_Users_Get_all(Nullable<long> id, string userId, string userName, string roleName, string contactNumber, Nullable<int> roleId, string firstName, string email, Nullable<int> take, Nullable<int> skip, string password, string deviceCode, string verificationCode, string platForm, Nullable<long> memberId, Nullable<int> countryId, string refCode, Nullable<long> refId, string nationalIdProofFront, string nationalIdProofBack, Nullable<int> isKYCApproved, Nullable<int> stateId, Nullable<int> isPhoneVerified, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string checkCreatedDate, string sort, Nullable<int> isEmailVerified, Nullable<decimal> totalAmount, Nullable<int> checkRefId, Nullable<int> checkDirectId, Nullable<int> checkDeviceCode, string dateTo, string dateFrom, Nullable<int> employeeType, Nullable<int> proofType, Nullable<long> createdBy, string createdByName, string updatedBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var platFormParameter = platForm != null ?
                new ObjectParameter("PlatForm", platForm) :
                new ObjectParameter("PlatForm", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var nationalIdProofFrontParameter = nationalIdProofFront != null ?
                new ObjectParameter("NationalIdProofFront", nationalIdProofFront) :
                new ObjectParameter("NationalIdProofFront", typeof(string));
    
            var nationalIdProofBackParameter = nationalIdProofBack != null ?
                new ObjectParameter("NationalIdProofBack", nationalIdProofBack) :
                new ObjectParameter("NationalIdProofBack", typeof(string));
    
            var isKYCApprovedParameter = isKYCApproved.HasValue ?
                new ObjectParameter("IsKYCApproved", isKYCApproved) :
                new ObjectParameter("IsKYCApproved", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var isPhoneVerifiedParameter = isPhoneVerified.HasValue ?
                new ObjectParameter("IsPhoneVerified", isPhoneVerified) :
                new ObjectParameter("IsPhoneVerified", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var isEmailVerifiedParameter = isEmailVerified.HasValue ?
                new ObjectParameter("IsEmailVerified", isEmailVerified) :
                new ObjectParameter("IsEmailVerified", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var checkRefIdParameter = checkRefId.HasValue ?
                new ObjectParameter("CheckRefId", checkRefId) :
                new ObjectParameter("CheckRefId", typeof(int));
    
            var checkDirectIdParameter = checkDirectId.HasValue ?
                new ObjectParameter("CheckDirectId", checkDirectId) :
                new ObjectParameter("CheckDirectId", typeof(int));
    
            var checkDeviceCodeParameter = checkDeviceCode.HasValue ?
                new ObjectParameter("CheckDeviceCode", checkDeviceCode) :
                new ObjectParameter("CheckDeviceCode", typeof(int));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var proofTypeParameter = proofType.HasValue ?
                new ObjectParameter("ProofType", proofType) :
                new ObjectParameter("ProofType", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_Get_all_Result>("sp_Users_Get_all", idParameter, userIdParameter, userNameParameter, roleNameParameter, contactNumberParameter, roleIdParameter, firstNameParameter, emailParameter, takeParameter, skipParameter, passwordParameter, deviceCodeParameter, verificationCodeParameter, platFormParameter, memberIdParameter, countryIdParameter, refCodeParameter, refIdParameter, nationalIdProofFrontParameter, nationalIdProofBackParameter, isKYCApprovedParameter, stateIdParameter, isPhoneVerifiedParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, checkCreatedDateParameter, sortParameter, isEmailVerifiedParameter, totalAmountParameter, checkRefIdParameter, checkDirectIdParameter, checkDeviceCodeParameter, dateToParameter, dateFromParameter, employeeTypeParameter, proofTypeParameter, createdByParameter, createdByNameParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<sp_Users_GetAdmin_Result> sp_Users_GetAdmin(Nullable<long> id, string userId, string userName, string roleName, string contactNumber, Nullable<int> roleId, string firstName, string email, Nullable<int> take, Nullable<int> skip, string password, string deviceCode, string verificationCode, string platForm, Nullable<long> memberId, Nullable<int> countryId, string refCode, Nullable<long> refId, string nationalIdProofFront, string nationalIdProofBack, Nullable<int> isKYCApproved, Nullable<int> stateId, Nullable<int> isPhoneVerified, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string checkCreatedDate, string sort, Nullable<int> isEmailVerified, Nullable<decimal> totalAmount, Nullable<int> checkRefId, Nullable<int> checkDirectId, Nullable<int> checkDeviceCode, string dateTo, string dateFrom, Nullable<int> employeeType, Nullable<int> proofType, Nullable<long> createdBy, string createdByName, string updatedBy, string checkPasswordReset, string checkNotPasswordReset, string checkPin, string checkNotPin, string checkFirstName, string checkNotFirstName, Nullable<int> checkOldAndNewUser, string loginFromDate, string loginToDate, string jwtToken, string refCodeAttempted, string deviceId, string reviewDateTo, string reviewDateFrom, string documentNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var platFormParameter = platForm != null ?
                new ObjectParameter("PlatForm", platForm) :
                new ObjectParameter("PlatForm", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var nationalIdProofFrontParameter = nationalIdProofFront != null ?
                new ObjectParameter("NationalIdProofFront", nationalIdProofFront) :
                new ObjectParameter("NationalIdProofFront", typeof(string));
    
            var nationalIdProofBackParameter = nationalIdProofBack != null ?
                new ObjectParameter("NationalIdProofBack", nationalIdProofBack) :
                new ObjectParameter("NationalIdProofBack", typeof(string));
    
            var isKYCApprovedParameter = isKYCApproved.HasValue ?
                new ObjectParameter("IsKYCApproved", isKYCApproved) :
                new ObjectParameter("IsKYCApproved", typeof(int));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var isPhoneVerifiedParameter = isPhoneVerified.HasValue ?
                new ObjectParameter("IsPhoneVerified", isPhoneVerified) :
                new ObjectParameter("IsPhoneVerified", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var isEmailVerifiedParameter = isEmailVerified.HasValue ?
                new ObjectParameter("IsEmailVerified", isEmailVerified) :
                new ObjectParameter("IsEmailVerified", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var checkRefIdParameter = checkRefId.HasValue ?
                new ObjectParameter("CheckRefId", checkRefId) :
                new ObjectParameter("CheckRefId", typeof(int));
    
            var checkDirectIdParameter = checkDirectId.HasValue ?
                new ObjectParameter("CheckDirectId", checkDirectId) :
                new ObjectParameter("CheckDirectId", typeof(int));
    
            var checkDeviceCodeParameter = checkDeviceCode.HasValue ?
                new ObjectParameter("CheckDeviceCode", checkDeviceCode) :
                new ObjectParameter("CheckDeviceCode", typeof(int));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var proofTypeParameter = proofType.HasValue ?
                new ObjectParameter("ProofType", proofType) :
                new ObjectParameter("ProofType", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var checkPasswordResetParameter = checkPasswordReset != null ?
                new ObjectParameter("CheckPasswordReset", checkPasswordReset) :
                new ObjectParameter("CheckPasswordReset", typeof(string));
    
            var checkNotPasswordResetParameter = checkNotPasswordReset != null ?
                new ObjectParameter("CheckNotPasswordReset", checkNotPasswordReset) :
                new ObjectParameter("CheckNotPasswordReset", typeof(string));
    
            var checkPinParameter = checkPin != null ?
                new ObjectParameter("CheckPin", checkPin) :
                new ObjectParameter("CheckPin", typeof(string));
    
            var checkNotPinParameter = checkNotPin != null ?
                new ObjectParameter("CheckNotPin", checkNotPin) :
                new ObjectParameter("CheckNotPin", typeof(string));
    
            var checkFirstNameParameter = checkFirstName != null ?
                new ObjectParameter("CheckFirstName", checkFirstName) :
                new ObjectParameter("CheckFirstName", typeof(string));
    
            var checkNotFirstNameParameter = checkNotFirstName != null ?
                new ObjectParameter("CheckNotFirstName", checkNotFirstName) :
                new ObjectParameter("CheckNotFirstName", typeof(string));
    
            var checkOldAndNewUserParameter = checkOldAndNewUser.HasValue ?
                new ObjectParameter("CheckOldAndNewUser", checkOldAndNewUser) :
                new ObjectParameter("CheckOldAndNewUser", typeof(int));
    
            var loginFromDateParameter = loginFromDate != null ?
                new ObjectParameter("LoginFromDate", loginFromDate) :
                new ObjectParameter("LoginFromDate", typeof(string));
    
            var loginToDateParameter = loginToDate != null ?
                new ObjectParameter("LoginToDate", loginToDate) :
                new ObjectParameter("LoginToDate", typeof(string));
    
            var jwtTokenParameter = jwtToken != null ?
                new ObjectParameter("JwtToken", jwtToken) :
                new ObjectParameter("JwtToken", typeof(string));
    
            var refCodeAttemptedParameter = refCodeAttempted != null ?
                new ObjectParameter("RefCodeAttempted", refCodeAttempted) :
                new ObjectParameter("RefCodeAttempted", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var reviewDateToParameter = reviewDateTo != null ?
                new ObjectParameter("ReviewDateTo", reviewDateTo) :
                new ObjectParameter("ReviewDateTo", typeof(string));
    
            var reviewDateFromParameter = reviewDateFrom != null ?
                new ObjectParameter("ReviewDateFrom", reviewDateFrom) :
                new ObjectParameter("ReviewDateFrom", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_GetAdmin_Result>("sp_Users_GetAdmin", idParameter, userIdParameter, userNameParameter, roleNameParameter, contactNumberParameter, roleIdParameter, firstNameParameter, emailParameter, takeParameter, skipParameter, passwordParameter, deviceCodeParameter, verificationCodeParameter, platFormParameter, memberIdParameter, countryIdParameter, refCodeParameter, refIdParameter, nationalIdProofFrontParameter, nationalIdProofBackParameter, isKYCApprovedParameter, stateIdParameter, isPhoneVerifiedParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, checkCreatedDateParameter, sortParameter, isEmailVerifiedParameter, totalAmountParameter, checkRefIdParameter, checkDirectIdParameter, checkDeviceCodeParameter, dateToParameter, dateFromParameter, employeeTypeParameter, proofTypeParameter, createdByParameter, createdByNameParameter, updatedByParameter, checkPasswordResetParameter, checkNotPasswordResetParameter, checkPinParameter, checkNotPinParameter, checkFirstNameParameter, checkNotFirstNameParameter, checkOldAndNewUserParameter, loginFromDateParameter, loginToDateParameter, jwtTokenParameter, refCodeAttemptedParameter, deviceIdParameter, reviewDateToParameter, reviewDateFromParameter, documentNumberParameter);
        }
    
        public virtual ObjectResult<sp_Users_GetBasicInfo_Result> sp_Users_GetBasicInfo(Nullable<int> take, Nullable<long> memberId, string contactNumber)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_GetBasicInfo_Result>("sp_Users_GetBasicInfo", takeParameter, memberIdParameter, contactNumberParameter);
        }
    
        public virtual ObjectResult<sp_Users_GetByPhoneNumber_Result> sp_Users_GetByPhoneNumber(Nullable<int> take, string contactNumber)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_GetByPhoneNumber_Result>("sp_Users_GetByPhoneNumber", takeParameter, contactNumberParameter);
        }
    
        public virtual ObjectResult<sp_Users_GetLoginWithPin_Result> sp_Users_GetLoginWithPin(Nullable<int> take, Nullable<long> memberId, string refCode, string email, string contactNumber, string jwtToken, string deviceId, Nullable<int> checkDelete)
        {
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var jwtTokenParameter = jwtToken != null ?
                new ObjectParameter("JwtToken", jwtToken) :
                new ObjectParameter("JwtToken", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Users_GetLoginWithPin_Result>("sp_Users_GetLoginWithPin", takeParameter, memberIdParameter, refCodeParameter, emailParameter, contactNumberParameter, jwtTokenParameter, deviceIdParameter, checkDeleteParameter);
        }
    
        public virtual int sp_Users_InvalidPin_Update(Nullable<long> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_InvalidPin_Update", memberIdParameter);
        }
    
        public virtual int sp_Users_LoginInvalidPinUpdate(Nullable<long> id, Nullable<int> loginAttemptCount, Nullable<System.DateTime> lastLoginAttempt, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var loginAttemptCountParameter = loginAttemptCount.HasValue ?
                new ObjectParameter("LoginAttemptCount", loginAttemptCount) :
                new ObjectParameter("LoginAttemptCount", typeof(int));
    
            var lastLoginAttemptParameter = lastLoginAttempt.HasValue ?
                new ObjectParameter("LastLoginAttempt", lastLoginAttempt) :
                new ObjectParameter("LastLoginAttempt", typeof(System.DateTime));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_LoginInvalidPinUpdate", idParameter, loginAttemptCountParameter, lastLoginAttemptParameter, ipAddressParameter);
        }
    
        public virtual int sp_Users_LoginUpdate(Nullable<long> id, Nullable<long> memberId, string contactNumber, string deviceCode, string jWTToken, string ipAddress, string platform, string deviceId, Nullable<bool> isPhoneVerified)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var jWTTokenParameter = jWTToken != null ?
                new ObjectParameter("JWTToken", jWTToken) :
                new ObjectParameter("JWTToken", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var isPhoneVerifiedParameter = isPhoneVerified.HasValue ?
                new ObjectParameter("IsPhoneVerified", isPhoneVerified) :
                new ObjectParameter("IsPhoneVerified", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_LoginUpdate", idParameter, memberIdParameter, contactNumberParameter, deviceCodeParameter, jWTTokenParameter, ipAddressParameter, platformParameter, deviceIdParameter, isPhoneVerifiedParameter);
        }
    
        public virtual int sp_Users_LogoutDevice(Nullable<long> id, string deviceCode, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_LogoutDevice", idParameter, deviceCodeParameter, ipAddressParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Users_RecentTransaction_Update(Nullable<long> memberId, Nullable<int> type, string transactionId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Users_RecentTransaction_Update", memberIdParameter, typeParameter, transactionIdParameter);
        }
    
        public virtual int sp_Users_ResetPassword(Nullable<long> id, string password, string transactionPassword, Nullable<bool> isEmailVerified, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var transactionPasswordParameter = transactionPassword != null ?
                new ObjectParameter("TransactionPassword", transactionPassword) :
                new ObjectParameter("TransactionPassword", typeof(string));
    
            var isEmailVerifiedParameter = isEmailVerified.HasValue ?
                new ObjectParameter("IsEmailVerified", isEmailVerified) :
                new ObjectParameter("IsEmailVerified", typeof(bool));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_ResetPassword", idParameter, passwordParameter, transactionPasswordParameter, isEmailVerifiedParameter, ipAddressParameter);
        }
    
        public virtual int sp_Users_ResetVerificationCode(Nullable<long> id, string verificationCode, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_ResetVerificationCode", idParameter, verificationCodeParameter, ipAddressParameter);
        }
    
        public virtual int sp_Users_SetPin(Nullable<long> id, string pin, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var pinParameter = pin != null ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_SetPin", idParameter, pinParameter, ipAddressParameter);
        }
    
        public virtual int sp_Users_Update(Nullable<long> id, Nullable<long> memberId, string contactNumber, string deviceCode)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_Update", idParameter, memberIdParameter, contactNumberParameter, deviceCodeParameter);
        }
    
        public virtual int sp_Users_UpdateDeviceId(Nullable<long> id, string deviceId, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_UpdateDeviceId", idParameter, deviceIdParameter, ipAddressParameter);
        }
    
        public virtual int sp_Users_UpdateIsBankAdded(Nullable<long> id, Nullable<int> isBankAdded, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var isBankAddedParameter = isBankAdded.HasValue ?
                new ObjectParameter("IsBankAdded", isBankAdded) :
                new ObjectParameter("IsBankAdded", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_UpdateIsBankAdded", idParameter, isBankAddedParameter, ipAddressParameter);
        }
    
        public virtual int sp_Users_UpdateKycDetails(Nullable<long> id, string remarks, Nullable<int> isKYCApproved, Nullable<long> updatedBy, Nullable<long> approvedorRejectedBy, string approvedorRejectedByName, Nullable<System.DateTime> kYCReviewDate, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isKYCApprovedParameter = isKYCApproved.HasValue ?
                new ObjectParameter("IsKYCApproved", isKYCApproved) :
                new ObjectParameter("IsKYCApproved", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var approvedorRejectedByParameter = approvedorRejectedBy.HasValue ?
                new ObjectParameter("ApprovedorRejectedBy", approvedorRejectedBy) :
                new ObjectParameter("ApprovedorRejectedBy", typeof(long));
    
            var approvedorRejectedByNameParameter = approvedorRejectedByName != null ?
                new ObjectParameter("ApprovedorRejectedByName", approvedorRejectedByName) :
                new ObjectParameter("ApprovedorRejectedByName", typeof(string));
    
            var kYCReviewDateParameter = kYCReviewDate.HasValue ?
                new ObjectParameter("KYCReviewDate", kYCReviewDate) :
                new ObjectParameter("KYCReviewDate", typeof(System.DateTime));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_UpdateKycDetails", idParameter, remarksParameter, isKYCApprovedParameter, updatedByParameter, approvedorRejectedByParameter, approvedorRejectedByNameParameter, kYCReviewDateParameter, ipAddressParameter);
        }
    
        public virtual int sp_Users_UpdatePlatform(Nullable<long> id, string verificationCode, string deviceCode, string platform, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_UpdatePlatform", idParameter, verificationCodeParameter, deviceCodeParameter, platformParameter, ipAddressParameter);
        }
    
        public virtual int sp_Users_UpdateUserDocuments(Nullable<long> id, Nullable<int> gender, Nullable<int> employeeType, string nationalIdProofFront, string nationalIdProofBack, string userImage, Nullable<int> proofType, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var employeeTypeParameter = employeeType.HasValue ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(int));
    
            var nationalIdProofFrontParameter = nationalIdProofFront != null ?
                new ObjectParameter("NationalIdProofFront", nationalIdProofFront) :
                new ObjectParameter("NationalIdProofFront", typeof(string));
    
            var nationalIdProofBackParameter = nationalIdProofBack != null ?
                new ObjectParameter("NationalIdProofBack", nationalIdProofBack) :
                new ObjectParameter("NationalIdProofBack", typeof(string));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(string));
    
            var proofTypeParameter = proofType.HasValue ?
                new ObjectParameter("ProofType", proofType) :
                new ObjectParameter("ProofType", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_UpdateUserDocuments", idParameter, genderParameter, employeeTypeParameter, nationalIdProofFrontParameter, nationalIdProofBackParameter, userImageParameter, proofTypeParameter, ipAddressParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Users_Validate_SameDeviceID(string deviceID)
        {
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Users_Validate_SameDeviceID", deviceIDParameter);
        }
    
        public virtual int sp_Users_WebLoginUpdate(Nullable<long> id, string ipAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Users_WebLoginUpdate", idParameter, ipAddressParameter);
        }
    
        public virtual int sp_UserSavedPayments_AddNew(Nullable<int> serviceID, string mobileNumber, Nullable<decimal> amount, string subscriberID, string casID, string packageID, string packageName, string customerID, string customerName, string oldWardNumber, string sTB, string userName, string fullName, string landlineNumber, string address, string counterID, string counterName, string scNumber, string consumerID, string subscriptionID, string subscriptionName, string acceptanceNo, string policyNumber, string dateOfBirth, string insuranceID, string insuranceName, string debitNoteNo, string email, string policyType, string branch, string policyCategory, string policyDescription, string chitNumber, string fiscalYearID, string fiscalYearValue, string provinceID, string provinceName, string districtID, string districtValue, string bankID, string bankName, string creditCardNumber, string creditCardOwner, Nullable<long> memberID, string paymentName, Nullable<bool> isSchedulePayment, Nullable<System.DateTime> scheduleDate, Nullable<int> paymentCycle, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var subscriberIDParameter = subscriberID != null ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(string));
    
            var casIDParameter = casID != null ?
                new ObjectParameter("CasID", casID) :
                new ObjectParameter("CasID", typeof(string));
    
            var packageIDParameter = packageID != null ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var oldWardNumberParameter = oldWardNumber != null ?
                new ObjectParameter("OldWardNumber", oldWardNumber) :
                new ObjectParameter("OldWardNumber", typeof(string));
    
            var sTBParameter = sTB != null ?
                new ObjectParameter("STB", sTB) :
                new ObjectParameter("STB", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var landlineNumberParameter = landlineNumber != null ?
                new ObjectParameter("LandlineNumber", landlineNumber) :
                new ObjectParameter("LandlineNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var counterIDParameter = counterID != null ?
                new ObjectParameter("CounterID", counterID) :
                new ObjectParameter("CounterID", typeof(string));
    
            var counterNameParameter = counterName != null ?
                new ObjectParameter("CounterName", counterName) :
                new ObjectParameter("CounterName", typeof(string));
    
            var scNumberParameter = scNumber != null ?
                new ObjectParameter("ScNumber", scNumber) :
                new ObjectParameter("ScNumber", typeof(string));
    
            var consumerIDParameter = consumerID != null ?
                new ObjectParameter("ConsumerID", consumerID) :
                new ObjectParameter("ConsumerID", typeof(string));
    
            var subscriptionIDParameter = subscriptionID != null ?
                new ObjectParameter("SubscriptionID", subscriptionID) :
                new ObjectParameter("SubscriptionID", typeof(string));
    
            var subscriptionNameParameter = subscriptionName != null ?
                new ObjectParameter("SubscriptionName", subscriptionName) :
                new ObjectParameter("SubscriptionName", typeof(string));
    
            var acceptanceNoParameter = acceptanceNo != null ?
                new ObjectParameter("AcceptanceNo", acceptanceNo) :
                new ObjectParameter("AcceptanceNo", typeof(string));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth != null ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(string));
    
            var insuranceIDParameter = insuranceID != null ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(string));
    
            var insuranceNameParameter = insuranceName != null ?
                new ObjectParameter("InsuranceName", insuranceName) :
                new ObjectParameter("InsuranceName", typeof(string));
    
            var debitNoteNoParameter = debitNoteNo != null ?
                new ObjectParameter("DebitNoteNo", debitNoteNo) :
                new ObjectParameter("DebitNoteNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var policyTypeParameter = policyType != null ?
                new ObjectParameter("PolicyType", policyType) :
                new ObjectParameter("PolicyType", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var policyCategoryParameter = policyCategory != null ?
                new ObjectParameter("PolicyCategory", policyCategory) :
                new ObjectParameter("PolicyCategory", typeof(string));
    
            var policyDescriptionParameter = policyDescription != null ?
                new ObjectParameter("PolicyDescription", policyDescription) :
                new ObjectParameter("PolicyDescription", typeof(string));
    
            var chitNumberParameter = chitNumber != null ?
                new ObjectParameter("ChitNumber", chitNumber) :
                new ObjectParameter("ChitNumber", typeof(string));
    
            var fiscalYearIDParameter = fiscalYearID != null ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(string));
    
            var fiscalYearValueParameter = fiscalYearValue != null ?
                new ObjectParameter("FiscalYearValue", fiscalYearValue) :
                new ObjectParameter("FiscalYearValue", typeof(string));
    
            var provinceIDParameter = provinceID != null ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(string));
    
            var provinceNameParameter = provinceName != null ?
                new ObjectParameter("ProvinceName", provinceName) :
                new ObjectParameter("ProvinceName", typeof(string));
    
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            var districtValueParameter = districtValue != null ?
                new ObjectParameter("DistrictValue", districtValue) :
                new ObjectParameter("DistrictValue", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var creditCardNumberParameter = creditCardNumber != null ?
                new ObjectParameter("CreditCardNumber", creditCardNumber) :
                new ObjectParameter("CreditCardNumber", typeof(string));
    
            var creditCardOwnerParameter = creditCardOwner != null ?
                new ObjectParameter("CreditCardOwner", creditCardOwner) :
                new ObjectParameter("CreditCardOwner", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var paymentNameParameter = paymentName != null ?
                new ObjectParameter("PaymentName", paymentName) :
                new ObjectParameter("PaymentName", typeof(string));
    
            var isSchedulePaymentParameter = isSchedulePayment.HasValue ?
                new ObjectParameter("IsSchedulePayment", isSchedulePayment) :
                new ObjectParameter("IsSchedulePayment", typeof(bool));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var paymentCycleParameter = paymentCycle.HasValue ?
                new ObjectParameter("PaymentCycle", paymentCycle) :
                new ObjectParameter("PaymentCycle", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserSavedPayments_AddNew", serviceIDParameter, mobileNumberParameter, amountParameter, subscriberIDParameter, casIDParameter, packageIDParameter, packageNameParameter, customerIDParameter, customerNameParameter, oldWardNumberParameter, sTBParameter, userNameParameter, fullNameParameter, landlineNumberParameter, addressParameter, counterIDParameter, counterNameParameter, scNumberParameter, consumerIDParameter, subscriptionIDParameter, subscriptionNameParameter, acceptanceNoParameter, policyNumberParameter, dateOfBirthParameter, insuranceIDParameter, insuranceNameParameter, debitNoteNoParameter, emailParameter, policyTypeParameter, branchParameter, policyCategoryParameter, policyDescriptionParameter, chitNumberParameter, fiscalYearIDParameter, fiscalYearValueParameter, provinceIDParameter, provinceNameParameter, districtIDParameter, districtValueParameter, bankIDParameter, bankNameParameter, creditCardNumberParameter, creditCardOwnerParameter, memberIDParameter, paymentNameParameter, isSchedulePaymentParameter, scheduleDateParameter, paymentCycleParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_UserSavedPayments_DataTable_Result> sp_UserSavedPayments_DataTable(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<int> serviceID, string mobileNumber, Nullable<decimal> amount, string subscriberID, string casID, string packageID, string packageName, string customerID, string customerName, string oldWardNumber, string sTB, string userName, string fullName, string landlineNumber, string address, string counterID, string counterName, string scNumber, string consumerID, string subscriptionID, string subscriptionName, string acceptanceNo, string policyNumber, string dateOfBirth, string insuranceID, string insuranceName, string debitNoteNo, string email, string policyType, string branch, string policyCategory, string policyDescription, string chitNumber, string fiscalYearID, string fiscalYearValue, string provinceID, string provinceName, string districtID, string districtValue, string bankID, string bankName, string creditCardNumber, string creditCardOwner, Nullable<long> memberID, string paymentName, Nullable<bool> isSchedulePayment, string checkScheduleDate, Nullable<int> paymentCycle, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var subscriberIDParameter = subscriberID != null ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(string));
    
            var casIDParameter = casID != null ?
                new ObjectParameter("CasID", casID) :
                new ObjectParameter("CasID", typeof(string));
    
            var packageIDParameter = packageID != null ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var oldWardNumberParameter = oldWardNumber != null ?
                new ObjectParameter("OldWardNumber", oldWardNumber) :
                new ObjectParameter("OldWardNumber", typeof(string));
    
            var sTBParameter = sTB != null ?
                new ObjectParameter("STB", sTB) :
                new ObjectParameter("STB", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var landlineNumberParameter = landlineNumber != null ?
                new ObjectParameter("LandlineNumber", landlineNumber) :
                new ObjectParameter("LandlineNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var counterIDParameter = counterID != null ?
                new ObjectParameter("CounterID", counterID) :
                new ObjectParameter("CounterID", typeof(string));
    
            var counterNameParameter = counterName != null ?
                new ObjectParameter("CounterName", counterName) :
                new ObjectParameter("CounterName", typeof(string));
    
            var scNumberParameter = scNumber != null ?
                new ObjectParameter("ScNumber", scNumber) :
                new ObjectParameter("ScNumber", typeof(string));
    
            var consumerIDParameter = consumerID != null ?
                new ObjectParameter("ConsumerID", consumerID) :
                new ObjectParameter("ConsumerID", typeof(string));
    
            var subscriptionIDParameter = subscriptionID != null ?
                new ObjectParameter("SubscriptionID", subscriptionID) :
                new ObjectParameter("SubscriptionID", typeof(string));
    
            var subscriptionNameParameter = subscriptionName != null ?
                new ObjectParameter("SubscriptionName", subscriptionName) :
                new ObjectParameter("SubscriptionName", typeof(string));
    
            var acceptanceNoParameter = acceptanceNo != null ?
                new ObjectParameter("AcceptanceNo", acceptanceNo) :
                new ObjectParameter("AcceptanceNo", typeof(string));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth != null ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(string));
    
            var insuranceIDParameter = insuranceID != null ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(string));
    
            var insuranceNameParameter = insuranceName != null ?
                new ObjectParameter("InsuranceName", insuranceName) :
                new ObjectParameter("InsuranceName", typeof(string));
    
            var debitNoteNoParameter = debitNoteNo != null ?
                new ObjectParameter("DebitNoteNo", debitNoteNo) :
                new ObjectParameter("DebitNoteNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var policyTypeParameter = policyType != null ?
                new ObjectParameter("PolicyType", policyType) :
                new ObjectParameter("PolicyType", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var policyCategoryParameter = policyCategory != null ?
                new ObjectParameter("PolicyCategory", policyCategory) :
                new ObjectParameter("PolicyCategory", typeof(string));
    
            var policyDescriptionParameter = policyDescription != null ?
                new ObjectParameter("PolicyDescription", policyDescription) :
                new ObjectParameter("PolicyDescription", typeof(string));
    
            var chitNumberParameter = chitNumber != null ?
                new ObjectParameter("ChitNumber", chitNumber) :
                new ObjectParameter("ChitNumber", typeof(string));
    
            var fiscalYearIDParameter = fiscalYearID != null ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(string));
    
            var fiscalYearValueParameter = fiscalYearValue != null ?
                new ObjectParameter("FiscalYearValue", fiscalYearValue) :
                new ObjectParameter("FiscalYearValue", typeof(string));
    
            var provinceIDParameter = provinceID != null ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(string));
    
            var provinceNameParameter = provinceName != null ?
                new ObjectParameter("ProvinceName", provinceName) :
                new ObjectParameter("ProvinceName", typeof(string));
    
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            var districtValueParameter = districtValue != null ?
                new ObjectParameter("DistrictValue", districtValue) :
                new ObjectParameter("DistrictValue", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var creditCardNumberParameter = creditCardNumber != null ?
                new ObjectParameter("CreditCardNumber", creditCardNumber) :
                new ObjectParameter("CreditCardNumber", typeof(string));
    
            var creditCardOwnerParameter = creditCardOwner != null ?
                new ObjectParameter("CreditCardOwner", creditCardOwner) :
                new ObjectParameter("CreditCardOwner", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var paymentNameParameter = paymentName != null ?
                new ObjectParameter("PaymentName", paymentName) :
                new ObjectParameter("PaymentName", typeof(string));
    
            var isSchedulePaymentParameter = isSchedulePayment.HasValue ?
                new ObjectParameter("IsSchedulePayment", isSchedulePayment) :
                new ObjectParameter("IsSchedulePayment", typeof(bool));
    
            var checkScheduleDateParameter = checkScheduleDate != null ?
                new ObjectParameter("CheckScheduleDate", checkScheduleDate) :
                new ObjectParameter("CheckScheduleDate", typeof(string));
    
            var paymentCycleParameter = paymentCycle.HasValue ?
                new ObjectParameter("PaymentCycle", paymentCycle) :
                new ObjectParameter("PaymentCycle", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserSavedPayments_DataTable_Result>("sp_UserSavedPayments_DataTable", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, serviceIDParameter, mobileNumberParameter, amountParameter, subscriberIDParameter, casIDParameter, packageIDParameter, packageNameParameter, customerIDParameter, customerNameParameter, oldWardNumberParameter, sTBParameter, userNameParameter, fullNameParameter, landlineNumberParameter, addressParameter, counterIDParameter, counterNameParameter, scNumberParameter, consumerIDParameter, subscriptionIDParameter, subscriptionNameParameter, acceptanceNoParameter, policyNumberParameter, dateOfBirthParameter, insuranceIDParameter, insuranceNameParameter, debitNoteNoParameter, emailParameter, policyTypeParameter, branchParameter, policyCategoryParameter, policyDescriptionParameter, chitNumberParameter, fiscalYearIDParameter, fiscalYearValueParameter, provinceIDParameter, provinceNameParameter, districtIDParameter, districtValueParameter, bankIDParameter, bankNameParameter, creditCardNumberParameter, creditCardOwnerParameter, memberIDParameter, paymentNameParameter, isSchedulePaymentParameter, checkScheduleDateParameter, paymentCycleParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UserSavedPayments_DataTableCounter(string searchText, Nullable<int> pagingSize, Nullable<int> offsetValue, string sortColumn, string sortOrder, Nullable<int> serviceID, string mobileNumber, Nullable<decimal> amount, string subscriberID, string casID, string packageID, string packageName, string customerID, string customerName, string oldWardNumber, string sTB, string userName, string fullName, string landlineNumber, string address, string counterID, string counterName, string scNumber, string consumerID, string subscriptionID, string subscriptionName, string acceptanceNo, string policyNumber, string dateOfBirth, string insuranceID, string insuranceName, string debitNoteNo, string email, string policyType, string branch, string policyCategory, string policyDescription, string chitNumber, string fiscalYearID, string fiscalYearValue, string provinceID, string provinceName, string districtID, string districtValue, string bankID, string bankName, string creditCardNumber, string creditCardOwner, Nullable<long> memberID, string paymentName, Nullable<bool> isSchedulePayment, string checkScheduleDate, Nullable<int> paymentCycle, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var subscriberIDParameter = subscriberID != null ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(string));
    
            var casIDParameter = casID != null ?
                new ObjectParameter("CasID", casID) :
                new ObjectParameter("CasID", typeof(string));
    
            var packageIDParameter = packageID != null ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var oldWardNumberParameter = oldWardNumber != null ?
                new ObjectParameter("OldWardNumber", oldWardNumber) :
                new ObjectParameter("OldWardNumber", typeof(string));
    
            var sTBParameter = sTB != null ?
                new ObjectParameter("STB", sTB) :
                new ObjectParameter("STB", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var landlineNumberParameter = landlineNumber != null ?
                new ObjectParameter("LandlineNumber", landlineNumber) :
                new ObjectParameter("LandlineNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var counterIDParameter = counterID != null ?
                new ObjectParameter("CounterID", counterID) :
                new ObjectParameter("CounterID", typeof(string));
    
            var counterNameParameter = counterName != null ?
                new ObjectParameter("CounterName", counterName) :
                new ObjectParameter("CounterName", typeof(string));
    
            var scNumberParameter = scNumber != null ?
                new ObjectParameter("ScNumber", scNumber) :
                new ObjectParameter("ScNumber", typeof(string));
    
            var consumerIDParameter = consumerID != null ?
                new ObjectParameter("ConsumerID", consumerID) :
                new ObjectParameter("ConsumerID", typeof(string));
    
            var subscriptionIDParameter = subscriptionID != null ?
                new ObjectParameter("SubscriptionID", subscriptionID) :
                new ObjectParameter("SubscriptionID", typeof(string));
    
            var subscriptionNameParameter = subscriptionName != null ?
                new ObjectParameter("SubscriptionName", subscriptionName) :
                new ObjectParameter("SubscriptionName", typeof(string));
    
            var acceptanceNoParameter = acceptanceNo != null ?
                new ObjectParameter("AcceptanceNo", acceptanceNo) :
                new ObjectParameter("AcceptanceNo", typeof(string));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth != null ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(string));
    
            var insuranceIDParameter = insuranceID != null ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(string));
    
            var insuranceNameParameter = insuranceName != null ?
                new ObjectParameter("InsuranceName", insuranceName) :
                new ObjectParameter("InsuranceName", typeof(string));
    
            var debitNoteNoParameter = debitNoteNo != null ?
                new ObjectParameter("DebitNoteNo", debitNoteNo) :
                new ObjectParameter("DebitNoteNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var policyTypeParameter = policyType != null ?
                new ObjectParameter("PolicyType", policyType) :
                new ObjectParameter("PolicyType", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var policyCategoryParameter = policyCategory != null ?
                new ObjectParameter("PolicyCategory", policyCategory) :
                new ObjectParameter("PolicyCategory", typeof(string));
    
            var policyDescriptionParameter = policyDescription != null ?
                new ObjectParameter("PolicyDescription", policyDescription) :
                new ObjectParameter("PolicyDescription", typeof(string));
    
            var chitNumberParameter = chitNumber != null ?
                new ObjectParameter("ChitNumber", chitNumber) :
                new ObjectParameter("ChitNumber", typeof(string));
    
            var fiscalYearIDParameter = fiscalYearID != null ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(string));
    
            var fiscalYearValueParameter = fiscalYearValue != null ?
                new ObjectParameter("FiscalYearValue", fiscalYearValue) :
                new ObjectParameter("FiscalYearValue", typeof(string));
    
            var provinceIDParameter = provinceID != null ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(string));
    
            var provinceNameParameter = provinceName != null ?
                new ObjectParameter("ProvinceName", provinceName) :
                new ObjectParameter("ProvinceName", typeof(string));
    
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            var districtValueParameter = districtValue != null ?
                new ObjectParameter("DistrictValue", districtValue) :
                new ObjectParameter("DistrictValue", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var creditCardNumberParameter = creditCardNumber != null ?
                new ObjectParameter("CreditCardNumber", creditCardNumber) :
                new ObjectParameter("CreditCardNumber", typeof(string));
    
            var creditCardOwnerParameter = creditCardOwner != null ?
                new ObjectParameter("CreditCardOwner", creditCardOwner) :
                new ObjectParameter("CreditCardOwner", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var paymentNameParameter = paymentName != null ?
                new ObjectParameter("PaymentName", paymentName) :
                new ObjectParameter("PaymentName", typeof(string));
    
            var isSchedulePaymentParameter = isSchedulePayment.HasValue ?
                new ObjectParameter("IsSchedulePayment", isSchedulePayment) :
                new ObjectParameter("IsSchedulePayment", typeof(bool));
    
            var checkScheduleDateParameter = checkScheduleDate != null ?
                new ObjectParameter("CheckScheduleDate", checkScheduleDate) :
                new ObjectParameter("CheckScheduleDate", typeof(string));
    
            var paymentCycleParameter = paymentCycle.HasValue ?
                new ObjectParameter("PaymentCycle", paymentCycle) :
                new ObjectParameter("PaymentCycle", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UserSavedPayments_DataTableCounter", searchTextParameter, pagingSizeParameter, offsetValueParameter, sortColumnParameter, sortOrderParameter, serviceIDParameter, mobileNumberParameter, amountParameter, subscriberIDParameter, casIDParameter, packageIDParameter, packageNameParameter, customerIDParameter, customerNameParameter, oldWardNumberParameter, sTBParameter, userNameParameter, fullNameParameter, landlineNumberParameter, addressParameter, counterIDParameter, counterNameParameter, scNumberParameter, consumerIDParameter, subscriptionIDParameter, subscriptionNameParameter, acceptanceNoParameter, policyNumberParameter, dateOfBirthParameter, insuranceIDParameter, insuranceNameParameter, debitNoteNoParameter, emailParameter, policyTypeParameter, branchParameter, policyCategoryParameter, policyDescriptionParameter, chitNumberParameter, fiscalYearIDParameter, fiscalYearValueParameter, provinceIDParameter, provinceNameParameter, districtIDParameter, districtValueParameter, bankIDParameter, bankNameParameter, creditCardNumberParameter, creditCardOwnerParameter, memberIDParameter, paymentNameParameter, isSchedulePaymentParameter, checkScheduleDateParameter, paymentCycleParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_UserSavedPayments_Get_Result> sp_UserSavedPayments_Get(Nullable<int> serviceID, string mobileNumber, Nullable<decimal> amount, string subscriberID, string casID, string packageID, string packageName, string customerID, string customerName, string oldWardNumber, string sTB, string userName, string fullName, string landlineNumber, string address, string counterID, string counterName, string scNumber, string consumerID, string subscriptionID, string subscriptionName, string acceptanceNo, string policyNumber, string dateOfBirth, string insuranceID, string insuranceName, string debitNoteNo, string email, string policyType, string branch, string policyCategory, string policyDescription, string chitNumber, string fiscalYearID, string fiscalYearValue, string provinceID, string provinceName, string districtID, string districtValue, string bankID, string bankName, string creditCardNumber, string creditCardOwner, Nullable<long> memberID, string paymentName, Nullable<bool> isSchedulePayment, string scheduleDate, Nullable<int> paymentCycle, Nullable<long> createdBy, string createdByName, string sno, Nullable<long> updatedBy, string updatedByName, Nullable<int> take, Nullable<int> skip, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string checkCreatedDate, string startDate, string endDate, Nullable<long> id)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var subscriberIDParameter = subscriberID != null ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(string));
    
            var casIDParameter = casID != null ?
                new ObjectParameter("CasID", casID) :
                new ObjectParameter("CasID", typeof(string));
    
            var packageIDParameter = packageID != null ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var oldWardNumberParameter = oldWardNumber != null ?
                new ObjectParameter("OldWardNumber", oldWardNumber) :
                new ObjectParameter("OldWardNumber", typeof(string));
    
            var sTBParameter = sTB != null ?
                new ObjectParameter("STB", sTB) :
                new ObjectParameter("STB", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var landlineNumberParameter = landlineNumber != null ?
                new ObjectParameter("LandlineNumber", landlineNumber) :
                new ObjectParameter("LandlineNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var counterIDParameter = counterID != null ?
                new ObjectParameter("CounterID", counterID) :
                new ObjectParameter("CounterID", typeof(string));
    
            var counterNameParameter = counterName != null ?
                new ObjectParameter("CounterName", counterName) :
                new ObjectParameter("CounterName", typeof(string));
    
            var scNumberParameter = scNumber != null ?
                new ObjectParameter("ScNumber", scNumber) :
                new ObjectParameter("ScNumber", typeof(string));
    
            var consumerIDParameter = consumerID != null ?
                new ObjectParameter("ConsumerID", consumerID) :
                new ObjectParameter("ConsumerID", typeof(string));
    
            var subscriptionIDParameter = subscriptionID != null ?
                new ObjectParameter("SubscriptionID", subscriptionID) :
                new ObjectParameter("SubscriptionID", typeof(string));
    
            var subscriptionNameParameter = subscriptionName != null ?
                new ObjectParameter("SubscriptionName", subscriptionName) :
                new ObjectParameter("SubscriptionName", typeof(string));
    
            var acceptanceNoParameter = acceptanceNo != null ?
                new ObjectParameter("AcceptanceNo", acceptanceNo) :
                new ObjectParameter("AcceptanceNo", typeof(string));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth != null ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(string));
    
            var insuranceIDParameter = insuranceID != null ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(string));
    
            var insuranceNameParameter = insuranceName != null ?
                new ObjectParameter("InsuranceName", insuranceName) :
                new ObjectParameter("InsuranceName", typeof(string));
    
            var debitNoteNoParameter = debitNoteNo != null ?
                new ObjectParameter("DebitNoteNo", debitNoteNo) :
                new ObjectParameter("DebitNoteNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var policyTypeParameter = policyType != null ?
                new ObjectParameter("PolicyType", policyType) :
                new ObjectParameter("PolicyType", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var policyCategoryParameter = policyCategory != null ?
                new ObjectParameter("PolicyCategory", policyCategory) :
                new ObjectParameter("PolicyCategory", typeof(string));
    
            var policyDescriptionParameter = policyDescription != null ?
                new ObjectParameter("PolicyDescription", policyDescription) :
                new ObjectParameter("PolicyDescription", typeof(string));
    
            var chitNumberParameter = chitNumber != null ?
                new ObjectParameter("ChitNumber", chitNumber) :
                new ObjectParameter("ChitNumber", typeof(string));
    
            var fiscalYearIDParameter = fiscalYearID != null ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(string));
    
            var fiscalYearValueParameter = fiscalYearValue != null ?
                new ObjectParameter("FiscalYearValue", fiscalYearValue) :
                new ObjectParameter("FiscalYearValue", typeof(string));
    
            var provinceIDParameter = provinceID != null ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(string));
    
            var provinceNameParameter = provinceName != null ?
                new ObjectParameter("ProvinceName", provinceName) :
                new ObjectParameter("ProvinceName", typeof(string));
    
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            var districtValueParameter = districtValue != null ?
                new ObjectParameter("DistrictValue", districtValue) :
                new ObjectParameter("DistrictValue", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var creditCardNumberParameter = creditCardNumber != null ?
                new ObjectParameter("CreditCardNumber", creditCardNumber) :
                new ObjectParameter("CreditCardNumber", typeof(string));
    
            var creditCardOwnerParameter = creditCardOwner != null ?
                new ObjectParameter("CreditCardOwner", creditCardOwner) :
                new ObjectParameter("CreditCardOwner", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var paymentNameParameter = paymentName != null ?
                new ObjectParameter("PaymentName", paymentName) :
                new ObjectParameter("PaymentName", typeof(string));
    
            var isSchedulePaymentParameter = isSchedulePayment.HasValue ?
                new ObjectParameter("IsSchedulePayment", isSchedulePayment) :
                new ObjectParameter("IsSchedulePayment", typeof(bool));
    
            var scheduleDateParameter = scheduleDate != null ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(string));
    
            var paymentCycleParameter = paymentCycle.HasValue ?
                new ObjectParameter("PaymentCycle", paymentCycle) :
                new ObjectParameter("PaymentCycle", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserSavedPayments_Get_Result>("sp_UserSavedPayments_Get", serviceIDParameter, mobileNumberParameter, amountParameter, subscriberIDParameter, casIDParameter, packageIDParameter, packageNameParameter, customerIDParameter, customerNameParameter, oldWardNumberParameter, sTBParameter, userNameParameter, fullNameParameter, landlineNumberParameter, addressParameter, counterIDParameter, counterNameParameter, scNumberParameter, consumerIDParameter, subscriptionIDParameter, subscriptionNameParameter, acceptanceNoParameter, policyNumberParameter, dateOfBirthParameter, insuranceIDParameter, insuranceNameParameter, debitNoteNoParameter, emailParameter, policyTypeParameter, branchParameter, policyCategoryParameter, policyDescriptionParameter, chitNumberParameter, fiscalYearIDParameter, fiscalYearValueParameter, provinceIDParameter, provinceNameParameter, districtIDParameter, districtValueParameter, bankIDParameter, bankNameParameter, creditCardNumberParameter, creditCardOwnerParameter, memberIDParameter, paymentNameParameter, isSchedulePaymentParameter, scheduleDateParameter, paymentCycleParameter, createdByParameter, createdByNameParameter, snoParameter, updatedByParameter, updatedByNameParameter, takeParameter, skipParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, checkCreatedDateParameter, startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int sp_UserSavedPayments_Update(Nullable<int> serviceID, string mobileNumber, Nullable<decimal> amount, string subscriberID, string casID, string packageID, string packageName, string customerID, string customerName, string oldWardNumber, string sTB, string userName, string fullName, string landlineNumber, string address, string counterID, string counterName, string scNumber, string consumerID, string subscriptionID, string subscriptionName, string acceptanceNo, string policyNumber, string dateOfBirth, string insuranceID, string insuranceName, string debitNoteNo, string email, string policyType, string branch, string policyCategory, string policyDescription, string chitNumber, string fiscalYearID, string fiscalYearValue, string provinceID, string provinceName, string districtID, string districtValue, string bankID, string bankName, string creditCardNumber, string creditCardOwner, Nullable<long> memberID, string paymentName, Nullable<bool> isSchedulePayment, string scheduleDate, Nullable<int> paymentCycle, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var subscriberIDParameter = subscriberID != null ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(string));
    
            var casIDParameter = casID != null ?
                new ObjectParameter("CasID", casID) :
                new ObjectParameter("CasID", typeof(string));
    
            var packageIDParameter = packageID != null ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(string));
    
            var packageNameParameter = packageName != null ?
                new ObjectParameter("PackageName", packageName) :
                new ObjectParameter("PackageName", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var oldWardNumberParameter = oldWardNumber != null ?
                new ObjectParameter("OldWardNumber", oldWardNumber) :
                new ObjectParameter("OldWardNumber", typeof(string));
    
            var sTBParameter = sTB != null ?
                new ObjectParameter("STB", sTB) :
                new ObjectParameter("STB", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var landlineNumberParameter = landlineNumber != null ?
                new ObjectParameter("LandlineNumber", landlineNumber) :
                new ObjectParameter("LandlineNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var counterIDParameter = counterID != null ?
                new ObjectParameter("CounterID", counterID) :
                new ObjectParameter("CounterID", typeof(string));
    
            var counterNameParameter = counterName != null ?
                new ObjectParameter("CounterName", counterName) :
                new ObjectParameter("CounterName", typeof(string));
    
            var scNumberParameter = scNumber != null ?
                new ObjectParameter("ScNumber", scNumber) :
                new ObjectParameter("ScNumber", typeof(string));
    
            var consumerIDParameter = consumerID != null ?
                new ObjectParameter("ConsumerID", consumerID) :
                new ObjectParameter("ConsumerID", typeof(string));
    
            var subscriptionIDParameter = subscriptionID != null ?
                new ObjectParameter("SubscriptionID", subscriptionID) :
                new ObjectParameter("SubscriptionID", typeof(string));
    
            var subscriptionNameParameter = subscriptionName != null ?
                new ObjectParameter("SubscriptionName", subscriptionName) :
                new ObjectParameter("SubscriptionName", typeof(string));
    
            var acceptanceNoParameter = acceptanceNo != null ?
                new ObjectParameter("AcceptanceNo", acceptanceNo) :
                new ObjectParameter("AcceptanceNo", typeof(string));
    
            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth != null ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(string));
    
            var insuranceIDParameter = insuranceID != null ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(string));
    
            var insuranceNameParameter = insuranceName != null ?
                new ObjectParameter("InsuranceName", insuranceName) :
                new ObjectParameter("InsuranceName", typeof(string));
    
            var debitNoteNoParameter = debitNoteNo != null ?
                new ObjectParameter("DebitNoteNo", debitNoteNo) :
                new ObjectParameter("DebitNoteNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var policyTypeParameter = policyType != null ?
                new ObjectParameter("PolicyType", policyType) :
                new ObjectParameter("PolicyType", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var policyCategoryParameter = policyCategory != null ?
                new ObjectParameter("PolicyCategory", policyCategory) :
                new ObjectParameter("PolicyCategory", typeof(string));
    
            var policyDescriptionParameter = policyDescription != null ?
                new ObjectParameter("PolicyDescription", policyDescription) :
                new ObjectParameter("PolicyDescription", typeof(string));
    
            var chitNumberParameter = chitNumber != null ?
                new ObjectParameter("ChitNumber", chitNumber) :
                new ObjectParameter("ChitNumber", typeof(string));
    
            var fiscalYearIDParameter = fiscalYearID != null ?
                new ObjectParameter("FiscalYearID", fiscalYearID) :
                new ObjectParameter("FiscalYearID", typeof(string));
    
            var fiscalYearValueParameter = fiscalYearValue != null ?
                new ObjectParameter("FiscalYearValue", fiscalYearValue) :
                new ObjectParameter("FiscalYearValue", typeof(string));
    
            var provinceIDParameter = provinceID != null ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(string));
    
            var provinceNameParameter = provinceName != null ?
                new ObjectParameter("ProvinceName", provinceName) :
                new ObjectParameter("ProvinceName", typeof(string));
    
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            var districtValueParameter = districtValue != null ?
                new ObjectParameter("DistrictValue", districtValue) :
                new ObjectParameter("DistrictValue", typeof(string));
    
            var bankIDParameter = bankID != null ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var creditCardNumberParameter = creditCardNumber != null ?
                new ObjectParameter("CreditCardNumber", creditCardNumber) :
                new ObjectParameter("CreditCardNumber", typeof(string));
    
            var creditCardOwnerParameter = creditCardOwner != null ?
                new ObjectParameter("CreditCardOwner", creditCardOwner) :
                new ObjectParameter("CreditCardOwner", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var paymentNameParameter = paymentName != null ?
                new ObjectParameter("PaymentName", paymentName) :
                new ObjectParameter("PaymentName", typeof(string));
    
            var isSchedulePaymentParameter = isSchedulePayment.HasValue ?
                new ObjectParameter("IsSchedulePayment", isSchedulePayment) :
                new ObjectParameter("IsSchedulePayment", typeof(bool));
    
            var scheduleDateParameter = scheduleDate != null ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(string));
    
            var paymentCycleParameter = paymentCycle.HasValue ?
                new ObjectParameter("PaymentCycle", paymentCycle) :
                new ObjectParameter("PaymentCycle", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserSavedPayments_Update", serviceIDParameter, mobileNumberParameter, amountParameter, subscriberIDParameter, casIDParameter, packageIDParameter, packageNameParameter, customerIDParameter, customerNameParameter, oldWardNumberParameter, sTBParameter, userNameParameter, fullNameParameter, landlineNumberParameter, addressParameter, counterIDParameter, counterNameParameter, scNumberParameter, consumerIDParameter, subscriptionIDParameter, subscriptionNameParameter, acceptanceNoParameter, policyNumberParameter, dateOfBirthParameter, insuranceIDParameter, insuranceNameParameter, debitNoteNoParameter, emailParameter, policyTypeParameter, branchParameter, policyCategoryParameter, policyDescriptionParameter, chitNumberParameter, fiscalYearIDParameter, fiscalYearValueParameter, provinceIDParameter, provinceNameParameter, districtIDParameter, districtValueParameter, bankIDParameter, bankNameParameter, creditCardNumberParameter, creditCardOwnerParameter, memberIDParameter, paymentNameParameter, isSchedulePaymentParameter, scheduleDateParameter, paymentCycleParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_UsersDeviceRegistration_Check_Result> sp_UsersDeviceRegistration_Check(Nullable<long> id, Nullable<int> take, Nullable<int> skip, string iMIE, string deviceCode, string platForm, Nullable<long> memberId, Nullable<int> sequenceNo, string sort, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string ipAddress, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var iMIEParameter = iMIE != null ?
                new ObjectParameter("IMIE", iMIE) :
                new ObjectParameter("IMIE", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var platFormParameter = platForm != null ?
                new ObjectParameter("PlatForm", platForm) :
                new ObjectParameter("PlatForm", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var sequenceNoParameter = sequenceNo.HasValue ?
                new ObjectParameter("SequenceNo", sequenceNo) :
                new ObjectParameter("SequenceNo", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UsersDeviceRegistration_Check_Result>("sp_UsersDeviceRegistration_Check", idParameter, takeParameter, skipParameter, iMIEParameter, deviceCodeParameter, platFormParameter, memberIdParameter, sequenceNoParameter, sortParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, ipAddressParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_UsersDeviceRegistration_Datatable_Result> sp_UsersDeviceRegistration_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> createdBy, string iMIE, string deviceCode, string platForm, Nullable<long> memberId, Nullable<int> sequenceNo, string ipAddress, string createdByName)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var iMIEParameter = iMIE != null ?
                new ObjectParameter("IMIE", iMIE) :
                new ObjectParameter("IMIE", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var platFormParameter = platForm != null ?
                new ObjectParameter("PlatForm", platForm) :
                new ObjectParameter("PlatForm", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var sequenceNoParameter = sequenceNo.HasValue ?
                new ObjectParameter("SequenceNo", sequenceNo) :
                new ObjectParameter("SequenceNo", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UsersDeviceRegistration_Datatable_Result>("sp_UsersDeviceRegistration_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, createdByParameter, iMIEParameter, deviceCodeParameter, platFormParameter, memberIdParameter, sequenceNoParameter, ipAddressParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_UsersDeviceRegistration_Get_Result> sp_UsersDeviceRegistration_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, string iMIE, string deviceCode, string platForm, Nullable<long> memberId, Nullable<int> sequenceNo, string sort, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string ipAddress, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var iMIEParameter = iMIE != null ?
                new ObjectParameter("IMIE", iMIE) :
                new ObjectParameter("IMIE", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var platFormParameter = platForm != null ?
                new ObjectParameter("PlatForm", platForm) :
                new ObjectParameter("PlatForm", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var sequenceNoParameter = sequenceNo.HasValue ?
                new ObjectParameter("SequenceNo", sequenceNo) :
                new ObjectParameter("SequenceNo", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UsersDeviceRegistration_Get_Result>("sp_UsersDeviceRegistration_Get", idParameter, takeParameter, skipParameter, iMIEParameter, deviceCodeParameter, platFormParameter, memberIdParameter, sequenceNoParameter, sortParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, ipAddressParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_UsersKYC_Datatable_Result> sp_UsersKYC_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> createdBy, string name, Nullable<int> isKYCApproved, Nullable<int> roleId, string email, string contactNumber, string refCode, string checkPasswordReset, string checkNotPasswordReset, string checkPin, string checkNotPin, string checkFirstName, string checkNotFirstName, Nullable<int> checkOldAndNewUser, string loginFromDate, string loginToDate, Nullable<long> refId, string refCodeAttempted, string reviewDateFrom, string reviewDateTo, string documentNumber, string deviceId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isKYCApprovedParameter = isKYCApproved.HasValue ?
                new ObjectParameter("IsKYCApproved", isKYCApproved) :
                new ObjectParameter("IsKYCApproved", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var checkPasswordResetParameter = checkPasswordReset != null ?
                new ObjectParameter("CheckPasswordReset", checkPasswordReset) :
                new ObjectParameter("CheckPasswordReset", typeof(string));
    
            var checkNotPasswordResetParameter = checkNotPasswordReset != null ?
                new ObjectParameter("CheckNotPasswordReset", checkNotPasswordReset) :
                new ObjectParameter("CheckNotPasswordReset", typeof(string));
    
            var checkPinParameter = checkPin != null ?
                new ObjectParameter("CheckPin", checkPin) :
                new ObjectParameter("CheckPin", typeof(string));
    
            var checkNotPinParameter = checkNotPin != null ?
                new ObjectParameter("CheckNotPin", checkNotPin) :
                new ObjectParameter("CheckNotPin", typeof(string));
    
            var checkFirstNameParameter = checkFirstName != null ?
                new ObjectParameter("CheckFirstName", checkFirstName) :
                new ObjectParameter("CheckFirstName", typeof(string));
    
            var checkNotFirstNameParameter = checkNotFirstName != null ?
                new ObjectParameter("CheckNotFirstName", checkNotFirstName) :
                new ObjectParameter("CheckNotFirstName", typeof(string));
    
            var checkOldAndNewUserParameter = checkOldAndNewUser.HasValue ?
                new ObjectParameter("CheckOldAndNewUser", checkOldAndNewUser) :
                new ObjectParameter("CheckOldAndNewUser", typeof(int));
    
            var loginFromDateParameter = loginFromDate != null ?
                new ObjectParameter("LoginFromDate", loginFromDate) :
                new ObjectParameter("LoginFromDate", typeof(string));
    
            var loginToDateParameter = loginToDate != null ?
                new ObjectParameter("LoginToDate", loginToDate) :
                new ObjectParameter("LoginToDate", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var refCodeAttemptedParameter = refCodeAttempted != null ?
                new ObjectParameter("RefCodeAttempted", refCodeAttempted) :
                new ObjectParameter("RefCodeAttempted", typeof(string));
    
            var reviewDateFromParameter = reviewDateFrom != null ?
                new ObjectParameter("ReviewDateFrom", reviewDateFrom) :
                new ObjectParameter("ReviewDateFrom", typeof(string));
    
            var reviewDateToParameter = reviewDateTo != null ?
                new ObjectParameter("ReviewDateTo", reviewDateTo) :
                new ObjectParameter("ReviewDateTo", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UsersKYC_Datatable_Result>("sp_UsersKYC_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, createdByParameter, nameParameter, isKYCApprovedParameter, roleIdParameter, emailParameter, contactNumberParameter, refCodeParameter, checkPasswordResetParameter, checkNotPasswordResetParameter, checkPinParameter, checkNotPinParameter, checkFirstNameParameter, checkNotFirstNameParameter, checkOldAndNewUserParameter, loginFromDateParameter, loginToDateParameter, refIdParameter, refCodeAttemptedParameter, reviewDateFromParameter, reviewDateToParameter, documentNumberParameter, deviceIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UsersKYC_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string startDate, string endDate, Nullable<long> createdBy, string name, Nullable<int> isKYCApproved, Nullable<int> roleId, string email, string contactNumber, string refCode, string checkPasswordReset, string checkNotPasswordReset, string checkPin, string checkNotPin, string checkFirstName, string checkNotFirstName, Nullable<int> checkOldAndNewUser, string loginFromDate, string loginToDate, Nullable<long> refId, string refCodeAttempted, string reviewDateFrom, string reviewDateTo, string documentNumber, string deviceId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isKYCApprovedParameter = isKYCApproved.HasValue ?
                new ObjectParameter("IsKYCApproved", isKYCApproved) :
                new ObjectParameter("IsKYCApproved", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var checkPasswordResetParameter = checkPasswordReset != null ?
                new ObjectParameter("CheckPasswordReset", checkPasswordReset) :
                new ObjectParameter("CheckPasswordReset", typeof(string));
    
            var checkNotPasswordResetParameter = checkNotPasswordReset != null ?
                new ObjectParameter("CheckNotPasswordReset", checkNotPasswordReset) :
                new ObjectParameter("CheckNotPasswordReset", typeof(string));
    
            var checkPinParameter = checkPin != null ?
                new ObjectParameter("CheckPin", checkPin) :
                new ObjectParameter("CheckPin", typeof(string));
    
            var checkNotPinParameter = checkNotPin != null ?
                new ObjectParameter("CheckNotPin", checkNotPin) :
                new ObjectParameter("CheckNotPin", typeof(string));
    
            var checkFirstNameParameter = checkFirstName != null ?
                new ObjectParameter("CheckFirstName", checkFirstName) :
                new ObjectParameter("CheckFirstName", typeof(string));
    
            var checkNotFirstNameParameter = checkNotFirstName != null ?
                new ObjectParameter("CheckNotFirstName", checkNotFirstName) :
                new ObjectParameter("CheckNotFirstName", typeof(string));
    
            var checkOldAndNewUserParameter = checkOldAndNewUser.HasValue ?
                new ObjectParameter("CheckOldAndNewUser", checkOldAndNewUser) :
                new ObjectParameter("CheckOldAndNewUser", typeof(int));
    
            var loginFromDateParameter = loginFromDate != null ?
                new ObjectParameter("LoginFromDate", loginFromDate) :
                new ObjectParameter("LoginFromDate", typeof(string));
    
            var loginToDateParameter = loginToDate != null ?
                new ObjectParameter("LoginToDate", loginToDate) :
                new ObjectParameter("LoginToDate", typeof(string));
    
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(long));
    
            var refCodeAttemptedParameter = refCodeAttempted != null ?
                new ObjectParameter("RefCodeAttempted", refCodeAttempted) :
                new ObjectParameter("RefCodeAttempted", typeof(string));
    
            var reviewDateFromParameter = reviewDateFrom != null ?
                new ObjectParameter("ReviewDateFrom", reviewDateFrom) :
                new ObjectParameter("ReviewDateFrom", typeof(string));
    
            var reviewDateToParameter = reviewDateTo != null ?
                new ObjectParameter("ReviewDateTo", reviewDateTo) :
                new ObjectParameter("ReviewDateTo", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UsersKYC_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, startDateParameter, endDateParameter, createdByParameter, nameParameter, isKYCApprovedParameter, roleIdParameter, emailParameter, contactNumberParameter, refCodeParameter, checkPasswordResetParameter, checkNotPasswordResetParameter, checkPinParameter, checkNotPinParameter, checkFirstNameParameter, checkNotFirstNameParameter, checkOldAndNewUserParameter, loginFromDateParameter, loginToDateParameter, refIdParameter, refCodeAttemptedParameter, reviewDateFromParameter, reviewDateToParameter, documentNumberParameter, deviceIdParameter);
        }
    
        public virtual ObjectResult<sp_VendorAPIRequest_Datatable_Result> sp_VendorAPIRequest_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, string startDate, string endDate, Nullable<long> createdBy, Nullable<int> vendorApiType, string memberName, string res_Khalti_Id)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var vendorApiTypeParameter = vendorApiType.HasValue ?
                new ObjectParameter("VendorApiType", vendorApiType) :
                new ObjectParameter("VendorApiType", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var res_Khalti_IdParameter = res_Khalti_Id != null ?
                new ObjectParameter("Res_Khalti_Id", res_Khalti_Id) :
                new ObjectParameter("Res_Khalti_Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VendorAPIRequest_Datatable_Result>("sp_VendorAPIRequest_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, startDateParameter, endDateParameter, createdByParameter, vendorApiTypeParameter, memberNameParameter, res_Khalti_IdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_VendorAPIRequest_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, string startDate, string endDate, Nullable<long> createdBy, Nullable<int> vendorApiType, string memberName, string res_Khalti_Id)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var vendorApiTypeParameter = vendorApiType.HasValue ?
                new ObjectParameter("VendorApiType", vendorApiType) :
                new ObjectParameter("VendorApiType", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var res_Khalti_IdParameter = res_Khalti_Id != null ?
                new ObjectParameter("Res_Khalti_Id", res_Khalti_Id) :
                new ObjectParameter("Res_Khalti_Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_VendorAPIRequest_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, startDateParameter, endDateParameter, createdByParameter, vendorApiTypeParameter, memberNameParameter, res_Khalti_IdParameter);
        }
    
        public virtual ObjectResult<sp_VendorAPIRequest_Get_Result> sp_VendorAPIRequest_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<int> vendorType, string req_Input, string res_Output, string req_Khalti_Input, string res_Khalti_Output, string req_URL, string req_Token, string req_ReferenceNo, string req_Khalti_ReferenceNo, string req_Khalti_URL, string res_Khalti_Status, string res_Khalti_State, string res_Khalti_Message, string res_Khalti_Id, string transactionUniqueId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var req_InputParameter = req_Input != null ?
                new ObjectParameter("Req_Input", req_Input) :
                new ObjectParameter("Req_Input", typeof(string));
    
            var res_OutputParameter = res_Output != null ?
                new ObjectParameter("Res_Output", res_Output) :
                new ObjectParameter("Res_Output", typeof(string));
    
            var req_Khalti_InputParameter = req_Khalti_Input != null ?
                new ObjectParameter("Req_Khalti_Input", req_Khalti_Input) :
                new ObjectParameter("Req_Khalti_Input", typeof(string));
    
            var res_Khalti_OutputParameter = res_Khalti_Output != null ?
                new ObjectParameter("Res_Khalti_Output", res_Khalti_Output) :
                new ObjectParameter("Res_Khalti_Output", typeof(string));
    
            var req_URLParameter = req_URL != null ?
                new ObjectParameter("Req_URL", req_URL) :
                new ObjectParameter("Req_URL", typeof(string));
    
            var req_TokenParameter = req_Token != null ?
                new ObjectParameter("Req_Token", req_Token) :
                new ObjectParameter("Req_Token", typeof(string));
    
            var req_ReferenceNoParameter = req_ReferenceNo != null ?
                new ObjectParameter("Req_ReferenceNo", req_ReferenceNo) :
                new ObjectParameter("Req_ReferenceNo", typeof(string));
    
            var req_Khalti_ReferenceNoParameter = req_Khalti_ReferenceNo != null ?
                new ObjectParameter("Req_Khalti_ReferenceNo", req_Khalti_ReferenceNo) :
                new ObjectParameter("Req_Khalti_ReferenceNo", typeof(string));
    
            var req_Khalti_URLParameter = req_Khalti_URL != null ?
                new ObjectParameter("Req_Khalti_URL", req_Khalti_URL) :
                new ObjectParameter("Req_Khalti_URL", typeof(string));
    
            var res_Khalti_StatusParameter = res_Khalti_Status != null ?
                new ObjectParameter("Res_Khalti_Status", res_Khalti_Status) :
                new ObjectParameter("Res_Khalti_Status", typeof(string));
    
            var res_Khalti_StateParameter = res_Khalti_State != null ?
                new ObjectParameter("Res_Khalti_State", res_Khalti_State) :
                new ObjectParameter("Res_Khalti_State", typeof(string));
    
            var res_Khalti_MessageParameter = res_Khalti_Message != null ?
                new ObjectParameter("Res_Khalti_Message", res_Khalti_Message) :
                new ObjectParameter("Res_Khalti_Message", typeof(string));
    
            var res_Khalti_IdParameter = res_Khalti_Id != null ?
                new ObjectParameter("Res_Khalti_Id", res_Khalti_Id) :
                new ObjectParameter("Res_Khalti_Id", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VendorAPIRequest_Get_Result>("sp_VendorAPIRequest_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, vendorTypeParameter, req_InputParameter, res_OutputParameter, req_Khalti_InputParameter, res_Khalti_OutputParameter, req_URLParameter, req_TokenParameter, req_ReferenceNoParameter, req_Khalti_ReferenceNoParameter, req_Khalti_URLParameter, res_Khalti_StatusParameter, res_Khalti_StateParameter, res_Khalti_MessageParameter, res_Khalti_IdParameter, transactionUniqueIdParameter);
        }
    
        public virtual ObjectResult<sp_verification_Get_Result> sp_verification_Get(Nullable<long> id, Nullable<int> type, Nullable<int> take, Nullable<int> skip, string email, string phoneNumber, string otp, Nullable<int> checkVerified, string phoneExtension, Nullable<int> verificationType, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var otpParameter = otp != null ?
                new ObjectParameter("Otp", otp) :
                new ObjectParameter("Otp", typeof(string));
    
            var checkVerifiedParameter = checkVerified.HasValue ?
                new ObjectParameter("CheckVerified", checkVerified) :
                new ObjectParameter("CheckVerified", typeof(int));
    
            var phoneExtensionParameter = phoneExtension != null ?
                new ObjectParameter("PhoneExtension", phoneExtension) :
                new ObjectParameter("PhoneExtension", typeof(string));
    
            var verificationTypeParameter = verificationType.HasValue ?
                new ObjectParameter("VerificationType", verificationType) :
                new ObjectParameter("VerificationType", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_verification_Get_Result>("sp_verification_Get", idParameter, typeParameter, takeParameter, skipParameter, emailParameter, phoneNumberParameter, otpParameter, checkVerifiedParameter, phoneExtensionParameter, verificationTypeParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter);
        }
    
        public virtual ObjectResult<sp_VotingCandidate_Datatable_Result> sp_VotingCandidate_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string name, Nullable<long> votingCompetitionID, Nullable<int> checkRunning)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var votingCompetitionIDParameter = votingCompetitionID.HasValue ?
                new ObjectParameter("VotingCompetitionID", votingCompetitionID) :
                new ObjectParameter("VotingCompetitionID", typeof(long));
    
            var checkRunningParameter = checkRunning.HasValue ?
                new ObjectParameter("CheckRunning", checkRunning) :
                new ObjectParameter("CheckRunning", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VotingCandidate_Datatable_Result>("sp_VotingCandidate_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, nameParameter, votingCompetitionIDParameter, checkRunningParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_VotingCandidate_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string name, Nullable<long> votingCompetitionID, Nullable<int> checkRunning)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var votingCompetitionIDParameter = votingCompetitionID.HasValue ?
                new ObjectParameter("VotingCompetitionID", votingCompetitionID) :
                new ObjectParameter("VotingCompetitionID", typeof(long));
    
            var checkRunningParameter = checkRunning.HasValue ?
                new ObjectParameter("CheckRunning", checkRunning) :
                new ObjectParameter("CheckRunning", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_VotingCandidate_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, nameParameter, votingCompetitionIDParameter, checkRunningParameter);
        }
    
        public virtual ObjectResult<sp_VotingCandidate_Get_Result> sp_VotingCandidate_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<long> votingCompetitionID, Nullable<int> contentestNo, string name, string emailID, string contactNo, string uniqueId, Nullable<int> checkRunning)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var votingCompetitionIDParameter = votingCompetitionID.HasValue ?
                new ObjectParameter("VotingCompetitionID", votingCompetitionID) :
                new ObjectParameter("VotingCompetitionID", typeof(long));
    
            var contentestNoParameter = contentestNo.HasValue ?
                new ObjectParameter("ContentestNo", contentestNo) :
                new ObjectParameter("ContentestNo", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var uniqueIdParameter = uniqueId != null ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(string));
    
            var checkRunningParameter = checkRunning.HasValue ?
                new ObjectParameter("CheckRunning", checkRunning) :
                new ObjectParameter("CheckRunning", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VotingCandidate_Get_Result>("sp_VotingCandidate_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, votingCompetitionIDParameter, contentestNoParameter, nameParameter, emailIDParameter, contactNoParameter, uniqueIdParameter, checkRunningParameter);
        }
    
        public virtual int sp_VotingCandidate_Rank_Update(Nullable<long> votingCompetitionID)
        {
            var votingCompetitionIDParameter = votingCompetitionID.HasValue ?
                new ObjectParameter("VotingCompetitionID", votingCompetitionID) :
                new ObjectParameter("VotingCompetitionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VotingCandidate_Rank_Update", votingCompetitionIDParameter);
        }
    
        public virtual ObjectResult<sp_VotingCompetition_Datatable_Result> sp_VotingCompetition_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string title, string publishTime, string endTime, string running, string closed, string scheduled)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var publishTimeParameter = publishTime != null ?
                new ObjectParameter("PublishTime", publishTime) :
                new ObjectParameter("PublishTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var closedParameter = closed != null ?
                new ObjectParameter("Closed", closed) :
                new ObjectParameter("Closed", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VotingCompetition_Datatable_Result>("sp_VotingCompetition_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, titleParameter, publishTimeParameter, endTimeParameter, runningParameter, closedParameter, scheduledParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_VotingCompetition_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string title, string publishTime, string endTime, string running, string closed, string scheduled)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var publishTimeParameter = publishTime != null ?
                new ObjectParameter("PublishTime", publishTime) :
                new ObjectParameter("PublishTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var closedParameter = closed != null ?
                new ObjectParameter("Closed", closed) :
                new ObjectParameter("Closed", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_VotingCompetition_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, titleParameter, publishTimeParameter, endTimeParameter, runningParameter, closedParameter, scheduledParameter);
        }
    
        public virtual ObjectResult<sp_VotingCompetition_Get_Result> sp_VotingCompetition_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, string title, string publishTime, string endTime, string running, string closed, string scheduled)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var publishTimeParameter = publishTime != null ?
                new ObjectParameter("PublishTime", publishTime) :
                new ObjectParameter("PublishTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var runningParameter = running != null ?
                new ObjectParameter("Running", running) :
                new ObjectParameter("Running", typeof(string));
    
            var closedParameter = closed != null ?
                new ObjectParameter("Closed", closed) :
                new ObjectParameter("Closed", typeof(string));
    
            var scheduledParameter = scheduled != null ?
                new ObjectParameter("Scheduled", scheduled) :
                new ObjectParameter("Scheduled", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VotingCompetition_Get_Result>("sp_VotingCompetition_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, titleParameter, publishTimeParameter, endTimeParameter, runningParameter, closedParameter, scheduledParameter);
        }
    
        public virtual int sp_VotingList_AddNew(Nullable<long> votingCompetitionId, string votingCandidateUniqueId, string votingCandidateName, Nullable<long> votingPackageID, Nullable<int> noofVotes, Nullable<long> memberID, string memberContactNumber, string memberName, string platForm, string deviceCode, string ipAddress, string transactionUniqueId, Nullable<decimal> amount, Nullable<int> freeVotes, Nullable<int> paidVotes, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive)
        {
            var votingCompetitionIdParameter = votingCompetitionId.HasValue ?
                new ObjectParameter("VotingCompetitionId", votingCompetitionId) :
                new ObjectParameter("VotingCompetitionId", typeof(long));
    
            var votingCandidateUniqueIdParameter = votingCandidateUniqueId != null ?
                new ObjectParameter("VotingCandidateUniqueId", votingCandidateUniqueId) :
                new ObjectParameter("VotingCandidateUniqueId", typeof(string));
    
            var votingCandidateNameParameter = votingCandidateName != null ?
                new ObjectParameter("VotingCandidateName", votingCandidateName) :
                new ObjectParameter("VotingCandidateName", typeof(string));
    
            var votingPackageIDParameter = votingPackageID.HasValue ?
                new ObjectParameter("VotingPackageID", votingPackageID) :
                new ObjectParameter("VotingPackageID", typeof(long));
    
            var noofVotesParameter = noofVotes.HasValue ?
                new ObjectParameter("NoofVotes", noofVotes) :
                new ObjectParameter("NoofVotes", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var platFormParameter = platForm != null ?
                new ObjectParameter("PlatForm", platForm) :
                new ObjectParameter("PlatForm", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var freeVotesParameter = freeVotes.HasValue ?
                new ObjectParameter("FreeVotes", freeVotes) :
                new ObjectParameter("FreeVotes", typeof(int));
    
            var paidVotesParameter = paidVotes.HasValue ?
                new ObjectParameter("PaidVotes", paidVotes) :
                new ObjectParameter("PaidVotes", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VotingList_AddNew", votingCompetitionIdParameter, votingCandidateUniqueIdParameter, votingCandidateNameParameter, votingPackageIDParameter, noofVotesParameter, memberIDParameter, memberContactNumberParameter, memberNameParameter, platFormParameter, deviceCodeParameter, ipAddressParameter, transactionUniqueIdParameter, amountParameter, freeVotesParameter, paidVotesParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_VotingList_Datatable_Result> sp_VotingList_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string memberName, string memberContactNumber, Nullable<long> memberID, string votingCandidateName, Nullable<long> votingCompetitionId, string startDate, string endDate, Nullable<int> checkRunning)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var votingCandidateNameParameter = votingCandidateName != null ?
                new ObjectParameter("VotingCandidateName", votingCandidateName) :
                new ObjectParameter("VotingCandidateName", typeof(string));
    
            var votingCompetitionIdParameter = votingCompetitionId.HasValue ?
                new ObjectParameter("VotingCompetitionId", votingCompetitionId) :
                new ObjectParameter("VotingCompetitionId", typeof(long));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkRunningParameter = checkRunning.HasValue ?
                new ObjectParameter("CheckRunning", checkRunning) :
                new ObjectParameter("CheckRunning", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VotingList_Datatable_Result>("sp_VotingList_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, memberNameParameter, memberContactNumberParameter, memberIDParameter, votingCandidateNameParameter, votingCompetitionIdParameter, startDateParameter, endDateParameter, checkRunningParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_VotingList_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string memberName, string memberContactNumber, Nullable<long> memberID, string votingCandidateName, Nullable<long> votingCompetitionId, string startDate, string endDate, Nullable<int> checkRunning)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var votingCandidateNameParameter = votingCandidateName != null ?
                new ObjectParameter("VotingCandidateName", votingCandidateName) :
                new ObjectParameter("VotingCandidateName", typeof(string));
    
            var votingCompetitionIdParameter = votingCompetitionId.HasValue ?
                new ObjectParameter("VotingCompetitionId", votingCompetitionId) :
                new ObjectParameter("VotingCompetitionId", typeof(long));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkRunningParameter = checkRunning.HasValue ?
                new ObjectParameter("CheckRunning", checkRunning) :
                new ObjectParameter("CheckRunning", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_VotingList_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, memberNameParameter, memberContactNumberParameter, memberIDParameter, votingCandidateNameParameter, votingCompetitionIdParameter, startDateParameter, endDateParameter, checkRunningParameter);
        }
    
        public virtual ObjectResult<sp_VotingList_Get_Result> sp_VotingList_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<long> votingCompetitionID, string votingCandidateName, string votingCandidateUniqueId, Nullable<int> noofVotes, Nullable<long> memberID, string memberContactNumber, string memberName, Nullable<long> votingPackageID, string transactionUniqueId, string startDate, string endDate, Nullable<int> checkRunning)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var votingCompetitionIDParameter = votingCompetitionID.HasValue ?
                new ObjectParameter("VotingCompetitionID", votingCompetitionID) :
                new ObjectParameter("VotingCompetitionID", typeof(long));
    
            var votingCandidateNameParameter = votingCandidateName != null ?
                new ObjectParameter("VotingCandidateName", votingCandidateName) :
                new ObjectParameter("VotingCandidateName", typeof(string));
    
            var votingCandidateUniqueIdParameter = votingCandidateUniqueId != null ?
                new ObjectParameter("VotingCandidateUniqueId", votingCandidateUniqueId) :
                new ObjectParameter("VotingCandidateUniqueId", typeof(string));
    
            var noofVotesParameter = noofVotes.HasValue ?
                new ObjectParameter("NoofVotes", noofVotes) :
                new ObjectParameter("NoofVotes", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var votingPackageIDParameter = votingPackageID.HasValue ?
                new ObjectParameter("VotingPackageID", votingPackageID) :
                new ObjectParameter("VotingPackageID", typeof(long));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkRunningParameter = checkRunning.HasValue ?
                new ObjectParameter("CheckRunning", checkRunning) :
                new ObjectParameter("CheckRunning", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VotingList_Get_Result>("sp_VotingList_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, votingCompetitionIDParameter, votingCandidateNameParameter, votingCandidateUniqueIdParameter, noofVotesParameter, memberIDParameter, memberContactNumberParameter, memberNameParameter, votingPackageIDParameter, transactionUniqueIdParameter, startDateParameter, endDateParameter, checkRunningParameter);
        }
    
        public virtual int sp_VotingList_Update(Nullable<long> votingCompetitionId, string votingCandidateUniqueId, string votingCandidateName, Nullable<long> votingPackageID, Nullable<int> noofVotes, Nullable<long> memberID, string memberContactNumber, string memberName, string platForm, string deviceCode, string ipAddress, string transactionUniqueId, Nullable<decimal> amount, Nullable<int> freeVotes, Nullable<int> paidVotes, Nullable<long> createdBy, string createdByName, string sno, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<long> updatedBy, string updatedByName, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> id)
        {
            var votingCompetitionIdParameter = votingCompetitionId.HasValue ?
                new ObjectParameter("VotingCompetitionId", votingCompetitionId) :
                new ObjectParameter("VotingCompetitionId", typeof(long));
    
            var votingCandidateUniqueIdParameter = votingCandidateUniqueId != null ?
                new ObjectParameter("VotingCandidateUniqueId", votingCandidateUniqueId) :
                new ObjectParameter("VotingCandidateUniqueId", typeof(string));
    
            var votingCandidateNameParameter = votingCandidateName != null ?
                new ObjectParameter("VotingCandidateName", votingCandidateName) :
                new ObjectParameter("VotingCandidateName", typeof(string));
    
            var votingPackageIDParameter = votingPackageID.HasValue ?
                new ObjectParameter("VotingPackageID", votingPackageID) :
                new ObjectParameter("VotingPackageID", typeof(long));
    
            var noofVotesParameter = noofVotes.HasValue ?
                new ObjectParameter("NoofVotes", noofVotes) :
                new ObjectParameter("NoofVotes", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var platFormParameter = platForm != null ?
                new ObjectParameter("PlatForm", platForm) :
                new ObjectParameter("PlatForm", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var freeVotesParameter = freeVotes.HasValue ?
                new ObjectParameter("FreeVotes", freeVotes) :
                new ObjectParameter("FreeVotes", typeof(int));
    
            var paidVotesParameter = paidVotes.HasValue ?
                new ObjectParameter("PaidVotes", paidVotes) :
                new ObjectParameter("PaidVotes", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var snoParameter = sno != null ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VotingList_Update", votingCompetitionIdParameter, votingCandidateUniqueIdParameter, votingCandidateNameParameter, votingPackageIDParameter, noofVotesParameter, memberIDParameter, memberContactNumberParameter, memberNameParameter, platFormParameter, deviceCodeParameter, ipAddressParameter, transactionUniqueIdParameter, amountParameter, freeVotesParameter, paidVotesParameter, createdByParameter, createdByNameParameter, snoParameter, createdDateParameter, updatedDateParameter, updatedByParameter, updatedByNameParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, idParameter);
        }
    
        public virtual ObjectResult<sp_VotingListDump_Datatable_Result> sp_VotingListDump_Datatable(Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, string memberName, string memberContactNumber, Nullable<long> memberID, string votingCandidateName, Nullable<long> votingCompetitionId, string startDate, string endDate, Nullable<int> checkRunning)
        {
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var memberContactNumberParameter = memberContactNumber != null ?
                new ObjectParameter("MemberContactNumber", memberContactNumber) :
                new ObjectParameter("MemberContactNumber", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(long));
    
            var votingCandidateNameParameter = votingCandidateName != null ?
                new ObjectParameter("VotingCandidateName", votingCandidateName) :
                new ObjectParameter("VotingCandidateName", typeof(string));
    
            var votingCompetitionIdParameter = votingCompetitionId.HasValue ?
                new ObjectParameter("VotingCompetitionId", votingCompetitionId) :
                new ObjectParameter("VotingCompetitionId", typeof(long));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkRunningParameter = checkRunning.HasValue ?
                new ObjectParameter("CheckRunning", checkRunning) :
                new ObjectParameter("CheckRunning", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VotingListDump_Datatable_Result>("sp_VotingListDump_Datatable", checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, memberNameParameter, memberContactNumberParameter, memberIDParameter, votingCandidateNameParameter, votingCompetitionIdParameter, startDateParameter, endDateParameter, checkRunningParameter);
        }
    
        public virtual ObjectResult<sp_VotingPackages_Datatable_Result> sp_VotingPackages_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, Nullable<long> votingCompetitionId, Nullable<int> checkRunning)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var votingCompetitionIdParameter = votingCompetitionId.HasValue ?
                new ObjectParameter("VotingCompetitionId", votingCompetitionId) :
                new ObjectParameter("VotingCompetitionId", typeof(long));
    
            var checkRunningParameter = checkRunning.HasValue ?
                new ObjectParameter("CheckRunning", checkRunning) :
                new ObjectParameter("CheckRunning", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VotingPackages_Datatable_Result>("sp_VotingPackages_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, votingCompetitionIdParameter, checkRunningParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_VotingPackages_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, Nullable<int> id, Nullable<long> votingCompetitionId)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var votingCompetitionIdParameter = votingCompetitionId.HasValue ?
                new ObjectParameter("VotingCompetitionId", votingCompetitionId) :
                new ObjectParameter("VotingCompetitionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_VotingPackages_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, idParameter, votingCompetitionIdParameter);
        }
    
        public virtual ObjectResult<sp_VotingPackages_Get_Result> sp_VotingPackages_Get(Nullable<long> id, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<long> createdBy, string createdByName, Nullable<long> updatedBy, string updatedByName, Nullable<long> votingCompetitionID, Nullable<int> noOfVotes, Nullable<decimal> amount, Nullable<int> checkRunning)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(long));
    
            var updatedByNameParameter = updatedByName != null ?
                new ObjectParameter("UpdatedByName", updatedByName) :
                new ObjectParameter("UpdatedByName", typeof(string));
    
            var votingCompetitionIDParameter = votingCompetitionID.HasValue ?
                new ObjectParameter("VotingCompetitionID", votingCompetitionID) :
                new ObjectParameter("VotingCompetitionID", typeof(long));
    
            var noOfVotesParameter = noOfVotes.HasValue ?
                new ObjectParameter("NoOfVotes", noOfVotes) :
                new ObjectParameter("NoOfVotes", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var checkRunningParameter = checkRunning.HasValue ?
                new ObjectParameter("CheckRunning", checkRunning) :
                new ObjectParameter("CheckRunning", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VotingPackages_Get_Result>("sp_VotingPackages_Get", idParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, createdByParameter, createdByNameParameter, updatedByParameter, updatedByNameParameter, votingCompetitionIDParameter, noOfVotesParameter, amountParameter, checkRunningParameter);
        }
    
        public virtual int sp_VotingSum_Get(Nullable<long> votingCompetitionID)
        {
            var votingCompetitionIDParameter = votingCompetitionID.HasValue ?
                new ObjectParameter("VotingCompetitionID", votingCompetitionID) :
                new ObjectParameter("VotingCompetitionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VotingSum_Get", votingCompetitionIDParameter);
        }
    
        public virtual ObjectResult<sp_WalletEStatement_Get_Result> sp_WalletEStatement_Get(Nullable<long> memberId, Nullable<int> take, Nullable<int> skip, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string year, string month, string startDate, string endDate)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletEStatement_Get_Result>("sp_WalletEStatement_Get", memberIdParameter, takeParameter, skipParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, yearParameter, monthParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_WalletTransactions_AddNew(Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string remarks, string description, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> createdBy, string createdByName, string cardNumber, string expiryDate, string cardType, string contactNumber, string recieverName, Nullable<long> recieverId, string recieverContactNumber, Nullable<decimal> cashBack, Nullable<decimal> serviceCharge, Nullable<decimal> rewardPoint, string gatewayStatus, Nullable<long> updateBy, string updateByName, Nullable<int> transferType, string platform, string deviceCode, Nullable<decimal> netAmount, string recieverBankCode, string recieverAccountNo, string recieverBranch, string senderBankCode, string senderAccountNo, string senderBranch, string batchTransactionId, string txnInstructionId, string customerID, string ipAddress, string responseCode, Nullable<int> walletType, string purpose, string senderBankName, string recieverBankName, string senderBranchName, string recieverBranchName, Nullable<int> vendorType, string vendorResponsePin, string vendorResponseSerial, Nullable<decimal> receiverAmount, string refCode)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverIdParameter = recieverId.HasValue ?
                new ObjectParameter("RecieverId", recieverId) :
                new ObjectParameter("RecieverId", typeof(long));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var cashBackParameter = cashBack.HasValue ?
                new ObjectParameter("CashBack", cashBack) :
                new ObjectParameter("CashBack", typeof(decimal));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var rewardPointParameter = rewardPoint.HasValue ?
                new ObjectParameter("RewardPoint", rewardPoint) :
                new ObjectParameter("RewardPoint", typeof(decimal));
    
            var gatewayStatusParameter = gatewayStatus != null ?
                new ObjectParameter("GatewayStatus", gatewayStatus) :
                new ObjectParameter("GatewayStatus", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(long));
    
            var updateByNameParameter = updateByName != null ?
                new ObjectParameter("UpdateByName", updateByName) :
                new ObjectParameter("UpdateByName", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var recieverBankCodeParameter = recieverBankCode != null ?
                new ObjectParameter("RecieverBankCode", recieverBankCode) :
                new ObjectParameter("RecieverBankCode", typeof(string));
    
            var recieverAccountNoParameter = recieverAccountNo != null ?
                new ObjectParameter("RecieverAccountNo", recieverAccountNo) :
                new ObjectParameter("RecieverAccountNo", typeof(string));
    
            var recieverBranchParameter = recieverBranch != null ?
                new ObjectParameter("RecieverBranch", recieverBranch) :
                new ObjectParameter("RecieverBranch", typeof(string));
    
            var senderBankCodeParameter = senderBankCode != null ?
                new ObjectParameter("SenderBankCode", senderBankCode) :
                new ObjectParameter("SenderBankCode", typeof(string));
    
            var senderAccountNoParameter = senderAccountNo != null ?
                new ObjectParameter("SenderAccountNo", senderAccountNo) :
                new ObjectParameter("SenderAccountNo", typeof(string));
    
            var senderBranchParameter = senderBranch != null ?
                new ObjectParameter("SenderBranch", senderBranch) :
                new ObjectParameter("SenderBranch", typeof(string));
    
            var batchTransactionIdParameter = batchTransactionId != null ?
                new ObjectParameter("BatchTransactionId", batchTransactionId) :
                new ObjectParameter("BatchTransactionId", typeof(string));
    
            var txnInstructionIdParameter = txnInstructionId != null ?
                new ObjectParameter("TxnInstructionId", txnInstructionId) :
                new ObjectParameter("TxnInstructionId", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var senderBankNameParameter = senderBankName != null ?
                new ObjectParameter("SenderBankName", senderBankName) :
                new ObjectParameter("SenderBankName", typeof(string));
    
            var recieverBankNameParameter = recieverBankName != null ?
                new ObjectParameter("RecieverBankName", recieverBankName) :
                new ObjectParameter("RecieverBankName", typeof(string));
    
            var senderBranchNameParameter = senderBranchName != null ?
                new ObjectParameter("SenderBranchName", senderBranchName) :
                new ObjectParameter("SenderBranchName", typeof(string));
    
            var recieverBranchNameParameter = recieverBranchName != null ?
                new ObjectParameter("RecieverBranchName", recieverBranchName) :
                new ObjectParameter("RecieverBranchName", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var vendorResponsePinParameter = vendorResponsePin != null ?
                new ObjectParameter("VendorResponsePin", vendorResponsePin) :
                new ObjectParameter("VendorResponsePin", typeof(string));
    
            var vendorResponseSerialParameter = vendorResponseSerial != null ?
                new ObjectParameter("VendorResponseSerial", vendorResponseSerial) :
                new ObjectParameter("VendorResponseSerial", typeof(string));
    
            var receiverAmountParameter = receiverAmount.HasValue ?
                new ObjectParameter("ReceiverAmount", receiverAmount) :
                new ObjectParameter("ReceiverAmount", typeof(decimal));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WalletTransactions_AddNew", memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, remarksParameter, descriptionParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, createdByParameter, createdByNameParameter, cardNumberParameter, expiryDateParameter, cardTypeParameter, contactNumberParameter, recieverNameParameter, recieverIdParameter, recieverContactNumberParameter, cashBackParameter, serviceChargeParameter, rewardPointParameter, gatewayStatusParameter, updateByParameter, updateByNameParameter, transferTypeParameter, platformParameter, deviceCodeParameter, netAmountParameter, recieverBankCodeParameter, recieverAccountNoParameter, recieverBranchParameter, senderBankCodeParameter, senderAccountNoParameter, senderBranchParameter, batchTransactionIdParameter, txnInstructionIdParameter, customerIDParameter, ipAddressParameter, responseCodeParameter, walletTypeParameter, purposeParameter, senderBankNameParameter, recieverBankNameParameter, senderBranchNameParameter, recieverBranchNameParameter, vendorTypeParameter, vendorResponsePinParameter, vendorResponseSerialParameter, receiverAmountParameter, refCodeParameter);
        }
    
        public virtual int sp_WalletTransactions_AddNew_New(Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string remarks, string description, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> createdBy, string createdByName, string cardNumber, string expiryDate, string cardType, string contactNumber, string recieverName, Nullable<long> recieverId, string recieverContactNumber, Nullable<decimal> cashBack, Nullable<decimal> serviceCharge, Nullable<decimal> rewardPoint, string gatewayStatus, Nullable<long> updateBy, string updateByName, Nullable<int> transferType, string platform, string deviceCode, Nullable<decimal> netAmount, string recieverBankCode, string recieverAccountNo, string recieverBranch, string senderBankCode, string senderAccountNo, string senderBranch, string batchTransactionId, string txnInstructionId, string customerID, string ipAddress, string responseCode, Nullable<int> walletType, string purpose, string senderBankName, string recieverBankName, string senderBranchName, string recieverBranchName, Nullable<int> vendorType, string vendorResponsePin, string vendorResponseSerial, Nullable<decimal> receiverAmount, string refCode, Nullable<decimal> rewardPointBalance, Nullable<decimal> transactionAmount, string vendorJsonLookup, Nullable<long> merchantMemberId, string couponCode, Nullable<decimal> couponDiscount, string merchantId, string merchantOrganization, string walletImage, string additionalInfo1, string additionalInfo2)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverIdParameter = recieverId.HasValue ?
                new ObjectParameter("RecieverId", recieverId) :
                new ObjectParameter("RecieverId", typeof(long));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var cashBackParameter = cashBack.HasValue ?
                new ObjectParameter("CashBack", cashBack) :
                new ObjectParameter("CashBack", typeof(decimal));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var rewardPointParameter = rewardPoint.HasValue ?
                new ObjectParameter("RewardPoint", rewardPoint) :
                new ObjectParameter("RewardPoint", typeof(decimal));
    
            var gatewayStatusParameter = gatewayStatus != null ?
                new ObjectParameter("GatewayStatus", gatewayStatus) :
                new ObjectParameter("GatewayStatus", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(long));
    
            var updateByNameParameter = updateByName != null ?
                new ObjectParameter("UpdateByName", updateByName) :
                new ObjectParameter("UpdateByName", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var recieverBankCodeParameter = recieverBankCode != null ?
                new ObjectParameter("RecieverBankCode", recieverBankCode) :
                new ObjectParameter("RecieverBankCode", typeof(string));
    
            var recieverAccountNoParameter = recieverAccountNo != null ?
                new ObjectParameter("RecieverAccountNo", recieverAccountNo) :
                new ObjectParameter("RecieverAccountNo", typeof(string));
    
            var recieverBranchParameter = recieverBranch != null ?
                new ObjectParameter("RecieverBranch", recieverBranch) :
                new ObjectParameter("RecieverBranch", typeof(string));
    
            var senderBankCodeParameter = senderBankCode != null ?
                new ObjectParameter("SenderBankCode", senderBankCode) :
                new ObjectParameter("SenderBankCode", typeof(string));
    
            var senderAccountNoParameter = senderAccountNo != null ?
                new ObjectParameter("SenderAccountNo", senderAccountNo) :
                new ObjectParameter("SenderAccountNo", typeof(string));
    
            var senderBranchParameter = senderBranch != null ?
                new ObjectParameter("SenderBranch", senderBranch) :
                new ObjectParameter("SenderBranch", typeof(string));
    
            var batchTransactionIdParameter = batchTransactionId != null ?
                new ObjectParameter("BatchTransactionId", batchTransactionId) :
                new ObjectParameter("BatchTransactionId", typeof(string));
    
            var txnInstructionIdParameter = txnInstructionId != null ?
                new ObjectParameter("TxnInstructionId", txnInstructionId) :
                new ObjectParameter("TxnInstructionId", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var senderBankNameParameter = senderBankName != null ?
                new ObjectParameter("SenderBankName", senderBankName) :
                new ObjectParameter("SenderBankName", typeof(string));
    
            var recieverBankNameParameter = recieverBankName != null ?
                new ObjectParameter("RecieverBankName", recieverBankName) :
                new ObjectParameter("RecieverBankName", typeof(string));
    
            var senderBranchNameParameter = senderBranchName != null ?
                new ObjectParameter("SenderBranchName", senderBranchName) :
                new ObjectParameter("SenderBranchName", typeof(string));
    
            var recieverBranchNameParameter = recieverBranchName != null ?
                new ObjectParameter("RecieverBranchName", recieverBranchName) :
                new ObjectParameter("RecieverBranchName", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var vendorResponsePinParameter = vendorResponsePin != null ?
                new ObjectParameter("VendorResponsePin", vendorResponsePin) :
                new ObjectParameter("VendorResponsePin", typeof(string));
    
            var vendorResponseSerialParameter = vendorResponseSerial != null ?
                new ObjectParameter("VendorResponseSerial", vendorResponseSerial) :
                new ObjectParameter("VendorResponseSerial", typeof(string));
    
            var receiverAmountParameter = receiverAmount.HasValue ?
                new ObjectParameter("ReceiverAmount", receiverAmount) :
                new ObjectParameter("ReceiverAmount", typeof(decimal));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var rewardPointBalanceParameter = rewardPointBalance.HasValue ?
                new ObjectParameter("RewardPointBalance", rewardPointBalance) :
                new ObjectParameter("RewardPointBalance", typeof(decimal));
    
            var transactionAmountParameter = transactionAmount.HasValue ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(decimal));
    
            var vendorJsonLookupParameter = vendorJsonLookup != null ?
                new ObjectParameter("VendorJsonLookup", vendorJsonLookup) :
                new ObjectParameter("VendorJsonLookup", typeof(string));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponDiscountParameter = couponDiscount.HasValue ?
                new ObjectParameter("CouponDiscount", couponDiscount) :
                new ObjectParameter("CouponDiscount", typeof(decimal));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var walletImageParameter = walletImage != null ?
                new ObjectParameter("WalletImage", walletImage) :
                new ObjectParameter("WalletImage", typeof(string));
    
            var additionalInfo1Parameter = additionalInfo1 != null ?
                new ObjectParameter("AdditionalInfo1", additionalInfo1) :
                new ObjectParameter("AdditionalInfo1", typeof(string));
    
            var additionalInfo2Parameter = additionalInfo2 != null ?
                new ObjectParameter("AdditionalInfo2", additionalInfo2) :
                new ObjectParameter("AdditionalInfo2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WalletTransactions_AddNew_New", memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, remarksParameter, descriptionParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, createdByParameter, createdByNameParameter, cardNumberParameter, expiryDateParameter, cardTypeParameter, contactNumberParameter, recieverNameParameter, recieverIdParameter, recieverContactNumberParameter, cashBackParameter, serviceChargeParameter, rewardPointParameter, gatewayStatusParameter, updateByParameter, updateByNameParameter, transferTypeParameter, platformParameter, deviceCodeParameter, netAmountParameter, recieverBankCodeParameter, recieverAccountNoParameter, recieverBranchParameter, senderBankCodeParameter, senderAccountNoParameter, senderBranchParameter, batchTransactionIdParameter, txnInstructionIdParameter, customerIDParameter, ipAddressParameter, responseCodeParameter, walletTypeParameter, purposeParameter, senderBankNameParameter, recieverBankNameParameter, senderBranchNameParameter, recieverBranchNameParameter, vendorTypeParameter, vendorResponsePinParameter, vendorResponseSerialParameter, receiverAmountParameter, refCodeParameter, rewardPointBalanceParameter, transactionAmountParameter, vendorJsonLookupParameter, merchantMemberIdParameter, couponCodeParameter, couponDiscountParameter, merchantIdParameter, merchantOrganizationParameter, walletImageParameter, additionalInfo1Parameter, additionalInfo2Parameter);
        }
    
        public virtual ObjectResult<sp_WalletTransactions_AddNew_New_1_Result> sp_WalletTransactions_AddNew_New_1(Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string remarks, string description, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> createdBy, string createdByName, string cardNumber, string expiryDate, string cardType, string contactNumber, string recieverName, Nullable<long> recieverId, string recieverContactNumber, Nullable<decimal> cashBack, Nullable<decimal> serviceCharge, Nullable<decimal> rewardPoint, string gatewayStatus, Nullable<long> updateBy, string updateByName, Nullable<int> transferType, string platform, string deviceCode, Nullable<decimal> netAmount, string recieverBankCode, string recieverAccountNo, string recieverBranch, string senderBankCode, string senderAccountNo, string senderBranch, string batchTransactionId, string txnInstructionId, string customerID, string ipAddress, string responseCode, Nullable<int> walletType, string purpose, string senderBankName, string recieverBankName, string senderBranchName, string recieverBranchName, Nullable<int> vendorType, string vendorResponsePin, string vendorResponseSerial, Nullable<decimal> receiverAmount, string refCode, Nullable<decimal> rewardPointBalance, Nullable<decimal> transactionAmount, string vendorJsonLookup, Nullable<long> merchantMemberId, string couponCode, Nullable<decimal> couponDiscount, string merchantId, string merchantOrganization, string walletImage, string additionalInfo1, string additionalInfo2)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverIdParameter = recieverId.HasValue ?
                new ObjectParameter("RecieverId", recieverId) :
                new ObjectParameter("RecieverId", typeof(long));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var cashBackParameter = cashBack.HasValue ?
                new ObjectParameter("CashBack", cashBack) :
                new ObjectParameter("CashBack", typeof(decimal));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var rewardPointParameter = rewardPoint.HasValue ?
                new ObjectParameter("RewardPoint", rewardPoint) :
                new ObjectParameter("RewardPoint", typeof(decimal));
    
            var gatewayStatusParameter = gatewayStatus != null ?
                new ObjectParameter("GatewayStatus", gatewayStatus) :
                new ObjectParameter("GatewayStatus", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(long));
    
            var updateByNameParameter = updateByName != null ?
                new ObjectParameter("UpdateByName", updateByName) :
                new ObjectParameter("UpdateByName", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var recieverBankCodeParameter = recieverBankCode != null ?
                new ObjectParameter("RecieverBankCode", recieverBankCode) :
                new ObjectParameter("RecieverBankCode", typeof(string));
    
            var recieverAccountNoParameter = recieverAccountNo != null ?
                new ObjectParameter("RecieverAccountNo", recieverAccountNo) :
                new ObjectParameter("RecieverAccountNo", typeof(string));
    
            var recieverBranchParameter = recieverBranch != null ?
                new ObjectParameter("RecieverBranch", recieverBranch) :
                new ObjectParameter("RecieverBranch", typeof(string));
    
            var senderBankCodeParameter = senderBankCode != null ?
                new ObjectParameter("SenderBankCode", senderBankCode) :
                new ObjectParameter("SenderBankCode", typeof(string));
    
            var senderAccountNoParameter = senderAccountNo != null ?
                new ObjectParameter("SenderAccountNo", senderAccountNo) :
                new ObjectParameter("SenderAccountNo", typeof(string));
    
            var senderBranchParameter = senderBranch != null ?
                new ObjectParameter("SenderBranch", senderBranch) :
                new ObjectParameter("SenderBranch", typeof(string));
    
            var batchTransactionIdParameter = batchTransactionId != null ?
                new ObjectParameter("BatchTransactionId", batchTransactionId) :
                new ObjectParameter("BatchTransactionId", typeof(string));
    
            var txnInstructionIdParameter = txnInstructionId != null ?
                new ObjectParameter("TxnInstructionId", txnInstructionId) :
                new ObjectParameter("TxnInstructionId", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var senderBankNameParameter = senderBankName != null ?
                new ObjectParameter("SenderBankName", senderBankName) :
                new ObjectParameter("SenderBankName", typeof(string));
    
            var recieverBankNameParameter = recieverBankName != null ?
                new ObjectParameter("RecieverBankName", recieverBankName) :
                new ObjectParameter("RecieverBankName", typeof(string));
    
            var senderBranchNameParameter = senderBranchName != null ?
                new ObjectParameter("SenderBranchName", senderBranchName) :
                new ObjectParameter("SenderBranchName", typeof(string));
    
            var recieverBranchNameParameter = recieverBranchName != null ?
                new ObjectParameter("RecieverBranchName", recieverBranchName) :
                new ObjectParameter("RecieverBranchName", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var vendorResponsePinParameter = vendorResponsePin != null ?
                new ObjectParameter("VendorResponsePin", vendorResponsePin) :
                new ObjectParameter("VendorResponsePin", typeof(string));
    
            var vendorResponseSerialParameter = vendorResponseSerial != null ?
                new ObjectParameter("VendorResponseSerial", vendorResponseSerial) :
                new ObjectParameter("VendorResponseSerial", typeof(string));
    
            var receiverAmountParameter = receiverAmount.HasValue ?
                new ObjectParameter("ReceiverAmount", receiverAmount) :
                new ObjectParameter("ReceiverAmount", typeof(decimal));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var rewardPointBalanceParameter = rewardPointBalance.HasValue ?
                new ObjectParameter("RewardPointBalance", rewardPointBalance) :
                new ObjectParameter("RewardPointBalance", typeof(decimal));
    
            var transactionAmountParameter = transactionAmount.HasValue ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(decimal));
    
            var vendorJsonLookupParameter = vendorJsonLookup != null ?
                new ObjectParameter("VendorJsonLookup", vendorJsonLookup) :
                new ObjectParameter("VendorJsonLookup", typeof(string));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponDiscountParameter = couponDiscount.HasValue ?
                new ObjectParameter("CouponDiscount", couponDiscount) :
                new ObjectParameter("CouponDiscount", typeof(decimal));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var walletImageParameter = walletImage != null ?
                new ObjectParameter("WalletImage", walletImage) :
                new ObjectParameter("WalletImage", typeof(string));
    
            var additionalInfo1Parameter = additionalInfo1 != null ?
                new ObjectParameter("AdditionalInfo1", additionalInfo1) :
                new ObjectParameter("AdditionalInfo1", typeof(string));
    
            var additionalInfo2Parameter = additionalInfo2 != null ?
                new ObjectParameter("AdditionalInfo2", additionalInfo2) :
                new ObjectParameter("AdditionalInfo2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletTransactions_AddNew_New_1_Result>("sp_WalletTransactions_AddNew_New_1", memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, remarksParameter, descriptionParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, createdByParameter, createdByNameParameter, cardNumberParameter, expiryDateParameter, cardTypeParameter, contactNumberParameter, recieverNameParameter, recieverIdParameter, recieverContactNumberParameter, cashBackParameter, serviceChargeParameter, rewardPointParameter, gatewayStatusParameter, updateByParameter, updateByNameParameter, transferTypeParameter, platformParameter, deviceCodeParameter, netAmountParameter, recieverBankCodeParameter, recieverAccountNoParameter, recieverBranchParameter, senderBankCodeParameter, senderAccountNoParameter, senderBranchParameter, batchTransactionIdParameter, txnInstructionIdParameter, customerIDParameter, ipAddressParameter, responseCodeParameter, walletTypeParameter, purposeParameter, senderBankNameParameter, recieverBankNameParameter, senderBranchNameParameter, recieverBranchNameParameter, vendorTypeParameter, vendorResponsePinParameter, vendorResponseSerialParameter, receiverAmountParameter, refCodeParameter, rewardPointBalanceParameter, transactionAmountParameter, vendorJsonLookupParameter, merchantMemberIdParameter, couponCodeParameter, couponDiscountParameter, merchantIdParameter, merchantOrganizationParameter, walletImageParameter, additionalInfo1Parameter, additionalInfo2Parameter);
        }
    
        public virtual int sp_WalletTransactions_CashBack(Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string remarks, string description, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> createdBy, string createdByName, string cardNumber, string expiryDate, string cardType, string contactNumber, string recieverName, Nullable<long> recieverId, string recieverContactNumber, Nullable<decimal> cashBack, Nullable<decimal> serviceCharge, Nullable<decimal> rewardPoint, string gatewayStatus, Nullable<long> updateBy, string updateByName, Nullable<int> transferType, string platform, string deviceCode, Nullable<decimal> netAmount, string recieverBankCode, string recieverAccountNo, string recieverBranch, string senderBankCode, string senderAccountNo, string senderBranch, string batchTransactionId, string txnInstructionId, string customerID, string ipAddress, string responseCode, Nullable<int> walletType, string purpose, string senderBankName, string recieverBankName, string senderBranchName, string recieverBranchName, Nullable<int> vendorType, string vendorResponsePin, string vendorResponseSerial, Nullable<decimal> receiverAmount, string refCode, Nullable<decimal> rewardPointBalance, Nullable<decimal> transactionAmount, string vendorJsonLookup, Nullable<long> merchantMemberId, string couponCode, Nullable<decimal> couponDiscount, string merchantId, string merchantOrganization, string walletImage, string additionalInfo1, string additionalInfo2)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverIdParameter = recieverId.HasValue ?
                new ObjectParameter("RecieverId", recieverId) :
                new ObjectParameter("RecieverId", typeof(long));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var cashBackParameter = cashBack.HasValue ?
                new ObjectParameter("CashBack", cashBack) :
                new ObjectParameter("CashBack", typeof(decimal));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var rewardPointParameter = rewardPoint.HasValue ?
                new ObjectParameter("RewardPoint", rewardPoint) :
                new ObjectParameter("RewardPoint", typeof(decimal));
    
            var gatewayStatusParameter = gatewayStatus != null ?
                new ObjectParameter("GatewayStatus", gatewayStatus) :
                new ObjectParameter("GatewayStatus", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(long));
    
            var updateByNameParameter = updateByName != null ?
                new ObjectParameter("UpdateByName", updateByName) :
                new ObjectParameter("UpdateByName", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var recieverBankCodeParameter = recieverBankCode != null ?
                new ObjectParameter("RecieverBankCode", recieverBankCode) :
                new ObjectParameter("RecieverBankCode", typeof(string));
    
            var recieverAccountNoParameter = recieverAccountNo != null ?
                new ObjectParameter("RecieverAccountNo", recieverAccountNo) :
                new ObjectParameter("RecieverAccountNo", typeof(string));
    
            var recieverBranchParameter = recieverBranch != null ?
                new ObjectParameter("RecieverBranch", recieverBranch) :
                new ObjectParameter("RecieverBranch", typeof(string));
    
            var senderBankCodeParameter = senderBankCode != null ?
                new ObjectParameter("SenderBankCode", senderBankCode) :
                new ObjectParameter("SenderBankCode", typeof(string));
    
            var senderAccountNoParameter = senderAccountNo != null ?
                new ObjectParameter("SenderAccountNo", senderAccountNo) :
                new ObjectParameter("SenderAccountNo", typeof(string));
    
            var senderBranchParameter = senderBranch != null ?
                new ObjectParameter("SenderBranch", senderBranch) :
                new ObjectParameter("SenderBranch", typeof(string));
    
            var batchTransactionIdParameter = batchTransactionId != null ?
                new ObjectParameter("BatchTransactionId", batchTransactionId) :
                new ObjectParameter("BatchTransactionId", typeof(string));
    
            var txnInstructionIdParameter = txnInstructionId != null ?
                new ObjectParameter("TxnInstructionId", txnInstructionId) :
                new ObjectParameter("TxnInstructionId", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var senderBankNameParameter = senderBankName != null ?
                new ObjectParameter("SenderBankName", senderBankName) :
                new ObjectParameter("SenderBankName", typeof(string));
    
            var recieverBankNameParameter = recieverBankName != null ?
                new ObjectParameter("RecieverBankName", recieverBankName) :
                new ObjectParameter("RecieverBankName", typeof(string));
    
            var senderBranchNameParameter = senderBranchName != null ?
                new ObjectParameter("SenderBranchName", senderBranchName) :
                new ObjectParameter("SenderBranchName", typeof(string));
    
            var recieverBranchNameParameter = recieverBranchName != null ?
                new ObjectParameter("RecieverBranchName", recieverBranchName) :
                new ObjectParameter("RecieverBranchName", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var vendorResponsePinParameter = vendorResponsePin != null ?
                new ObjectParameter("VendorResponsePin", vendorResponsePin) :
                new ObjectParameter("VendorResponsePin", typeof(string));
    
            var vendorResponseSerialParameter = vendorResponseSerial != null ?
                new ObjectParameter("VendorResponseSerial", vendorResponseSerial) :
                new ObjectParameter("VendorResponseSerial", typeof(string));
    
            var receiverAmountParameter = receiverAmount.HasValue ?
                new ObjectParameter("ReceiverAmount", receiverAmount) :
                new ObjectParameter("ReceiverAmount", typeof(decimal));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var rewardPointBalanceParameter = rewardPointBalance.HasValue ?
                new ObjectParameter("RewardPointBalance", rewardPointBalance) :
                new ObjectParameter("RewardPointBalance", typeof(decimal));
    
            var transactionAmountParameter = transactionAmount.HasValue ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(decimal));
    
            var vendorJsonLookupParameter = vendorJsonLookup != null ?
                new ObjectParameter("VendorJsonLookup", vendorJsonLookup) :
                new ObjectParameter("VendorJsonLookup", typeof(string));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponDiscountParameter = couponDiscount.HasValue ?
                new ObjectParameter("CouponDiscount", couponDiscount) :
                new ObjectParameter("CouponDiscount", typeof(decimal));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var walletImageParameter = walletImage != null ?
                new ObjectParameter("WalletImage", walletImage) :
                new ObjectParameter("WalletImage", typeof(string));
    
            var additionalInfo1Parameter = additionalInfo1 != null ?
                new ObjectParameter("AdditionalInfo1", additionalInfo1) :
                new ObjectParameter("AdditionalInfo1", typeof(string));
    
            var additionalInfo2Parameter = additionalInfo2 != null ?
                new ObjectParameter("AdditionalInfo2", additionalInfo2) :
                new ObjectParameter("AdditionalInfo2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WalletTransactions_CashBack", memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, remarksParameter, descriptionParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, createdByParameter, createdByNameParameter, cardNumberParameter, expiryDateParameter, cardTypeParameter, contactNumberParameter, recieverNameParameter, recieverIdParameter, recieverContactNumberParameter, cashBackParameter, serviceChargeParameter, rewardPointParameter, gatewayStatusParameter, updateByParameter, updateByNameParameter, transferTypeParameter, platformParameter, deviceCodeParameter, netAmountParameter, recieverBankCodeParameter, recieverAccountNoParameter, recieverBranchParameter, senderBankCodeParameter, senderAccountNoParameter, senderBranchParameter, batchTransactionIdParameter, txnInstructionIdParameter, customerIDParameter, ipAddressParameter, responseCodeParameter, walletTypeParameter, purposeParameter, senderBankNameParameter, recieverBankNameParameter, senderBranchNameParameter, recieverBranchNameParameter, vendorTypeParameter, vendorResponsePinParameter, vendorResponseSerialParameter, receiverAmountParameter, refCodeParameter, rewardPointBalanceParameter, transactionAmountParameter, vendorJsonLookupParameter, merchantMemberIdParameter, couponCodeParameter, couponDiscountParameter, merchantIdParameter, merchantOrganizationParameter, walletImageParameter, additionalInfo1Parameter, additionalInfo2Parameter);
        }
    
        public virtual ObjectResult<sp_WalletTransactions_Count_Result> sp_WalletTransactions_Count(Nullable<long> id, Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<int> take, Nullable<int> skip, string startDate, string endDate, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string checkCreatedDate, Nullable<long> createdBy, string createdByName, string year, string threeMonth, string sixMonth, Nullable<int> walletType, Nullable<int> recieverId, string searchText, Nullable<int> customerID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var threeMonthParameter = threeMonth != null ?
                new ObjectParameter("ThreeMonth", threeMonth) :
                new ObjectParameter("ThreeMonth", typeof(string));
    
            var sixMonthParameter = sixMonth != null ?
                new ObjectParameter("SixMonth", sixMonth) :
                new ObjectParameter("SixMonth", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var recieverIdParameter = recieverId.HasValue ?
                new ObjectParameter("RecieverId", recieverId) :
                new ObjectParameter("RecieverId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletTransactions_Count_Result>("sp_WalletTransactions_Count", idParameter, memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, takeParameter, skipParameter, startDateParameter, endDateParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, checkCreatedDateParameter, createdByParameter, createdByNameParameter, yearParameter, threeMonthParameter, sixMonthParameter, walletTypeParameter, recieverIdParameter, searchTextParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<sp_WalletTransactions_Datatable_Result> sp_WalletTransactions_Datatable(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, Nullable<int> type, string typeMultiple, string startDate, string endDate, Nullable<long> createdBy, Nullable<int> status, Nullable<int> sign, string memberName, Nullable<decimal> amount, Nullable<decimal> currentBalance, string vendorTransactionId, string reference, Nullable<int> transferType, string contactNumber, string recieverName, string recieverContactNumber, Nullable<int> walletType, string today, string weekly, string monthly, string refCode, string parentTransactionId, Nullable<int> vendorType, string customerID, string walletTypeMultiple, string couponCode, Nullable<decimal> couponDiscount, Nullable<long> merchantMemberId, Nullable<int> isMerchantTxn, string merchantId, string merchantOrganization, Nullable<int> roleId, Nullable<int> checkFavourite)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var typeMultipleParameter = typeMultiple != null ?
                new ObjectParameter("TypeMultiple", typeMultiple) :
                new ObjectParameter("TypeMultiple", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var walletTypeMultipleParameter = walletTypeMultiple != null ?
                new ObjectParameter("WalletTypeMultiple", walletTypeMultiple) :
                new ObjectParameter("WalletTypeMultiple", typeof(string));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponDiscountParameter = couponDiscount.HasValue ?
                new ObjectParameter("CouponDiscount", couponDiscount) :
                new ObjectParameter("CouponDiscount", typeof(decimal));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var isMerchantTxnParameter = isMerchantTxn.HasValue ?
                new ObjectParameter("IsMerchantTxn", isMerchantTxn) :
                new ObjectParameter("IsMerchantTxn", typeof(int));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var checkFavouriteParameter = checkFavourite.HasValue ?
                new ObjectParameter("CheckFavourite", checkFavourite) :
                new ObjectParameter("CheckFavourite", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletTransactions_Datatable_Result>("sp_WalletTransactions_Datatable", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, typeParameter, typeMultipleParameter, startDateParameter, endDateParameter, createdByParameter, statusParameter, signParameter, memberNameParameter, amountParameter, currentBalanceParameter, vendorTransactionIdParameter, referenceParameter, transferTypeParameter, contactNumberParameter, recieverNameParameter, recieverContactNumberParameter, walletTypeParameter, todayParameter, weeklyParameter, monthlyParameter, refCodeParameter, parentTransactionIdParameter, vendorTypeParameter, customerIDParameter, walletTypeMultipleParameter, couponCodeParameter, couponDiscountParameter, merchantMemberIdParameter, isMerchantTxnParameter, merchantIdParameter, merchantOrganizationParameter, roleIdParameter, checkFavouriteParameter);
        }
    
        public virtual ObjectResult<sp_WalletTransactions_DatatableCounter_Result> sp_WalletTransactions_DatatableCounter(string sortColumn, string sortOrder, Nullable<int> offsetValue, Nullable<int> pagingSize, string searchText, Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, Nullable<int> type, string typeMultiple, string startDate, string endDate, Nullable<long> createdBy, Nullable<int> status, Nullable<int> sign, string memberName, Nullable<decimal> amount, Nullable<decimal> currentBalance, string vendorTransactionId, string reference, Nullable<int> transferType, string contactNumber, string recieverName, string recieverContactNumber, Nullable<int> walletType, string today, string weekly, string monthly, string refCode, string parentTransactionId, Nullable<int> vendorType, string customerID, string walletTypeMultiple, string couponCode, Nullable<decimal> couponDiscount, Nullable<long> merchantMemberId, Nullable<int> isMerchantTxn, string merchantId, string merchantOrganization, Nullable<int> roleId, Nullable<int> checkFavourite)
        {
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            var offsetValueParameter = offsetValue.HasValue ?
                new ObjectParameter("OffsetValue", offsetValue) :
                new ObjectParameter("OffsetValue", typeof(int));
    
            var pagingSizeParameter = pagingSize.HasValue ?
                new ObjectParameter("PagingSize", pagingSize) :
                new ObjectParameter("PagingSize", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var typeMultipleParameter = typeMultiple != null ?
                new ObjectParameter("TypeMultiple", typeMultiple) :
                new ObjectParameter("TypeMultiple", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var walletTypeMultipleParameter = walletTypeMultiple != null ?
                new ObjectParameter("WalletTypeMultiple", walletTypeMultiple) :
                new ObjectParameter("WalletTypeMultiple", typeof(string));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponDiscountParameter = couponDiscount.HasValue ?
                new ObjectParameter("CouponDiscount", couponDiscount) :
                new ObjectParameter("CouponDiscount", typeof(decimal));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var isMerchantTxnParameter = isMerchantTxn.HasValue ?
                new ObjectParameter("IsMerchantTxn", isMerchantTxn) :
                new ObjectParameter("IsMerchantTxn", typeof(int));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var checkFavouriteParameter = checkFavourite.HasValue ?
                new ObjectParameter("CheckFavourite", checkFavourite) :
                new ObjectParameter("CheckFavourite", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletTransactions_DatatableCounter_Result>("sp_WalletTransactions_DatatableCounter", sortColumnParameter, sortOrderParameter, offsetValueParameter, pagingSizeParameter, searchTextParameter, memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, typeParameter, typeMultipleParameter, startDateParameter, endDateParameter, createdByParameter, statusParameter, signParameter, memberNameParameter, amountParameter, currentBalanceParameter, vendorTransactionIdParameter, referenceParameter, transferTypeParameter, contactNumberParameter, recieverNameParameter, recieverContactNumberParameter, walletTypeParameter, todayParameter, weeklyParameter, monthlyParameter, refCodeParameter, parentTransactionIdParameter, vendorTypeParameter, customerIDParameter, walletTypeMultipleParameter, couponCodeParameter, couponDiscountParameter, merchantMemberIdParameter, isMerchantTxnParameter, merchantIdParameter, merchantOrganizationParameter, roleIdParameter, checkFavouriteParameter);
        }
    
        public virtual ObjectResult<sp_WalletTransactions_Get_Result> sp_WalletTransactions_Get(Nullable<long> id, Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<int> take, Nullable<int> skip, string startDate, string endDate, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string checkCreatedDate, Nullable<long> createdBy, string createdByName, string year, string threeMonth, string sixMonth, Nullable<int> walletType, Nullable<long> recieverId, Nullable<int> transferType, string contactNumber, string recieverName, string recieverContactNumber, string today, string weekly, string monthly, string yesterday, string refCode, string searchText, string customerID, Nullable<int> vendorType, string couponCode, Nullable<decimal> couponDiscount, string merchantId, string merchantOrganization, Nullable<int> checkFavourite)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var threeMonthParameter = threeMonth != null ?
                new ObjectParameter("ThreeMonth", threeMonth) :
                new ObjectParameter("ThreeMonth", typeof(string));
    
            var sixMonthParameter = sixMonth != null ?
                new ObjectParameter("SixMonth", sixMonth) :
                new ObjectParameter("SixMonth", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var recieverIdParameter = recieverId.HasValue ?
                new ObjectParameter("RecieverId", recieverId) :
                new ObjectParameter("RecieverId", typeof(long));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var yesterdayParameter = yesterday != null ?
                new ObjectParameter("Yesterday", yesterday) :
                new ObjectParameter("Yesterday", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponDiscountParameter = couponDiscount.HasValue ?
                new ObjectParameter("CouponDiscount", couponDiscount) :
                new ObjectParameter("CouponDiscount", typeof(decimal));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var checkFavouriteParameter = checkFavourite.HasValue ?
                new ObjectParameter("CheckFavourite", checkFavourite) :
                new ObjectParameter("CheckFavourite", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletTransactions_Get_Result>("sp_WalletTransactions_Get", idParameter, memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, takeParameter, skipParameter, startDateParameter, endDateParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, checkCreatedDateParameter, createdByParameter, createdByNameParameter, yearParameter, threeMonthParameter, sixMonthParameter, walletTypeParameter, recieverIdParameter, transferTypeParameter, contactNumberParameter, recieverNameParameter, recieverContactNumberParameter, todayParameter, weeklyParameter, monthlyParameter, yesterdayParameter, refCodeParameter, searchTextParameter, customerIDParameter, vendorTypeParameter, couponCodeParameter, couponDiscountParameter, merchantIdParameter, merchantOrganizationParameter, checkFavouriteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_WalletTransactions_Get_CheckExists(Nullable<long> id, Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string parentTransactionId, string reference, Nullable<int> take, Nullable<int> skip, string startDate, string endDate, Nullable<int> checkApprovedByAdmin, Nullable<int> checkDelete, Nullable<int> checkActive, string checkCreatedDate, Nullable<long> createdBy, string createdByName, string year, string threeMonth, string sixMonth, Nullable<int> walletType, Nullable<long> recieverId, Nullable<int> transferType, string contactNumber, string recieverName, string recieverContactNumber, string today, string weekly, string monthly, string yesterday, string refCode, string searchText, string customerID, Nullable<int> vendorType, string couponCode, Nullable<decimal> couponDiscount, string merchantId, string merchantOrganization, Nullable<int> checkFavourite)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkCreatedDateParameter = checkCreatedDate != null ?
                new ObjectParameter("CheckCreatedDate", checkCreatedDate) :
                new ObjectParameter("CheckCreatedDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var threeMonthParameter = threeMonth != null ?
                new ObjectParameter("ThreeMonth", threeMonth) :
                new ObjectParameter("ThreeMonth", typeof(string));
    
            var sixMonthParameter = sixMonth != null ?
                new ObjectParameter("SixMonth", sixMonth) :
                new ObjectParameter("SixMonth", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var recieverIdParameter = recieverId.HasValue ?
                new ObjectParameter("RecieverId", recieverId) :
                new ObjectParameter("RecieverId", typeof(long));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var yesterdayParameter = yesterday != null ?
                new ObjectParameter("Yesterday", yesterday) :
                new ObjectParameter("Yesterday", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponDiscountParameter = couponDiscount.HasValue ?
                new ObjectParameter("CouponDiscount", couponDiscount) :
                new ObjectParameter("CouponDiscount", typeof(decimal));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var checkFavouriteParameter = checkFavourite.HasValue ?
                new ObjectParameter("CheckFavourite", checkFavourite) :
                new ObjectParameter("CheckFavourite", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_WalletTransactions_Get_CheckExists", idParameter, memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, parentTransactionIdParameter, referenceParameter, takeParameter, skipParameter, startDateParameter, endDateParameter, checkApprovedByAdminParameter, checkDeleteParameter, checkActiveParameter, checkCreatedDateParameter, createdByParameter, createdByNameParameter, yearParameter, threeMonthParameter, sixMonthParameter, walletTypeParameter, recieverIdParameter, transferTypeParameter, contactNumberParameter, recieverNameParameter, recieverContactNumberParameter, todayParameter, weeklyParameter, monthlyParameter, yesterdayParameter, refCodeParameter, searchTextParameter, customerIDParameter, vendorTypeParameter, couponCodeParameter, couponDiscountParameter, merchantIdParameter, merchantOrganizationParameter, checkFavouriteParameter);
        }
    
        public virtual ObjectResult<sp_WalletTransactions_ReferandEarnDump_Get_Result> sp_WalletTransactions_ReferandEarnDump_Get(Nullable<int> type, Nullable<int> transferType, string startDate, string endDate)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletTransactions_ReferandEarnDump_Get_Result>("sp_WalletTransactions_ReferandEarnDump_Get", typeParameter, transferTypeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_WalletTransactions_Update(Nullable<long> id, Nullable<long> memberId, string memberName, Nullable<decimal> amount, Nullable<int> sign, Nullable<int> type, string remarks, string description, string transactionUniqueId, Nullable<decimal> currentBalance, Nullable<int> status, string vendorTransactionId, string reference, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<bool> isDeleted, Nullable<bool> isApprovedByAdmin, Nullable<bool> isActive, Nullable<long> createdBy, string createdByName, string cardType, string cardNumber, string expiryDate, string contactNumber, string recieverName, Nullable<long> recieverId, string recieverContactNumber, Nullable<decimal> cashBack, Nullable<decimal> serviceCharge, Nullable<decimal> rewardPoint, string gatewayStatus, Nullable<long> updateBy, string updateByName, Nullable<int> transferType, string platform, string deviceCode, Nullable<decimal> netAmount, string recieverBankCode, string recieverAccountNo, string recieverBranch, string senderBankCode, string senderAccountNo, string senderBranch, string batchTransactionId, string txnInstructionId, string customerID, string ipAddress, string parentTransactionId, string responseCode, Nullable<int> walletType, string purpose, string senderBankName, string recieverBankName, string senderBranchName, string recieverBranchName, Nullable<int> vendorType, string vendorResponsePin, string vendorResponseSerial, Nullable<decimal> receiverAmount, string refCode, Nullable<decimal> rewardPointBalance, Nullable<decimal> transactionAmount, string vendorJsonLookup, Nullable<long> merchantMemberId, string couponCode, Nullable<decimal> couponDiscount, string merchantId, string merchantOrganization, string walletImage, string additionalInfo1, string additionalInfo2)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isApprovedByAdminParameter = isApprovedByAdmin.HasValue ?
                new ObjectParameter("IsApprovedByAdmin", isApprovedByAdmin) :
                new ObjectParameter("IsApprovedByAdmin", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdByNameParameter = createdByName != null ?
                new ObjectParameter("CreatedByName", createdByName) :
                new ObjectParameter("CreatedByName", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverIdParameter = recieverId.HasValue ?
                new ObjectParameter("RecieverId", recieverId) :
                new ObjectParameter("RecieverId", typeof(long));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var cashBackParameter = cashBack.HasValue ?
                new ObjectParameter("CashBack", cashBack) :
                new ObjectParameter("CashBack", typeof(decimal));
    
            var serviceChargeParameter = serviceCharge.HasValue ?
                new ObjectParameter("ServiceCharge", serviceCharge) :
                new ObjectParameter("ServiceCharge", typeof(decimal));
    
            var rewardPointParameter = rewardPoint.HasValue ?
                new ObjectParameter("RewardPoint", rewardPoint) :
                new ObjectParameter("RewardPoint", typeof(decimal));
    
            var gatewayStatusParameter = gatewayStatus != null ?
                new ObjectParameter("GatewayStatus", gatewayStatus) :
                new ObjectParameter("GatewayStatus", typeof(string));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(long));
    
            var updateByNameParameter = updateByName != null ?
                new ObjectParameter("UpdateByName", updateByName) :
                new ObjectParameter("UpdateByName", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var deviceCodeParameter = deviceCode != null ?
                new ObjectParameter("DeviceCode", deviceCode) :
                new ObjectParameter("DeviceCode", typeof(string));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var recieverBankCodeParameter = recieverBankCode != null ?
                new ObjectParameter("RecieverBankCode", recieverBankCode) :
                new ObjectParameter("RecieverBankCode", typeof(string));
    
            var recieverAccountNoParameter = recieverAccountNo != null ?
                new ObjectParameter("RecieverAccountNo", recieverAccountNo) :
                new ObjectParameter("RecieverAccountNo", typeof(string));
    
            var recieverBranchParameter = recieverBranch != null ?
                new ObjectParameter("RecieverBranch", recieverBranch) :
                new ObjectParameter("RecieverBranch", typeof(string));
    
            var senderBankCodeParameter = senderBankCode != null ?
                new ObjectParameter("SenderBankCode", senderBankCode) :
                new ObjectParameter("SenderBankCode", typeof(string));
    
            var senderAccountNoParameter = senderAccountNo != null ?
                new ObjectParameter("SenderAccountNo", senderAccountNo) :
                new ObjectParameter("SenderAccountNo", typeof(string));
    
            var senderBranchParameter = senderBranch != null ?
                new ObjectParameter("SenderBranch", senderBranch) :
                new ObjectParameter("SenderBranch", typeof(string));
    
            var batchTransactionIdParameter = batchTransactionId != null ?
                new ObjectParameter("BatchTransactionId", batchTransactionId) :
                new ObjectParameter("BatchTransactionId", typeof(string));
    
            var txnInstructionIdParameter = txnInstructionId != null ?
                new ObjectParameter("TxnInstructionId", txnInstructionId) :
                new ObjectParameter("TxnInstructionId", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var responseCodeParameter = responseCode != null ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var senderBankNameParameter = senderBankName != null ?
                new ObjectParameter("SenderBankName", senderBankName) :
                new ObjectParameter("SenderBankName", typeof(string));
    
            var recieverBankNameParameter = recieverBankName != null ?
                new ObjectParameter("RecieverBankName", recieverBankName) :
                new ObjectParameter("RecieverBankName", typeof(string));
    
            var senderBranchNameParameter = senderBranchName != null ?
                new ObjectParameter("SenderBranchName", senderBranchName) :
                new ObjectParameter("SenderBranchName", typeof(string));
    
            var recieverBranchNameParameter = recieverBranchName != null ?
                new ObjectParameter("RecieverBranchName", recieverBranchName) :
                new ObjectParameter("RecieverBranchName", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var vendorResponsePinParameter = vendorResponsePin != null ?
                new ObjectParameter("VendorResponsePin", vendorResponsePin) :
                new ObjectParameter("VendorResponsePin", typeof(string));
    
            var vendorResponseSerialParameter = vendorResponseSerial != null ?
                new ObjectParameter("VendorResponseSerial", vendorResponseSerial) :
                new ObjectParameter("VendorResponseSerial", typeof(string));
    
            var receiverAmountParameter = receiverAmount.HasValue ?
                new ObjectParameter("ReceiverAmount", receiverAmount) :
                new ObjectParameter("ReceiverAmount", typeof(decimal));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var rewardPointBalanceParameter = rewardPointBalance.HasValue ?
                new ObjectParameter("RewardPointBalance", rewardPointBalance) :
                new ObjectParameter("RewardPointBalance", typeof(decimal));
    
            var transactionAmountParameter = transactionAmount.HasValue ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(decimal));
    
            var vendorJsonLookupParameter = vendorJsonLookup != null ?
                new ObjectParameter("VendorJsonLookup", vendorJsonLookup) :
                new ObjectParameter("VendorJsonLookup", typeof(string));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponDiscountParameter = couponDiscount.HasValue ?
                new ObjectParameter("CouponDiscount", couponDiscount) :
                new ObjectParameter("CouponDiscount", typeof(decimal));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var walletImageParameter = walletImage != null ?
                new ObjectParameter("WalletImage", walletImage) :
                new ObjectParameter("WalletImage", typeof(string));
    
            var additionalInfo1Parameter = additionalInfo1 != null ?
                new ObjectParameter("AdditionalInfo1", additionalInfo1) :
                new ObjectParameter("AdditionalInfo1", typeof(string));
    
            var additionalInfo2Parameter = additionalInfo2 != null ?
                new ObjectParameter("AdditionalInfo2", additionalInfo2) :
                new ObjectParameter("AdditionalInfo2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WalletTransactions_Update", idParameter, memberIdParameter, memberNameParameter, amountParameter, signParameter, typeParameter, remarksParameter, descriptionParameter, transactionUniqueIdParameter, currentBalanceParameter, statusParameter, vendorTransactionIdParameter, referenceParameter, createdDateParameter, updatedDateParameter, isDeletedParameter, isApprovedByAdminParameter, isActiveParameter, createdByParameter, createdByNameParameter, cardTypeParameter, cardNumberParameter, expiryDateParameter, contactNumberParameter, recieverNameParameter, recieverIdParameter, recieverContactNumberParameter, cashBackParameter, serviceChargeParameter, rewardPointParameter, gatewayStatusParameter, updateByParameter, updateByNameParameter, transferTypeParameter, platformParameter, deviceCodeParameter, netAmountParameter, recieverBankCodeParameter, recieverAccountNoParameter, recieverBranchParameter, senderBankCodeParameter, senderAccountNoParameter, senderBranchParameter, batchTransactionIdParameter, txnInstructionIdParameter, customerIDParameter, ipAddressParameter, parentTransactionIdParameter, responseCodeParameter, walletTypeParameter, purposeParameter, senderBankNameParameter, recieverBankNameParameter, senderBranchNameParameter, recieverBranchNameParameter, vendorTypeParameter, vendorResponsePinParameter, vendorResponseSerialParameter, receiverAmountParameter, refCodeParameter, rewardPointBalanceParameter, transactionAmountParameter, vendorJsonLookupParameter, merchantMemberIdParameter, couponCodeParameter, couponDiscountParameter, merchantIdParameter, merchantOrganizationParameter, walletImageParameter, additionalInfo1Parameter, additionalInfo2Parameter);
        }
    
        public virtual ObjectResult<sp_WalletTransactionsAllMerchantTxn_Get_Result> sp_WalletTransactionsAllMerchantTxn_Get(Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, Nullable<int> type, string typeMultiple, string startDate, string endDate, Nullable<int> status, Nullable<int> sign, string memberName, string vendorTransactionId, string reference, Nullable<int> transferType, string contactNumber, string recieverName, string recieverContactNumber, Nullable<int> walletType, string today, string weekly, string monthly, string refCode, string parentTransactionId, Nullable<int> vendorType, string customerID, string walletTypeMultiple, string couponCode, Nullable<decimal> couponDiscount, Nullable<long> merchantMemberId, Nullable<int> isMerchantTxn, string merchantId, string merchantOrganization, Nullable<int> roleId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var typeMultipleParameter = typeMultiple != null ?
                new ObjectParameter("TypeMultiple", typeMultiple) :
                new ObjectParameter("TypeMultiple", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var walletTypeMultipleParameter = walletTypeMultiple != null ?
                new ObjectParameter("WalletTypeMultiple", walletTypeMultiple) :
                new ObjectParameter("WalletTypeMultiple", typeof(string));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponDiscountParameter = couponDiscount.HasValue ?
                new ObjectParameter("CouponDiscount", couponDiscount) :
                new ObjectParameter("CouponDiscount", typeof(decimal));
    
            var merchantMemberIdParameter = merchantMemberId.HasValue ?
                new ObjectParameter("MerchantMemberId", merchantMemberId) :
                new ObjectParameter("MerchantMemberId", typeof(long));
    
            var isMerchantTxnParameter = isMerchantTxn.HasValue ?
                new ObjectParameter("IsMerchantTxn", isMerchantTxn) :
                new ObjectParameter("IsMerchantTxn", typeof(int));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletTransactionsAllMerchantTxn_Get_Result>("sp_WalletTransactionsAllMerchantTxn_Get", memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, typeParameter, typeMultipleParameter, startDateParameter, endDateParameter, statusParameter, signParameter, memberNameParameter, vendorTransactionIdParameter, referenceParameter, transferTypeParameter, contactNumberParameter, recieverNameParameter, recieverContactNumberParameter, walletTypeParameter, todayParameter, weeklyParameter, monthlyParameter, refCodeParameter, parentTransactionIdParameter, vendorTypeParameter, customerIDParameter, walletTypeMultipleParameter, couponCodeParameter, couponDiscountParameter, merchantMemberIdParameter, isMerchantTxnParameter, merchantIdParameter, merchantOrganizationParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<sp_WalletTransactionsAllService_Get_Result> sp_WalletTransactionsAllService_Get(Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, Nullable<int> type, string typeMultiple, string startDate, string endDate, Nullable<int> status, Nullable<int> sign, string memberName, string vendorTransactionId, string reference, Nullable<int> transferType, string contactNumber, string recieverName, string recieverContactNumber, Nullable<int> walletType, string today, string weekly, string monthly, string refCode, string parentTransactionId, Nullable<int> vendorType, string customerID, string merchantId, string merchantOrganization)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var typeMultipleParameter = typeMultiple != null ?
                new ObjectParameter("TypeMultiple", typeMultiple) :
                new ObjectParameter("TypeMultiple", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var merchantOrganizationParameter = merchantOrganization != null ?
                new ObjectParameter("MerchantOrganization", merchantOrganization) :
                new ObjectParameter("MerchantOrganization", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletTransactionsAllService_Get_Result>("sp_WalletTransactionsAllService_Get", memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, typeParameter, typeMultipleParameter, startDateParameter, endDateParameter, statusParameter, signParameter, memberNameParameter, vendorTransactionIdParameter, referenceParameter, transferTypeParameter, contactNumberParameter, recieverNameParameter, recieverContactNumberParameter, walletTypeParameter, todayParameter, weeklyParameter, monthlyParameter, refCodeParameter, parentTransactionIdParameter, vendorTypeParameter, customerIDParameter, merchantIdParameter, merchantOrganizationParameter);
        }
    
        public virtual ObjectResult<sp_WalletTransactionsAllTxn_Get_Result> sp_WalletTransactionsAllTxn_Get(Nullable<long> memberId, Nullable<int> checkDelete, Nullable<int> checkActive, Nullable<int> checkApprovedByAdmin, string transactionUniqueId, Nullable<int> type, string typeMultiple, string startDate, string endDate, Nullable<int> status, Nullable<int> sign, string memberName, string vendorTransactionId, string reference, Nullable<int> transferType, string contactNumber, string recieverName, string recieverContactNumber, Nullable<int> walletType, string today, string weekly, string monthly, string refCode, string parentTransactionId, Nullable<int> vendorType, string customerID, string walletTypeMultiple)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(long));
    
            var checkDeleteParameter = checkDelete.HasValue ?
                new ObjectParameter("CheckDelete", checkDelete) :
                new ObjectParameter("CheckDelete", typeof(int));
    
            var checkActiveParameter = checkActive.HasValue ?
                new ObjectParameter("CheckActive", checkActive) :
                new ObjectParameter("CheckActive", typeof(int));
    
            var checkApprovedByAdminParameter = checkApprovedByAdmin.HasValue ?
                new ObjectParameter("CheckApprovedByAdmin", checkApprovedByAdmin) :
                new ObjectParameter("CheckApprovedByAdmin", typeof(int));
    
            var transactionUniqueIdParameter = transactionUniqueId != null ?
                new ObjectParameter("TransactionUniqueId", transactionUniqueId) :
                new ObjectParameter("TransactionUniqueId", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var typeMultipleParameter = typeMultiple != null ?
                new ObjectParameter("TypeMultiple", typeMultiple) :
                new ObjectParameter("TypeMultiple", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var signParameter = sign.HasValue ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(int));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var vendorTransactionIdParameter = vendorTransactionId != null ?
                new ObjectParameter("VendorTransactionId", vendorTransactionId) :
                new ObjectParameter("VendorTransactionId", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var transferTypeParameter = transferType.HasValue ?
                new ObjectParameter("TransferType", transferType) :
                new ObjectParameter("TransferType", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var recieverNameParameter = recieverName != null ?
                new ObjectParameter("RecieverName", recieverName) :
                new ObjectParameter("RecieverName", typeof(string));
    
            var recieverContactNumberParameter = recieverContactNumber != null ?
                new ObjectParameter("RecieverContactNumber", recieverContactNumber) :
                new ObjectParameter("RecieverContactNumber", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            var todayParameter = today != null ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(string));
    
            var weeklyParameter = weekly != null ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(string));
    
            var monthlyParameter = monthly != null ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(string));
    
            var refCodeParameter = refCode != null ?
                new ObjectParameter("RefCode", refCode) :
                new ObjectParameter("RefCode", typeof(string));
    
            var parentTransactionIdParameter = parentTransactionId != null ?
                new ObjectParameter("ParentTransactionId", parentTransactionId) :
                new ObjectParameter("ParentTransactionId", typeof(string));
    
            var vendorTypeParameter = vendorType.HasValue ?
                new ObjectParameter("VendorType", vendorType) :
                new ObjectParameter("VendorType", typeof(int));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var walletTypeMultipleParameter = walletTypeMultiple != null ?
                new ObjectParameter("WalletTypeMultiple", walletTypeMultiple) :
                new ObjectParameter("WalletTypeMultiple", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WalletTransactionsAllTxn_Get_Result>("sp_WalletTransactionsAllTxn_Get", memberIdParameter, checkDeleteParameter, checkActiveParameter, checkApprovedByAdminParameter, transactionUniqueIdParameter, typeParameter, typeMultipleParameter, startDateParameter, endDateParameter, statusParameter, signParameter, memberNameParameter, vendorTransactionIdParameter, referenceParameter, transferTypeParameter, contactNumberParameter, recieverNameParameter, recieverContactNumberParameter, walletTypeParameter, todayParameter, weeklyParameter, monthlyParameter, refCodeParameter, parentTransactionIdParameter, vendorTypeParameter, customerIDParameter, walletTypeMultipleParameter);
        }
    
        public virtual ObjectResult<sproc_error_handler_Result> sproc_error_handler(string error_code, string id, string error_desc, string error_script, string url, string query_string, string error_source, string error_category, string msg, string actionUser, string ipaddress, string createdPlatform)
        {
            var error_codeParameter = error_code != null ?
                new ObjectParameter("error_code", error_code) :
                new ObjectParameter("error_code", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var error_descParameter = error_desc != null ?
                new ObjectParameter("error_desc", error_desc) :
                new ObjectParameter("error_desc", typeof(string));
    
            var error_scriptParameter = error_script != null ?
                new ObjectParameter("error_script", error_script) :
                new ObjectParameter("error_script", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var query_stringParameter = query_string != null ?
                new ObjectParameter("query_string", query_string) :
                new ObjectParameter("query_string", typeof(string));
    
            var error_sourceParameter = error_source != null ?
                new ObjectParameter("error_source", error_source) :
                new ObjectParameter("error_source", typeof(string));
    
            var error_categoryParameter = error_category != null ?
                new ObjectParameter("error_category", error_category) :
                new ObjectParameter("error_category", typeof(string));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            var actionUserParameter = actionUser != null ?
                new ObjectParameter("actionUser", actionUser) :
                new ObjectParameter("actionUser", typeof(string));
    
            var ipaddressParameter = ipaddress != null ?
                new ObjectParameter("ipaddress", ipaddress) :
                new ObjectParameter("ipaddress", typeof(string));
    
            var createdPlatformParameter = createdPlatform != null ?
                new ObjectParameter("CreatedPlatform", createdPlatform) :
                new ObjectParameter("CreatedPlatform", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sproc_error_handler_Result>("sproc_error_handler", error_codeParameter, idParameter, error_descParameter, error_scriptParameter, urlParameter, query_stringParameter, error_sourceParameter, error_categoryParameter, msgParameter, actionUserParameter, ipaddressParameter, createdPlatformParameter);
        }
    
        public virtual ObjectResult<string> UpdateMyPayment(Nullable<int> id, string jsonData, string providerName, string providerTypeId, string memberID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var jsonDataParameter = jsonData != null ?
                new ObjectParameter("JsonData", jsonData) :
                new ObjectParameter("JsonData", typeof(string));
    
            var providerNameParameter = providerName != null ?
                new ObjectParameter("ProviderName", providerName) :
                new ObjectParameter("ProviderName", typeof(string));
    
            var providerTypeIdParameter = providerTypeId != null ?
                new ObjectParameter("ProviderTypeId", providerTypeId) :
                new ObjectParameter("ProviderTypeId", typeof(string));
    
            var memberIDParameter = memberID != null ?
                new ObjectParameter("memberID", memberID) :
                new ObjectParameter("memberID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateMyPayment", idParameter, jsonDataParameter, providerNameParameter, providerTypeIdParameter, memberIDParameter);
        }
    
        public virtual ObjectResult<UserDetail_Result> UserDetail(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserDetail_Result>("UserDetail", memberIdParameter);
        }
    
        public virtual ObjectResult<WalletTransactionDetail_Result> WalletTransactionDetail(string transactionId)
        {
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WalletTransactionDetail_Result>("WalletTransactionDetail", transactionIdParameter);
        }
    }
}
